import os
import asyncio
import subprocess
from pathlib import Path
from transkribator_modules.config import logger

async def extract_audio_from_video(video_path: Path, audio_path: Path) -> bool:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é ffmpeg.
    
    Args:
        video_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
        audio_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—É–¥–∏–æ, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        audio_path.parent.mkdir(parents=True, exist_ok=True)
        
        logger.info(f"üéµ –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ –∏–∑ {video_path.name}")
        
        # FFmpeg –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ
        cmd = [
            'ffmpeg',
            '-i', str(video_path),
            '-vn',  # No video
            '-acodec', 'pcm_s16le',  # Audio codec
            '-ar', '44100',  # Sample rate
            '-ac', '2',  # Audio channels
            '-y',  # Overwrite output file
            str(audio_path)
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º ffmpeg
        process = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        stdout, stderr = await process.communicate()
        
        if process.returncode == 0:
            if audio_path.exists() and audio_path.stat().st_size > 0:
                file_size_mb = audio_path.stat().st_size / (1024 * 1024)
                logger.info(f"‚úÖ –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {file_size_mb:.1f} –ú–ë")
                return True
            else:
                logger.error("‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                return False
        else:
            error_msg = stderr.decode() if stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ ffmpeg: {error_msg}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
        return False

async def compress_audio_for_api(input_path: Path, output_path: Path = None) -> Path:
    """
    –°–∂–∏–º–∞–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API (MP3 —Ñ–æ—Ä–º–∞—Ç, –Ω–∏–∑–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç).
    
    Args:
        input_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
        output_path: –ü—É—Ç—å –¥–ª—è —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        Path: –ü—É—Ç—å –∫ —Å–∂–∞—Ç–æ–º—É —Ñ–∞–π–ª—É
    """
    try:
        if output_path is None:
            output_path = input_path.parent / f"{input_path.stem}_compressed.mp3"
            
        logger.info(f"üóúÔ∏è –°–∂–∏–º–∞—é –∞—É–¥–∏–æ: {input_path.name}")
        
        cmd = [
            'ffmpeg',
            '-i', str(input_path),
            '-codec:a', 'mp3',
            '-b:a', '64k',  # Low bitrate for API
            '-y',
            str(output_path)
        ]
        
        process = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        stdout, stderr = await process.communicate()
        
        if process.returncode == 0 and output_path.exists():
            original_size = input_path.stat().st_size / (1024 * 1024)
            compressed_size = output_path.stat().st_size / (1024 * 1024)
            compression_ratio = (1 - compressed_size / original_size) * 100
            
            logger.info(f"‚úÖ –ê—É–¥–∏–æ —Å–∂–∞—Ç–æ: {original_size:.1f}–ú–ë ‚Üí {compressed_size:.1f}–ú–ë (-{compression_ratio:.1f}%)")
            return output_path
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ –∞—É–¥–∏–æ")
            return input_path
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ –∞—É–¥–∏–æ: {e}")
        return input_path

def get_audio_duration(file_path: Path) -> float:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
    
    Args:
        file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
        
    Returns:
        float: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    try:
        cmd = [
            'ffprobe',
            '-v', 'quiet',
            '-show_entries', 'format=duration',
            '-of', 'csv=p=0',
            str(file_path)
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            duration = float(result.stdout.strip())
            logger.info(f"üìè –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration:.1f} —Å–µ–∫—É–Ω–¥")
            return duration
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {result.stderr}")
            return 0.0
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ: {e}")
        return 0.0 