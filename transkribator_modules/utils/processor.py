import asyncio
from pathlib import Path
from transkribator_modules.config import (
    logger, user_transcriptions, AUDIO_DIR, TRANSCRIPTIONS_DIR, MAX_MESSAGE_LENGTH
)
from transkribator_modules.audio.extractor import extract_audio_from_video
from transkribator_modules.transcribe.transcriber import (
    transcribe_audio, format_transcript_with_llm
)

async def process_video_file(video_path, chat_id, message_id, context, status_message=None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ —Ñ–∞–π–ª–∞, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é.
    –≠—Ç–∞ –≤–µ—Ä—Å–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—ä–µ–∫—Ç–∞ Update –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é —Å —Ñ–∞–π–ª–∞–º–∏."""
    
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    try:
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        audio_path = AUDIO_DIR / f"telegram_video_{message_id}.wav"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ
        if not video_path.exists():
            if status_message:
                await status_message.edit_text(
                    "–ú—è—É! –í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏. *–≥—Ä—É—Å—Ç–Ω–æ –º–∞—à–µ—Ç —Ö–≤–æ—Å—Ç–æ–º*"
                )
            else:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="–ú—è—É! –í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏. *–≥—Ä—É—Å—Ç–Ω–æ –º–∞—à–µ—Ç —Ö–≤–æ—Å—Ç–æ–º*"
                )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if not status_message:
            status_message = await context.bot.send_message(
                chat_id=chat_id,
                text="–ú—É—Ä-–º—É—Ä! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ... *—Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω*"
            )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
        await status_message.edit_text(
            "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ... *–Ω–µ—Ç–µ—Ä–ø–µ–ª–∏–≤–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –ª–∞–ø–∫–∞–º–∏*"
        )
        
        audio_extracted = await extract_audio_from_video(video_path, audio_path)
        if not audio_extracted:
            await status_message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ. *–≥—Ä—É—Å—Ç–Ω–æ –≤–∑–¥—ã—Ö–∞–µ—Ç*"
            )
            return
    
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        await status_message.edit_text(
            "–ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é... *–≤–æ–∑–±—É–∂–¥–µ–Ω–Ω–æ –≤–∏–ª—è–µ—Ç —Ö–≤–æ—Å—Ç–æ–º*"
        )
        
        raw_transcript = await transcribe_audio(audio_path)
        if not raw_transcript:
            await status_message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ. *—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω–Ω–æ –º—è—É–∫–∞–µ—Ç*"
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        await status_message.edit_text(
            "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –ü—Ä–∏–≤–æ–∂—É —Ç–µ–∫—Å—Ç –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥... *–¥–µ–ª–æ–≤–∏—Ç–æ —Å—Ç—É—á–∏—Ç –ø–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ*"
        )
        
        formatted_transcript = await format_transcript_with_llm(raw_transcript)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏
        transcript_path = TRANSCRIPTIONS_DIR / f"telegram_video_{message_id}.txt"
        raw_transcript_path = TRANSCRIPTIONS_DIR / f"telegram_video_{message_id}_raw.txt"
        
        with open(transcript_path, "w", encoding="utf-8") as f:
            f.write(formatted_transcript)
            
        with open(raw_transcript_path, "w", encoding="utf-8") as f:
            f.write(raw_transcript)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_transcriptions[chat_id] = {
            'raw': raw_transcript,
            'formatted': formatted_transcript,
            'path': str(transcript_path),
            'raw_path': str(raw_transcript_path),
            'timestamp': asyncio.get_event_loop().time()
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if len(formatted_transcript) > MAX_MESSAGE_LENGTH:
            # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
            await status_message.edit_text(
                "–ì–æ—Ç–æ–≤–æ! –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–∏–ª–∞—Å—å –¥–ª–∏–Ω–Ω–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º... *–¥–æ–≤–æ–ª—å–Ω–æ –º—É—Ä–ª—ã—á–µ—Ç*"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
            with open(transcript_path, "rb") as file:
                await context.bot.send_document(
                    chat_id=chat_id,
                    document=file,
                    filename=f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ {message_id}.txt",
                    caption="–í–æ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ! *–≤—ã–≥–∏–±–∞–µ—Ç —Å–ø–∏–Ω—É –æ—Ç –≥–æ—Ä–¥–æ—Å—Ç–∏*"
                )
        else:
            # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
            await status_message.edit_text(
                f"–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ:\n\n{formatted_transcript}\n\n@CyberKitty19_bot"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ –∏ —Å—ã—Ä–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        keyboard = [
            [
                InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏", callback_data=f"detailed_summary_{message_id}"),
                InlineKeyboardButton("üìã –ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏", callback_data=f"brief_summary_{message_id}")
            ],
            [InlineKeyboardButton("üîç –ü–æ–∫–∞–∑–∞—Ç—å —Å—ã—Ä—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é", callback_data=f"raw_{message_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º–º–∞—Ä–∏ –∏–ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
        
        logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ñ–∞–π–ª—ã: {transcript_path}, {raw_transcript_path}")
        return transcript_path, raw_transcript_path
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
        import traceback
        logger.error(traceback.format_exc())
        
        if status_message:
            await status_message.edit_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}. *–≤–∏–Ω–æ–≤–∞—Ç–æ –æ–ø—É—Å–∫–∞–µ—Ç —É—à–∏*"
            )
        return None, None

async def process_video(chat_id, message_id, update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é."""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    user_id = update.effective_user.id
    
    try:
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        from transkribator_modules.config import VIDEOS_DIR
        video_path = VIDEOS_DIR / f"telegram_video_{message_id}.mp4"
        audio_path = AUDIO_DIR / f"telegram_video_{message_id}.wav"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ
        if not video_path.exists():
            await update.message.reply_text(
                "–ú—è—É! –í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏. *–≥—Ä—É—Å—Ç–Ω–æ –º–∞—à–µ—Ç —Ö–≤–æ—Å—Ç–æ–º*"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status_message = await update.message.reply_text(
            "–ú—É—Ä-–º—É—Ä! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ... *—Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω*"
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
        await status_message.edit_text(
            "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ... *–Ω–µ—Ç–µ—Ä–ø–µ–ª–∏–≤–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –ª–∞–ø–∫–∞–º–∏*"
        )
        
        audio_extracted = await extract_audio_from_video(video_path, audio_path)
        if not audio_extracted:
            await status_message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ. *–≥—Ä—É—Å—Ç–Ω–æ –≤–∑–¥—ã—Ö–∞–µ—Ç*"
            )
            return
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        await status_message.edit_text(
            "–ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é... *–≤–æ–∑–±—É–∂–¥–µ–Ω–Ω–æ –≤–∏–ª—è–µ—Ç —Ö–≤–æ—Å—Ç–æ–º*"
        )
        
        raw_transcript = await transcribe_audio(audio_path)
        if not raw_transcript:
            await status_message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ. *—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω–Ω–æ –º—è—É–∫–∞–µ—Ç*"
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        await status_message.edit_text(
            "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –ü—Ä–∏–≤–æ–∂—É —Ç–µ–∫—Å—Ç –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥... *–¥–µ–ª–æ–≤–∏—Ç–æ —Å—Ç—É—á–∏—Ç –ø–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ*"
        )
        
        formatted_transcript = await format_transcript_with_llm(raw_transcript)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏
        transcript_path = TRANSCRIPTIONS_DIR / f"telegram_video_{message_id}.txt"
        raw_transcript_path = TRANSCRIPTIONS_DIR / f"telegram_video_{message_id}_raw.txt"
        
        with open(transcript_path, "w", encoding="utf-8") as f:
            f.write(formatted_transcript)
        
        with open(raw_transcript_path, "w", encoding="utf-8") as f:
            f.write(raw_transcript)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_transcriptions[user_id] = {
            'raw': raw_transcript,
            'formatted': formatted_transcript,
            'path': str(transcript_path),
            'raw_path': str(raw_transcript_path),
            'timestamp': asyncio.get_event_loop().time()
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if len(formatted_transcript) > MAX_MESSAGE_LENGTH:
            # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
            await status_message.edit_text(
                "–ì–æ—Ç–æ–≤–æ! –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–∏–ª–∞—Å—å –¥–ª–∏–Ω–Ω–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º... *–¥–æ–≤–æ–ª—å–Ω–æ –º—É—Ä–ª—ã—á–µ—Ç*"
            )
            
            with open(transcript_path, "rb") as f:
                await context.bot.send_document(
                    chat_id=chat_id,
                    document=f,
                    filename=f"transcript_{message_id}.txt",
                    caption="–í–æ—Ç –≤–∞—à–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è! *–≥–æ—Ä–¥–æ –ø–æ–¥–Ω–∏–º–∞–µ—Ç —Ö–≤–æ—Å—Ç*"
                )
        else:
            # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
            await status_message.edit_text(
                f"–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ:\n\n{formatted_transcript}\n\n@CyberKitty19_bot"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ –∏ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        keyboard = [
            [
                InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏", callback_data=f"detailed_summary_{message_id}"),
                InlineKeyboardButton("üìã –ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏", callback_data=f"brief_summary_{message_id}")
            ],
            [InlineKeyboardButton("üîç –ü–æ–∫–∞–∑–∞—Ç—å —Å—ã—Ä—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é", callback_data=f"raw_{message_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º–º–∞—Ä–∏ –∏–ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)} *–∏—Å–ø—É–≥–∞–Ω–Ω–æ –ø—Ä—è—á–µ—Ç—Å—è*"
        ) 