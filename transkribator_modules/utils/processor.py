import asyncio
from pathlib import Path
from transkribator_modules.config import (
    logger, user_transcriptions, AUDIO_DIR, TRANSCRIPTIONS_DIR, MAX_MESSAGE_LENGTH
)
from transkribator_modules.audio.extractor import extract_audio_from_video
from transkribator_modules.transcribe.transcriber import (
    transcribe_audio, format_transcript_with_llm
)
from transkribator_modules.db.database import SessionLocal, UserService
from transkribator_modules.db.models import PlanType

async def process_video_file(video_path, chat_id, message_id, context, status_message=None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ —Ñ–∞–π–ª–∞, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é.
    –≠—Ç–∞ –≤–µ—Ä—Å–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—ä–µ–∫—Ç–∞ Update –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é —Å —Ñ–∞–π–ª–∞–º–∏."""
    
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    try:
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        audio_path = AUDIO_DIR / f"telegram_video_{message_id}.wav"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ
        if not video_path.exists():
            if status_message:
                await status_message.edit_text(
                    "–ú—è—É! –í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏. *–≥—Ä—É—Å—Ç–Ω–æ –º–∞—à–µ—Ç —Ö–≤–æ—Å—Ç–æ–º*"
                )
            else:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="–ú—è—É! –í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏. *–≥—Ä—É—Å—Ç–Ω–æ –º–∞—à–µ—Ç —Ö–≤–æ—Å—Ç–æ–º*"
                )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if not status_message:
            status_message = await context.bot.send_message(
                chat_id=chat_id,
                text="–ú—É—Ä-–º—É—Ä! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ... *—Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω*"
            )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
        await status_message.edit_text(
            "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ... *–Ω–µ—Ç–µ—Ä–ø–µ–ª–∏–≤–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –ª–∞–ø–∫–∞–º–∏*"
        )
        
        audio_extracted = await extract_audio_from_video(video_path, audio_path)
        if not audio_extracted:
            await status_message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ. *–≥—Ä—É—Å—Ç–Ω–æ –≤–∑–¥—ã—Ö–∞–µ—Ç*"
            )
            return
    
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        await status_message.edit_text(
            "–ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é... *–≤–æ–∑–±—É–∂–¥–µ–Ω–Ω–æ –≤–∏–ª—è–µ—Ç —Ö–≤–æ—Å—Ç–æ–º*"
        )
        
        raw_transcript = await transcribe_audio(audio_path)
        if not raw_transcript:
            await status_message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ. *—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω–Ω–æ –º—è—É–∫–∞–µ—Ç*"
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        await status_message.edit_text(
            "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –ü—Ä–∏–≤–æ–∂—É —Ç–µ–∫—Å—Ç –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥... *–¥–µ–ª–æ–≤–∏—Ç–æ —Å—Ç—É—á–∏—Ç –ø–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ*"
        )
        
        formatted_transcript = await format_transcript_with_llm(raw_transcript)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏
        transcript_path = TRANSCRIPTIONS_DIR / f"telegram_video_{message_id}.txt"
        raw_transcript_path = TRANSCRIPTIONS_DIR / f"telegram_video_{message_id}_raw.txt"
        
        with open(transcript_path, "w", encoding="utf-8") as f:
            f.write(formatted_transcript)
            
        with open(raw_transcript_path, "w", encoding="utf-8") as f:
            f.write(raw_transcript)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_transcriptions[chat_id] = {
            'raw': raw_transcript,
            'formatted': formatted_transcript,
            'path': str(transcript_path),
            'raw_path': str(raw_transcript_path),
            'timestamp': asyncio.get_event_loop().time()
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if len(formatted_transcript) > MAX_MESSAGE_LENGTH:
            # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, —Å–æ–∑–¥–∞–µ–º Google Doc
            await status_message.edit_text(
                "–ì–æ—Ç–æ–≤–æ! –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–∏–ª–∞—Å—å –¥–ª–∏–Ω–Ω–æ–π, —Å–æ–∑–¥–∞—é Google Doc... *–¥–µ–ª–æ–≤–∏—Ç–æ —Å—Ç—É—á–∏—Ç –ª–∞–ø–∫–∞–º–∏*"
            )
            
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å Google Doc
            try:
                from transkribator_modules.utils.google_docs import create_transcript_google_doc
                video_filename = f"telegram_video_{message_id}.mp4"
                doc_url = await create_transcript_google_doc(formatted_transcript, video_filename, chat_id)
                
                if doc_url:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"‚úÖ **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞!**\n\n"
                             f"üìÑ **Google Doc:** [–û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç]({doc_url})\n\n"
                             f"üìã –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º\n"
                             f"üîó –°—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞–≤—Å–µ–≥–¥–∞\n\n"
                             f"üêæ *–≥–æ—Ä–¥–æ –º–∞—à–µ—Ç —Ö–≤–æ—Å—Ç–æ–º*",
                        parse_mode='Markdown',
                        disable_web_page_preview=False
                    )
                else:
                    # Fallback –∫ —Ñ–∞–π–ª—É –µ—Å–ª–∏ Google Docs –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                    with open(transcript_path, "rb") as file:
                        await context.bot.send_document(
                            chat_id=chat_id,
                            document=file,
                            filename=f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ {message_id}.txt",
                            caption="üìÑ Google Docs –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º! *–∏–∑–≤–∏–Ω—è—é—â–µ–µ—Å—è –º—è—É–∫–∞–Ω—å–µ*"
                        )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Google Doc: {e}")
                # Fallback –∫ —Ñ–∞–π–ª—É
                with open(transcript_path, "rb") as file:
                    await context.bot.send_document(
                        chat_id=chat_id,
                        document=file,
                        filename=f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ {message_id}.txt",
                        caption="üìÑ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Google Doc, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º! *—Å–º—É—â–µ–Ω–Ω–æ –ø—Ä—è—á–µ—Ç—Å—è*"
                    )
        else:
            # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
            await status_message.edit_text(
                f"‚úÖ **–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ:**\n\n{formatted_transcript}\n\n@CyberKitty19_bot"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ –∏ —Å—ã—Ä–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        keyboard = [
            [
                InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏", callback_data=f"detailed_summary_{message_id}"),
                InlineKeyboardButton("üìã –ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏", callback_data=f"brief_summary_{message_id}")
            ],
            [InlineKeyboardButton("üîç –ü–æ–∫–∞–∑–∞—Ç—å —Å—ã—Ä—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é", callback_data=f"raw_{message_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º–º–∞—Ä–∏ –∏–ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
        
        logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ñ–∞–π–ª—ã: {transcript_path}, {raw_transcript_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await check_user_limits_and_notify(chat_id, context)
        
        return transcript_path, raw_transcript_path
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
        import traceback
        logger.error(traceback.format_exc())
        
        if status_message:
            await status_message.edit_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}. *–≤–∏–Ω–æ–≤–∞—Ç–æ –æ–ø—É—Å–∫–∞–µ—Ç —É—à–∏*"
            )
        return None, None

async def process_video(chat_id, message_id, update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é."""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    user_id = update.effective_user.id
    
    try:
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        from transkribator_modules.config import VIDEOS_DIR
        video_path = VIDEOS_DIR / f"telegram_video_{message_id}.mp4"
        audio_path = AUDIO_DIR / f"telegram_video_{message_id}.wav"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ
        if not video_path.exists():
            await update.message.reply_text(
                "–ú—è—É! –í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏. *–≥—Ä—É—Å—Ç–Ω–æ –º–∞—à–µ—Ç —Ö–≤–æ—Å—Ç–æ–º*"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status_message = await update.message.reply_text(
            "–ú—É—Ä-–º—É—Ä! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ... *—Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω*"
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
        await status_message.edit_text(
            "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ... *–Ω–µ—Ç–µ—Ä–ø–µ–ª–∏–≤–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –ª–∞–ø–∫–∞–º–∏*"
        )
        
        audio_extracted = await extract_audio_from_video(video_path, audio_path)
        if not audio_extracted:
            await status_message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ. *–≥—Ä—É—Å—Ç–Ω–æ –≤–∑–¥—ã—Ö–∞–µ—Ç*"
            )
            return
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        await status_message.edit_text(
            "–ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é... *–≤–æ–∑–±—É–∂–¥–µ–Ω–Ω–æ –≤–∏–ª—è–µ—Ç —Ö–≤–æ—Å—Ç–æ–º*"
        )
        
        raw_transcript = await transcribe_audio(audio_path)
        if not raw_transcript:
            await status_message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ. *—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω–Ω–æ –º—è—É–∫–∞–µ—Ç*"
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        await status_message.edit_text(
            "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –ü—Ä–∏–≤–æ–∂—É —Ç–µ–∫—Å—Ç –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥... *–¥–µ–ª–æ–≤–∏—Ç–æ —Å—Ç—É—á–∏—Ç –ø–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ*"
        )
        
        formatted_transcript = await format_transcript_with_llm(raw_transcript)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏
        transcript_path = TRANSCRIPTIONS_DIR / f"telegram_video_{message_id}.txt"
        raw_transcript_path = TRANSCRIPTIONS_DIR / f"telegram_video_{message_id}_raw.txt"
        
        with open(transcript_path, "w", encoding="utf-8") as f:
            f.write(formatted_transcript)
        
        with open(raw_transcript_path, "w", encoding="utf-8") as f:
            f.write(raw_transcript)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_transcriptions[user_id] = {
            'raw': raw_transcript,
            'formatted': formatted_transcript,
            'path': str(transcript_path),
            'raw_path': str(raw_transcript_path),
            'timestamp': asyncio.get_event_loop().time()
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if len(formatted_transcript) > MAX_MESSAGE_LENGTH:
            # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
            await status_message.edit_text(
                "–ì–æ—Ç–æ–≤–æ! –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–∏–ª–∞—Å—å –¥–ª–∏–Ω–Ω–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º... *–¥–æ–≤–æ–ª—å–Ω–æ –º—É—Ä–ª—ã—á–µ—Ç*"
            )
            
            with open(transcript_path, "rb") as f:
                await context.bot.send_document(
                    chat_id=chat_id,
                    document=f,
                    filename=f"transcript_{message_id}.txt",
                    caption="–í–æ—Ç –≤–∞—à–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è! *–≥–æ—Ä–¥–æ –ø–æ–¥–Ω–∏–º–∞–µ—Ç —Ö–≤–æ—Å—Ç*"
                )
        else:
            # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
            await status_message.edit_text(
                f"–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ:\n\n{formatted_transcript}\n\n@CyberKitty19_bot"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ –∏ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        keyboard = [
            [
                InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏", callback_data=f"detailed_summary_{message_id}"),
                InlineKeyboardButton("üìã –ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏", callback_data=f"brief_summary_{message_id}")
            ],
            [InlineKeyboardButton("üîç –ü–æ–∫–∞–∑–∞—Ç—å —Å—ã—Ä—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é", callback_data=f"raw_{message_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º–º–∞—Ä–∏ –∏–ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)} *–∏—Å–ø—É–≥–∞–Ω–Ω–æ –ø—Ä—è—á–µ—Ç—Å—è*"
        ) 

async def check_user_limits_and_notify(chat_id, context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    db = SessionLocal()
    try:
        user_service = UserService(db)
        db_user = user_service.get_or_create_user(telegram_id=chat_id)
        usage_info = user_service.get_usage_info(db_user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if usage_info['minutes_limit']:
            percentage = usage_info['usage_percentage']
            remaining = usage_info['minutes_remaining']
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ 80% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if 75 <= percentage < 90 and remaining > 0:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {remaining:.1f} –º–∏–Ω—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {percentage:.1f}%)\n\n"
                         f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n\n"
                         f"‚≠ê /plans ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã",
                    parse_mode='Markdown'
                )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ 90% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            elif percentage >= 90 and remaining > 0:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üö® **–õ–∏–º–∏—Ç –ø–æ—á—Ç–∏ –∏—Å—á–µ—Ä–ø–∞–Ω!** –û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {remaining:.1f} –º–∏–Ω—É—Ç\n\n"
                         f"üî• **–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:** –æ–±–Ω–æ–≤–∏ –ø–ª–∞–Ω –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏ +20% –±–æ–Ω—É—Å–Ω—ã—Ö –º–∏–Ω—É—Ç!\n\n"
                         f"‚≠ê /plans ‚Äî —Å—Ä–æ—á–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ",
                    parse_mode='Markdown'
                )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
            elif remaining <= 0:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üòø **–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω!** –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–Ω—É—Ç\n\n"
                         f"üéØ **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞:** {_get_next_reset_date()}\n\n"
                         f"üöÄ **–ò–ª–∏ –æ–±–Ω–æ–≤–∏ –ø–ª–∞–Ω –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:**\n"
                         f"‚≠ê /plans ‚Äî –∫—É–ø–∏—Ç—å —Ç–∞—Ä–∏—Ñ",
                    parse_mode='Markdown'
                )
        
        # –ü—Ä–æ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if db_user.transcriptions_count == 0:  # –ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π!**\n\n"
                     f"üéÅ **–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è –ø—Ä–æ–º–æ–∫–æ–¥:** `–ü–ï–†–í–´–ô2024` ‚Äî –¥–∞–µ—Ç +50% –∫ –ª–∏–º–∏—Ç—É –Ω–∞ –º–µ—Å—è—Ü!\n\n"
                     f"üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–º–æ–∫–æ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
                parse_mode='Markdown'
            )
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–æ–≤: {e}")
        return False
    finally:
        db.close()

def _get_next_reset_date():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤"""
    from datetime import datetime, timedelta
    import calendar
    
    now = datetime.utcnow()
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    if now.month == 12:
        next_month = datetime(now.year + 1, 1, 1)
    else:
        next_month = datetime(now.year, now.month + 1, 1)
    
    return next_month.strftime('%d.%m.%Y')

# --- –Ω–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —á–∏—Å—Ç—ã—Ö –∞—É–¥–∏–æ ---------------------------------------------------

async def process_audio_file(audio_path, chat_id, message_id, context, status_message=None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ-—Ñ–∞–π–ª (–±–µ–∑ —ç—Ç–∞–ø–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –≤–∏–¥–µ–æ)."""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup

    try:
        if not audio_path.exists():
            await context.bot.send_message(chat_id=chat_id, text="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω üòø")
            return

        if not status_message:
            status_message = await context.bot.send_message(chat_id=chat_id, text="–ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ‚Ä¶")

        # 1. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        await status_message.edit_text("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é‚Ä¶ üêæ")
        raw_transcript = await transcribe_audio(audio_path)
        if not raw_transcript:
            await status_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é üòø")
            return

        # 2. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        await status_message.edit_text("–§–æ—Ä–º–∞—Ç–∏—Ä—É—é —Ç–µ–∫—Å—Ç‚Ä¶ ‚ú®")
        formatted_transcript = await format_transcript_with_llm(raw_transcript)

        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
        transcript_path = TRANSCRIPTIONS_DIR / f"telegram_audio_{message_id}.txt"
        raw_path = TRANSCRIPTIONS_DIR / f"telegram_audio_{message_id}_raw.txt"
        with open(transcript_path, "w", encoding="utf-8") as f:
            f.write(formatted_transcript)
        with open(raw_path, "w", encoding="utf-8") as f:
            f.write(raw_transcript)

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if len(formatted_transcript) > MAX_MESSAGE_LENGTH:
            await status_message.edit_text("–¢–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º‚Ä¶")
            with open(transcript_path, "rb") as f:
                await context.bot.send_document(chat_id=chat_id, document=f, filename=f"transcript_{message_id}.txt")
        else:
            await status_message.edit_text(f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–∞:\n\n{formatted_transcript}")

        # 5. –ö–Ω–æ–ø–∫–∞ —Å–∞–º–º–∞—Ä–∏
        keyboard = [[InlineKeyboardButton("üìã –ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏", callback_data=f"brief_summary_{message_id}")]]
        await context.bot.send_message(chat_id=chat_id, text="–•–æ—á–µ—à—å –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏?", reply_markup=InlineKeyboardMarkup(keyboard))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ process_audio_file: {e}")
        if status_message:
            await status_message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}") 