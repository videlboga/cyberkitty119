#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π Bot API Server
–û–±—Ö–æ–¥–∏—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è python-telegram-bot –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
"""

import aiohttp
import asyncio
from pathlib import Path
from typing import Optional
import logging
import os

logger = logging.getLogger(__name__)

async def download_large_file(
    bot_token: str,
    file_id: str,
    destination: Path,
    bot_api_url: str = "http://telegram-bot-api:8081"
) -> bool:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ Bot API Server
    
    Args:
        bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
        file_id: ID —Ñ–∞–π–ª–∞ –≤ Telegram
        destination: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        bot_api_url: URL Bot API Server
        
    Returns:
        True –µ—Å–ª–∏ —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    
    try:
        async with aiohttp.ClientSession() as session:
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            logger.info(f"üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ {file_id}")
            
            get_file_url = f"{bot_api_url}/bot{bot_token}/getFile"
            
            async with session.post(get_file_url, json={"file_id": file_id}) as resp:
                if resp.status != 200:
                    error_text = await resp.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ getFile: {resp.status} - {error_text}")
                    return False
                
                file_info = await resp.json()
                
                if not file_info.get("ok"):
                    logger.error(f"‚ùå Bot API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {file_info}")
                    return False
                
                file_path = file_info["result"]["file_path"]
                file_size = file_info["result"].get("file_size", 0)
                
                logger.info(f"üìÑ –§–∞–π–ª: {file_path}")
                logger.info(f"üìä –†–∞–∑–º–µ—Ä: {file_size / (1024*1024):.1f} –ú–ë")
            
            # –í –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ Bot API Server —á–∞—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ —Å–≤–æ–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞,
            # –Ω–∞–ø—Ä–∏–º–µ—Ä: /var/lib/telegram-bot-api/... –≠—Ç–æ—Ç –ø—É—Ç—å –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –±–æ—Ç–∞.
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–º—ç–ø–ø–∏—Ç—å –µ–≥–æ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å, –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–æ—Ç–∞
            if file_path.startswith('/'):
                bot_api_data_dir = os.getenv('BOT_API_DATA_DIR', '/app/telegram-bot-api-data')
                candidates = [
                    ('/var/lib/telegram-bot-api', bot_api_data_dir),
                    ('/var/lib/telegram-bot-api-data', bot_api_data_dir),
                ]

                # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–º—ç–ø–ø–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –≤ –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
                mapped_path = None
                for src_prefix, dst_prefix in candidates:
                    if file_path.startswith(src_prefix + '/'):
                        candidate_path = file_path.replace(src_prefix, dst_prefix, 1)
                        if os.path.exists(candidate_path):
                            mapped_path = candidate_path
                            break

                if mapped_path:
                    logger.info("üîß –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é (—á–µ—Ä–µ–∑ –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥)")
                    logger.info(f"üìÇ –ò—Å—Ç–æ—á–Ω–∏–∫: {mapped_path}")
                    logger.info(f"üìÇ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {destination}")

                    destination.parent.mkdir(parents=True, exist_ok=True)
                    import shutil
                    shutil.copy2(mapped_path, destination)

                    copied_size = os.path.getsize(destination)
                    logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {copied_size / (1024*1024):.1f} –ú–ë")
                    return True

                # –ï—Å–ª–∏ —Å–º—ç–ø–ø–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–æ–ø—Ä–æ–±—É–µ–º HTTP-—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ.
                # –ù–æ Bot API /file –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π file_path –±–µ–∑ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏ —Ç–æ–∫–µ–Ω–∞.
                rel_path = file_path
                # –£–±–µ—Ä—ë–º –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ –¥–∞–Ω–Ω—ã—Ö
                for src_prefix, _ in candidates:
                    if rel_path.startswith(src_prefix + '/'):
                        rel_path = rel_path[len(src_prefix) + 1:]
                        break
                # –ï—Å–ª–∏ –≤ –Ω–∞—á–∞–ª–µ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–∫–µ–Ω, —É–¥–∞–ª–∏–º –∏ –µ–≥–æ
                token_prefix = f"{bot_token}/"
                if rel_path.startswith(token_prefix):
                    rel_path = rel_path[len(token_prefix):]

                logger.info("üîß HTTP —Ä–µ–∂–∏–º: —Å–∫–∞—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ Bot API")
                download_url = f"{bot_api_url}/file/bot{bot_token}/{rel_path}"
                logger.info(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª —Å {download_url}")
                
                async with session.get(download_url) as resp:
                    if resp.status != 200:
                        error_text = await resp.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {resp.status} - {error_text}")
                        return False

                    destination.parent.mkdir(parents=True, exist_ok=True)
                    total_size = 0
                    with open(destination, 'wb') as f:
                        async for chunk in resp.content.iter_chunked(8192):
                            f.write(chunk)
                            total_size += len(chunk)
                            if total_size and total_size % (10 * 1024 * 1024) == 0:
                                logger.info(f"üì• –°–∫–∞—á–∞–Ω–æ: {total_size / (1024*1024):.1f} –ú–ë")
                    logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: {total_size / (1024*1024):.1f} –ú–ë")
                    return True
            else:
                # Fallback: –ø—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ HTTP (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                logger.info(f"üîß HTTP —Ä–µ–∂–∏–º: —Å–∫–∞—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ Bot API")
                download_url = f"{bot_api_url}/file/bot{bot_token}/{file_path}"
                logger.info(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª —Å {download_url}")
                
                async with session.get(download_url) as resp:
                    if resp.status != 200:
                        error_text = await resp.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {resp.status} - {error_text}")
                        return False
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    destination.parent.mkdir(parents=True, exist_ok=True)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                    total_size = 0
                    with open(destination, 'wb') as f:
                        async for chunk in resp.content.iter_chunked(8192):
                            f.write(chunk)
                            total_size += len(chunk)
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                            if total_size % (10 * 1024 * 1024) == 0:  # –ö–∞–∂–¥—ã–µ 10 –ú–ë
                                logger.info(f"üì• –°–∫–∞—á–∞–Ω–æ: {total_size / (1024*1024):.1f} –ú–ë")
                    
                    logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: {total_size / (1024*1024):.1f} –ú–ë")
                    return True
                
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return False

async def get_file_info(
    bot_token: str,
    file_id: str,
    bot_api_url: str = "http://telegram-bot-api:8081"
) -> Optional[dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    
    try:
        async with aiohttp.ClientSession() as session:
            get_file_url = f"{bot_api_url}/bot{bot_token}/getFile"
            
            async with session.post(get_file_url, json={"file_id": file_id}) as resp:
                if resp.status != 200:
                    return None
                
                file_info = await resp.json()
                
                if file_info.get("ok"):
                    return file_info["result"]
                else:
                    return None
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {e}")
        return None 