#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π Bot API Server
–û–±—Ö–æ–¥–∏—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è python-telegram-bot –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
"""

import aiohttp
import asyncio
from pathlib import Path
from typing import Optional
import logging
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
try:
    from ..config import LOCAL_BOT_API_URL
    DEFAULT_BOT_API_URL = LOCAL_BOT_API_URL
except ImportError:
    DEFAULT_BOT_API_URL = "http://localhost:9081"

logger = logging.getLogger(__name__)

async def download_large_file(
    bot_token: str,
    file_id: str,
    destination: Path,
    bot_api_url: str = None
) -> bool:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ Bot API Server
    
    Args:
        bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
        file_id: ID —Ñ–∞–π–ª–∞ –≤ Telegram
        destination: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        bot_api_url: URL Bot API Server (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        
    Returns:
        True –µ—Å–ª–∏ —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    
    if bot_api_url is None:
        bot_api_url = DEFAULT_BOT_API_URL
    
    try:
        async with aiohttp.ClientSession() as session:
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            logger.info(f"üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ {file_id}")
            
            get_file_url = f"{bot_api_url}/bot{bot_token}/getFile"
            
            async with session.post(get_file_url, json={"file_id": file_id}) as resp:
                if resp.status != 200:
                    error_text = await resp.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ getFile: {resp.status} - {error_text}")
                    return False
                
                file_info = await resp.json()
                
                if not file_info.get("ok"):
                    logger.error(f"‚ùå Bot API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {file_info}")
                    return False
                
                file_path = file_info["result"]["file_path"]
                file_size = file_info["result"].get("file_size", 0)
                
                logger.info(f"üìÑ –§–∞–π–ª: {file_path}")
                logger.info(f"üìä –†–∞–∑–º–µ—Ä: {file_size / (1024*1024):.1f} –ú–ë")
            
            # –í –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ Bot API Server –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å —á–µ—Ä–µ–∑ volume mapping
            if file_path.startswith('/var/lib/telegram-bot-api/'):
                # –ó–∞–º–µ–Ω—è–µ–º –ø—É—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å (–≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –±–æ—Ç–∞)
                local_file_path = file_path.replace('/var/lib/telegram-bot-api/', '/app/telegram-bot-api-data/')
                
                if os.path.exists(local_file_path):
                    logger.info(f"üîß –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é")
                    logger.info(f"üìÇ –ò—Å—Ç–æ—á–Ω–∏–∫: {local_file_path}")
                    logger.info(f"üìÇ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {destination}")
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    destination.parent.mkdir(parents=True, exist_ok=True)
                    
                    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
                    import shutil
                    shutil.copy2(local_file_path, destination)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    copied_size = os.path.getsize(destination)
                    logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {copied_size / (1024*1024):.1f} –ú–ë")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {local_file_path}")
            
            # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º HTTP —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            if file_path.startswith('/'):
                # –î–ª—è –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π —É–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ª–µ—à
                file_path = file_path.lstrip('/')
            
            # Fallback: –ø—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ HTTP (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            logger.info(f"üîß HTTP —Ä–µ–∂–∏–º: —Å–∫–∞—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ Bot API")
            download_url = f"{bot_api_url}/file/bot{bot_token}/{file_path}"
            logger.info(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª —Å {download_url}")
            
            async with session.get(download_url) as resp:
                if resp.status != 200:
                    error_text = await resp.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {resp.status} - {error_text}")
                    return False
                
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                destination.parent.mkdir(parents=True, exist_ok=True)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                total_size = 0
                with open(destination, 'wb') as f:
                    async for chunk in resp.content.iter_chunked(8192):
                        f.write(chunk)
                        total_size += len(chunk)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                        if total_size % (10 * 1024 * 1024) == 0:  # –ö–∞–∂–¥—ã–µ 10 –ú–ë
                            logger.info(f"üì• –°–∫–∞—á–∞–Ω–æ: {total_size / (1024*1024):.1f} –ú–ë")
                
                logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: {total_size / (1024*1024):.1f} –ú–ë")
                return True
                
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return False

async def get_file_info(
    bot_token: str,
    file_id: str,
    bot_api_url: str = None
) -> Optional[dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    
    if bot_api_url is None:
        bot_api_url = DEFAULT_BOT_API_URL
    
    try:
        async with aiohttp.ClientSession() as session:
            get_file_url = f"{bot_api_url}/bot{bot_token}/getFile"
            
            async with session.post(get_file_url, json={"file_id": file_id}) as resp:
                if resp.status != 200:
                    return None
                
                file_info = await resp.json()
                
                if file_info.get("ok"):
                    return file_info["result"]
                else:
                    return None
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {e}")
        return None 