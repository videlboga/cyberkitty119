import aiohttp
import json
import os
import asyncio
from pathlib import Path
from transkribator_modules.config import logger, OPENROUTER_API_KEY, OPENROUTER_MODEL, DEEPINFRA_API_KEY

async def compress_audio_for_api(audio_path):
    """–°–∂–∏–º–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API, —É–º–µ–Ω—å—à–∞—è —Ä–∞–∑–º–µ—Ä."""
    try:
        audio_path = Path(audio_path)
        compressed_path = audio_path.parent / f"{audio_path.stem}_compressed.mp3"
        
        logger.info(f"–°–∂–∏–º–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª: {audio_path} -> {compressed_path}")
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∂–∞—Ç–∏—è –≤ MP3 —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        cmd = [
            'ffmpeg',
            '-i', str(audio_path),
            '-acodec', 'mp3',
            '-b:a', '96k',  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            '-ar', '22050',  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è —Ä–µ—á–∏
            '-ac', '1',  # –ú–æ–Ω–æ –∫–∞–Ω–∞–ª
            '-af', 'highpass=f=80,lowpass=f=8000',  # –§–∏–ª—å—Ç—Ä —á–∞—Å—Ç–æ—Ç –¥–ª—è —Ä–µ—á–∏
            '-y',
            str(compressed_path)
        ]
        
        process = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        stdout, stderr = await process.communicate()
        
        if process.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ –∞—É–¥–∏–æ: {stderr.decode()}")
            return str(audio_path)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        if compressed_path.exists() and compressed_path.stat().st_size > 0:
            original_size = audio_path.stat().st_size
            compressed_size = compressed_path.stat().st_size
            compression_ratio = (1 - compressed_size / original_size) * 100
            logger.info(f"–ê—É–¥–∏–æ —Å–∂–∞—Ç–æ: {original_size} -> {compressed_size} –±–∞–π—Ç (—Å–∂–∞—Ç–∏–µ {compression_ratio:.1f}%)")
            return str(compressed_path)
        else:
            logger.warning("–°–∂–∞—Ç—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª")
            return str(audio_path)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ –∞—É–¥–∏–æ: {e}")
        return str(audio_path)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def transcribe_audio(audio_path, model_name="base"):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é DeepInfra API. –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–µ–æ –¥–ª–∏–Ω–Ω–µ–µ 30 –º–∏–Ω—É—Ç."""
    
    if not DEEPINFRA_API_KEY:
        logger.error("DeepInfra API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return None
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
        audio_path = Path(audio_path)
        logger.info(f"üéôÔ∏è –û–ø—Ä–µ–¥–µ–ª—è—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {audio_path}")
        
        cmd = [
            'ffprobe',
            '-v', 'quiet',
            '-show_entries', 'format=duration',
            '-of', 'csv=p=0',
            str(audio_path)
        ]
        
        process = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        stdout, stderr = await process.communicate()
        
        if process.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {stderr.decode()}")
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
            logger.info("–ü—Ä–æ–±—É—é –ø—Ä—è–º—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
            return await transcribe_audio_direct(audio_path)
            
        total_duration = float(stdout.decode().strip())
        duration_minutes = total_duration / 60
        logger.info(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration_minutes:.1f} –º–∏–Ω—É—Ç ({total_duration:.1f} —Å–µ–∫—É–Ω–¥)")
        
        # –†–µ—à–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if duration_minutes <= 30:
            logger.info(f"üìÅ –í–∏–¥–µ–æ –¥–æ 30 –º–∏–Ω—É—Ç - –∏—Å–ø–æ–ª—å–∑—É—é –ü–†–Ø–ú–£–Æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –±–µ–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
            result = await transcribe_audio_direct(audio_path)
            if result:
                return result
            else:
                logger.warning("–ü—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –∫–∞–∫ fallback...")
                return await split_and_transcribe_audio(audio_path)
        else:
            logger.info(f"‚úÇÔ∏è –í–∏–¥–µ–æ –±–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç - –∏—Å–ø–æ–ª—å–∑—É—é –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–Æ")
            result = await split_and_transcribe_audio(audio_path)
            if result:
                return result
            else:
                logger.warning("–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞")
                return None
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
        # Fallback –∫ –ø—Ä—è–º–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        logger.info("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ, –ø—Ä–æ–±—É—é –ø—Ä—è–º—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é...")
        return await transcribe_audio_direct(audio_path)

DEEPINFRA_MODEL_CANDIDATES = [
    "openai/whisper-large-v3-turbo",  # –±—ã—Å—Ç—Ä—ã–π –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
    "openai/whisper-large-v3",        # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
    "openai/whisper-large-v2",        # –ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è
]

async def _post_to_deepinfra(audio_fp, file_name: str, timeout: aiohttp.ClientTimeout):
    """–ü—Ä–æ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ DeepInfra –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π –ø–æ –æ—á–µ—Ä–µ–¥–∏.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏–ª–∏ None.
    """
    headers = {"Authorization": f"Bearer {DEEPINFRA_API_KEY}"}

    async with aiohttp.ClientSession(timeout=timeout) as session:
        form_data = aiohttp.FormData()
        form_data.add_field('audio', audio_fp, filename=file_name)

        for model in DEEPINFRA_MODEL_CANDIDATES:
            url = f"https://api.deepinfra.com/v1/inference/{model}"
            try:
                audio_fp.seek(0)
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é {file_name} –≤ DeepInfra, –º–æ–¥–µ–ª—å: {model}‚Ä¶")
                async with session.post(url, headers=headers, data=form_data) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        return data.get('text', '')
                    else:
                        err = await resp.text()
                        logger.warning(f"‚ö†Ô∏è DeepInfra {model} –æ—Ç–≤–µ—Ç {resp.status}: {err}")
            except (aiohttp.ClientError, asyncio.TimeoutError) as e:
                logger.warning(f"‚ö†Ô∏è –°–±–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepInfra –º–æ–¥–µ–ª—å {model}: {e}")

        return None

async def transcribe_audio_direct(audio_path):
    """–ü—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ DeepInfra API –±–µ–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏."""
    if not DEEPINFRA_API_KEY:
        logger.warning("DeepInfra API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return None
        
    try:
        logger.info(f"üöÄ –ü–†–Ø–ú–ê–Ø –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–Ø: {audio_path}")
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–∂–∏–º–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è API
        compressed_audio_path = await compress_audio_for_api(audio_path)
        
        file_name = Path(compressed_audio_path).name
        with open(compressed_audio_path, 'rb') as audio_file:
            timeout = aiohttp.ClientTimeout(total=600)  # 10-–º–∏–Ω –Ω–∞ —Ñ–∞–π–ª
            transcript_text = await _post_to_deepinfra(audio_file, file_name, timeout)

        if transcript_text:
            logger.info("‚úÖ –ü–†–Ø–ú–ê–Ø –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(transcript_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            logger.error("‚ùå –í—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã DeepInfra –≤–µ—Ä–Ω—É–ª–∏ –æ—à–∏–±–∫—É")

        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if compressed_audio_path != str(audio_path):
            try:
                Path(compressed_audio_path).unlink()
            except Exception:
                pass

        return transcript_text
        
    except asyncio.TimeoutError:
        logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä—è–º–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ {audio_path}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return None

async def format_transcript_with_llm(raw_transcript: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–∞—è –ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        if not raw_transcript or len(raw_transcript.strip()) < 10:
            logger.warning("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return raw_transcript
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter API –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if OPENROUTER_API_KEY:
            formatted = await format_transcript_with_openrouter(raw_transcript)
            if formatted:
                return formatted
        
        # –§–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLM
        return raw_transcript
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
        return raw_transcript

async def format_transcript_with_openrouter(raw_transcript: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—ã—Ä—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å –ø–æ–º–æ—â—å—é OpenRouter API."""
    if not OPENROUTER_API_KEY or not OPENROUTER_MODEL:
        logger.warning("OpenRouter API –∫–ª—é—á –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return None
        
    try:
        logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é OpenRouter API, –º–æ–¥–µ–ª—å: {OPENROUTER_MODEL}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        system_prompt = """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—ã—Ä—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π. 
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—ã—Ä—É—é –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ –≤ –∏–¥–µ–∞–ª—å–Ω–æ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç.
        –¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—á–µ–Ω—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—à–∏–±–æ–∫, –æ—á–∏—Å—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏—é
        –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ–∫—Å—Ç–∞. –ù–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Ä–µ—á–∏ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.
        –ù–µ –¥–æ–±–∞–≤–ª—è–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º—ã—Å–ª–∏ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ."""
        
        user_prompt = f"""–í–æ—Ç —Å—ã—Ä–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –µ–µ –≤ –∏–¥–µ–∞–ª—å–Ω–æ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:

{raw_transcript}

–ü—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
1. –¢—â–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤—å –≤—Å–µ –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è, –≥–¥–µ –æ–Ω–∏ –æ—á–µ–≤–∏–¥–Ω—ã
2. –î–æ–±–∞–≤—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é (—Ç–æ—á–∫–∏, –∑–∞–ø—è—Ç—ã–µ, –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏)
3. –†–∞–∑–±–µ–π —Ç–µ–∫—Å—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∞–±–∑–∞—Ü—ã
4. –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏ –≤—Å–µ –ø–æ–≤—Ç–æ—Ä—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Ä–µ—á–∏ (—ç—ç—ç, –º–º–º, –∏ —Ç.–¥.) –∏ —Å–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã
5. –ò—Å–ø—Ä–∞–≤—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã —Ä–µ—á–∏
6. –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∏–¥–µ–∞–ª—å–Ω–æ —á–∏—Ç–∞–µ–º—ã–º, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é
7. –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": OPENROUTER_MODEL,
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            "temperature": 0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            "max_tokens": 4096
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        async with aiohttp.ClientSession() as session:
            async with session.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=payload
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    formatted_text = data["choices"][0]["message"]["content"]
                    logger.info("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é OpenRouter API")
                    return formatted_text
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç OpenRouter API: {response.status}, {error_text}")
                    return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenRouter API: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return None 

async def generate_detailed_summary(transcript: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–∞—è –ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        if not transcript or len(transcript.strip()) < 10:
            logger.warning("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å–∞–º–º–∞—Ä–∏")
            return "–ú—è—É... –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å–∞–º–º–∞—Ä–∏. *–∑–∞–¥—É–º—á–∏–≤–æ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç*"
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏
        if OPENROUTER_API_KEY:
            system_prompt = """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤, –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –≤—Å—Ç—Ä–µ—á.
            –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ–∑—é–º–µ, 
            –∫–æ—Ç–æ—Ä–æ–µ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è, –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è, –ø—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –ø–ª–∞–Ω –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π."""
            
            user_prompt = f"""–í–æ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤—Å—Ç—Ä–µ—á–∏/—Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏:

{transcript}

–í —Ç–≤–æ–µ–º —Å–∞–º–º–∞—Ä–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã:
1. –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–∞–µ–º—ã–µ —Ç–µ–º—ã (—Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ)
2. –ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
3. –ü—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è (–µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ –∏–º–µ—é—Ç—Å—è)
4. –î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏ –∏ –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ –æ–±—Å—É–∂–¥–∞–ª–∏—Å—å)

–°–∞–º–º–∞—Ä–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º."""
            
            result = await request_llm_response(system_prompt, user_prompt)
            if result:
                return result
            else:
                return "–ú—è—É... –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –º–æ–∏–º–∏ –∫–∏–±–µ—Ä–ª–∞–ø–∫–∞–º–∏! üêæ –ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏. *–≥—Ä—É—Å—Ç–Ω–æ –æ–ø—É—Å–∫–∞–µ—Ç —É—à–∫–∏* –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é @Like_a_duck - –æ–Ω —Ç–æ—á–Ω–æ –ø–æ–º–æ–∂–µ—Ç! üöÄ"
        
        return "–ú—è—É... –£ –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–º–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–∞–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏! üòø –ù–∞–ø–∏—à–∏—Ç–µ @Like_a_duck - –æ–Ω –Ω–∞—Å—Ç—Ä–æ–∏—Ç –≤—Å—ë –∫–∞–∫ –Ω–∞–¥–æ! ‚öôÔ∏è"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å–∞–º–º–∞—Ä–∏: {e}")
        return f"–û–π-–æ–π! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∏–±–µ—Ä–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å–∞–º–º–∞—Ä–∏! ü§ñüí• –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ @Like_a_duck —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å - –æ–Ω –≤—Å—ë –∏—Å–ø—Ä–∞–≤–∏—Ç! üõ†Ô∏è\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {str(e)}"

async def generate_brief_summary(transcript: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–∞—è –ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        if not transcript or len(transcript.strip()) < 10:
            logger.warning("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–∞–º–º–∞—Ä–∏")
            return "–ú—è—É... –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–∞–º–º–∞—Ä–∏. *—Å –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ–º –∏–∑—É—á–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç*"
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏
        if OPENROUTER_API_KEY:
            system_prompt = """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ, –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤.
            –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≤—ã—á–ª–µ–Ω–∏—Ç—å —Å–∞–º—É—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –µ–µ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–∂–∞—Ç–æ–º –≤–∏–¥–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ 
            –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã, —Ä–µ—à–µ–Ω–∏—è –∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏."""
            
            user_prompt = f"""–í–æ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤—Å—Ç—Ä–µ—á–∏/—Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ (–Ω–µ –±–æ–ª–µ–µ 300 —Å–ª–æ–≤):

{transcript}

–í —Ç–≤–æ–µ–º –∫—Ä–∞—Ç–∫–æ–º —Å–∞–º–º–∞—Ä–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã:
1. –ì–ª–∞–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–∞–µ–º—ã–µ —Ç–µ–º—ã (–æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ)
2. –ü—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è (–µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ –∏–º–µ—é—Ç—Å—è)
3. –î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏ (–µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ –æ–±—Å—É–∂–¥–∞–ª–∏—Å—å)

–°–∞–º–º–∞—Ä–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–º, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º."""
            
            result = await request_llm_response(system_prompt, user_prompt)
            if result:
                return result
            else:
                return "–ú—è—É... –ú–æ–∏ –∫–∏–±–µ—Ä–ª–∞–ø–∫–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Å–ª—É—à–∞—é—Ç—Å—è! üêæ –ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏. *–≤–∏–Ω–æ–≤–∞—Ç–æ –º—è—É–∫–∞–µ—Ç* –°–æ–æ–±—â–∏—Ç–µ @Like_a_duck - –æ–Ω –≤—Å—ë –Ω–∞–ª–∞–¥–∏—Ç! üí´"
        
        return "–ú—è—É... –£ –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–º–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–∞–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏! üòø –ü–∏—à–∏—Ç–µ @Like_a_duck - –æ–Ω –ø–æ–¥–∫–ª—é—á–∏—Ç –Ω—É–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã! üîå"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–∞–º–º–∞—Ä–∏: {e}")
        return f"–ê–π-–∞–π! –ö–∏–±–µ—Ä–æ—à–∏–±–∫–∞ –≤ –º–æ–∏—Ö —Å—Ö–µ–º–∞—Ö! ü§ñ‚ö° –ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ @Like_a_duck - –æ–Ω —Ä–∞–∑–±–µ—Ä—ë—Ç—Å—è! üîß\n\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}"

async def request_llm_response(system_prompt: str, user_prompt: str) -> str:
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ LLM —á–µ—Ä–µ–∑ OpenRouter API."""
    if not OPENROUTER_API_KEY or not OPENROUTER_MODEL:
        logger.warning("OpenRouter API –∫–ª—é—á –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        logger.warning(f"OPENROUTER_API_KEY exists: {bool(OPENROUTER_API_KEY)}")
        logger.warning(f"OPENROUTER_MODEL: {OPENROUTER_MODEL}")
        return None
        
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API, –º–æ–¥–µ–ª—å: {OPENROUTER_MODEL}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": OPENROUTER_MODEL,
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            "temperature": 0.3,
            "max_tokens": 4096
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        timeout = aiohttp.ClientTimeout(total=120)  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=payload
            ) as response:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API —Å –∫–æ–¥–æ–º: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    result_text = data["choices"][0]["message"]["content"]
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç LLM —á–µ—Ä–µ–∑ OpenRouter API, –¥–ª–∏–Ω–∞: {len(result_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return result_text
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç OpenRouter API: {response.status}, {error_text}")
                    return None
        
    except asyncio.TimeoutError:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter API")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter API: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return None

async def split_and_transcribe_audio(audio_path):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ –∞—É–¥–∏–æ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π —á–µ—Ä–µ–∑ DeepInfra API."""
    if not DEEPINFRA_API_KEY:
        logger.warning("DeepInfra API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return None
        
    import time
    start_time = time.time()
        
    try:
        audio_path = Path(audio_path)
        logger.info(f"üöÄ –ù–ê–ß–ò–ù–ê–Æ –û–ë–†–ê–ë–û–¢–ö–£ –ê–£–î–ò–û: {audio_path}")
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {time.strftime('%H:%M:%S', time.localtime(start_time))}")
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–∂–∏–º–∞–µ–º –∞—É–¥–∏–æ
        compressed_audio_path = await compress_audio_for_api(audio_path)
        
        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        segments_dir = audio_path.parent / f"{audio_path.stem}_segments"
        segments_dir.mkdir(exist_ok=True)
        
        # –°–µ–≥–º–µ–Ω—Ç—ã –ø–æ 30 –º–∏–Ω—É—Ç –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
        segment_duration = 1800  # —Å–µ–∫—É–Ω–¥ (30 –º–∏–Ω—É—Ç)
        segment_files = []
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
        cmd = [
            'ffprobe',
            '-v', 'quiet',
            '-show_entries', 'format=duration',
            '-of', 'csv=p=0',
            str(compressed_audio_path)
        ]
        
        process = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        stdout, stderr = await process.communicate()
        
        if process.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {stderr.decode()}")
            return None
            
        total_duration = float(stdout.decode().strip())
        estimated_segments = int(total_duration / segment_duration) + 1
        logger.info(f"–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {total_duration:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å {estimated_segments} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ {segment_duration/60:.0f} –º–∏–Ω—É—Ç")
        
        # –°–æ–∑–¥–∞—ë–º —Å–µ–≥–º–µ–Ω—Ç—ã
        segment_count = 0
        for start_time_sec in range(0, int(total_duration), segment_duration):
            segment_path = segments_dir / f"segment_{start_time_sec:04d}.mp3"
            
            cmd = [
                'ffmpeg',
                '-i', str(compressed_audio_path),
                '-ss', str(start_time_sec),
                '-t', str(segment_duration),
                '-c', 'copy',
                '-y',
                str(segment_path)
            ]
            
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0 and segment_path.exists() and segment_path.stat().st_size > 1000:
                segment_files.append(segment_path)
                segment_count += 1
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–µ–≥–º–µ–Ω—Ç {segment_count}/{estimated_segments}: {segment_path.name}")
            else:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç: {segment_path.name}")
            
        logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–æ {len(segment_files)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û (–Ω–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ!) –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        logger.info(f"üéôÔ∏è –ù–∞—á–∏–Ω–∞—é –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–£–Æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é {len(segment_files)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤...")
        
        all_transcripts = []
        failed_segments = []
        
        for i, segment_path in enumerate(segment_files):
            logger.info(f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é —Å–µ–≥–º–µ–Ω—Ç {i+1}/{len(segment_files)}: {segment_path.name}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º retry –ª–æ–≥–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
            result = None
            for retry in range(3):  # –î–æ 3 –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç
                try:
                    result = await transcribe_segment_with_deepinfra(segment_path)
                    if result:
                        break
                    else:
                        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {retry+1}/3 –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è {segment_path.name}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ {retry+1}/3 –¥–ª—è {segment_path.name}: {e}")
                    
                if retry < 2:  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                    await asyncio.sleep(2)
            
            if result:
                all_transcripts.append(result)
                logger.info(f"‚úÖ –°–µ–≥–º–µ–Ω—Ç {segment_path.name} —É—Å–ø–µ—à–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω ({len(result)} —Å–∏–º–≤–æ–ª–æ–≤)")
            else:
                failed_segments.append(segment_path.name)
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç {segment_path.name} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if failed_segments:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å {len(failed_segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {failed_segments}")
        
        if not all_transcripts:
            logger.error("‚ùå –ù–∏ –æ–¥–∏–Ω —Å–µ–≥–º–µ–Ω—Ç –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω!")
            return None
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        full_transcript = " ".join(all_transcripts)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            for segment_path in segment_files:
                if segment_path.exists():
                    segment_path.unlink()
            if segments_dir.exists():
                segments_dir.rmdir()
            
            # –£–¥–∞–ª—è–µ–º —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
            if compressed_audio_path != str(audio_path):
                compressed_path = Path(compressed_audio_path)
                if compressed_path.exists():
                    compressed_path.unlink()
        except Exception as cleanup_error:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {cleanup_error}")
        
        end_time = time.time()
        processing_time = end_time - start_time
        logger.info(f"‚úÖ –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(full_transcript)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"üìà –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(all_transcripts)}/{len(segment_files)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
        if failed_segments:
            logger.info(f"‚ö†Ô∏è –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã: {len(failed_segments)}")
        logger.info(f"‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f} —Å–µ–∫—É–Ω–¥ ({processing_time/60:.1f} –º–∏–Ω—É—Ç)")
        logger.info(f"üéØ –°–∫–æ—Ä–æ—Å—Ç—å: {len(full_transcript)/processing_time:.1f} —Å–∏–º–≤–æ–ª–æ–≤/—Å–µ–∫")
        
        return full_transcript
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–≤–∫–µ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return None

async def transcribe_segment_with_deepinfra(segment_path):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Å–µ–≥–º–µ–Ω—Ç –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ DeepInfra API."""
    if not DEEPINFRA_API_KEY:
        return None
        
    try:
        file_name = Path(segment_path).name
        with open(segment_path, 'rb') as audio_file:
            timeout = aiohttp.ClientTimeout(total=900)  # 15-–º–∏–Ω –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç
            transcript_text = await _post_to_deepinfra(audio_file, file_name, timeout)

        if transcript_text:
            logger.info(f"üì• –°–µ–≥–º–µ–Ω—Ç {file_name} –ø–æ–ª—É—á–µ–Ω, {len(transcript_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        return transcript_text
        
    except asyncio.TimeoutError:
        logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ {segment_path}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ {segment_path}: {e}")
        return None 