import os
import logging
import importlib
from pathlib import Path
from typing import Any, Mapping, Optional

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ
    pass

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –º—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
IN_CONTAINER = os.path.exists('/app') and os.access('/app', os.W_OK)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
if IN_CONTAINER:
    DATA_DIR = Path("/app/data")
else:
    DATA_DIR = Path("./data")
DATA_DIR.mkdir(parents=True, exist_ok=True)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
ENVIRONMENT = os.getenv('ENVIRONMENT', 'development').lower()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL.upper()),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(DATA_DIR / 'bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ===== –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê =====
# –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –∫–æ–¥–µ/—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.
# –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env (–∫–æ—Ç–æ—Ä—ã–π –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è git).
BOT_TOKEN = os.getenv('BOT_TOKEN', '')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º BOT_TOKEN —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞ (–Ω–µ –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞)
REQUIRE_BOT_TOKEN = os.getenv('REQUIRE_BOT_TOKEN', 'true').lower() == 'true'
if REQUIRE_BOT_TOKEN and not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    raise ValueError("BOT_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")

# ===== TELEGRAM BOT API SERVER =====
USE_LOCAL_BOT_API = os.getenv('USE_LOCAL_BOT_API', 'true').lower() == 'true'
LOCAL_BOT_API_URL = os.getenv('LOCAL_BOT_API_URL', 'http://localhost:8083')

# API_ID –∏ API_HASH –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è Bot API Server (–≤ docker-compose.yml)
TELEGRAM_API_ID = int(os.getenv('TELEGRAM_API_ID', '0'))
TELEGRAM_API_HASH = os.getenv('TELEGRAM_API_HASH', '')

if USE_LOCAL_BOT_API:
    logger.info(f"üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π Telegram Bot API Server: {LOCAL_BOT_API_URL}")
    if TELEGRAM_API_ID == 0:
        logger.warning("‚ö†Ô∏è TELEGRAM_API_ID –Ω–µ –∑–∞–¥–∞–Ω! –ù—É–∂–µ–Ω –¥–ª—è Bot API Server")
    if not TELEGRAM_API_HASH:
        logger.warning("‚ö†Ô∏è TELEGRAM_API_HASH –Ω–µ –∑–∞–¥–∞–Ω! –ù—É–∂–µ–Ω –¥–ª—è Bot API Server")
else:
    logger.info("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Telegram Bot API")

# ===== API –ö–õ–Æ–ß–ò –î–õ–Ø AI –°–ï–†–í–ò–°–û–í =====
DEEPINFRA_API_KEY = os.getenv('DEEPINFRA_API_KEY', '')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY', '')
OPENROUTER_MODEL = os.getenv('OPENROUTER_MODEL', 'google/gemini-2.5-flash-lite')
EMBEDDING_PROVIDER = os.getenv('EMBEDDING_PROVIDER', 'openrouter')
EMBEDDING_MODEL = os.getenv('EMBEDDING_MODEL', 'openai/text-embedding-3-small')
EMBEDDING_TIMEOUT = float(os.getenv('EMBEDDING_TIMEOUT', '15'))
DISABLE_REMOTE_EMBEDDINGS = os.getenv('DISABLE_REMOTE_EMBEDDINGS', 'false').lower() in ('1', 'true', 'yes')

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –Æ–ö–ê–°–°–´ =====
YUKASSA_SHOP_ID = os.getenv('YUKASSA_SHOP_ID', '')
YUKASSA_SECRET_KEY = os.getenv('YUKASSA_SECRET_KEY', '')
YUKASSA_DEFAULT_EMAIL = os.getenv('YUKASSA_DEFAULT_EMAIL', 'billing@transkribator.local')
YUKASSA_VAT_CODE = int(os.getenv('YUKASSA_VAT_CODE', '1'))  # 1 = –±–µ–∑ –ù–î–°
YUKASSA_TAX_SYSTEM_CODE = os.getenv('YUKASSA_TAX_SYSTEM_CODE')

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• =====
if IN_CONTAINER:
    DATABASE_URL = os.getenv('DATABASE_URL', f'sqlite:///{DATA_DIR}/cyberkitty19_transkribator.db')
else:
    DATABASE_URL = os.getenv('DATABASE_URL', f'sqlite:///{DATA_DIR.absolute()}/cyberkitty19_transkribator.db')

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò –§–ê–ô–õ–û–í =====
MAX_FILE_SIZE_MB = int(os.getenv('MAX_FILE_SIZE_MB', '2000'))
MAX_AUDIO_DURATION_MINUTES = int(os.getenv('MAX_AUDIO_DURATION_MINUTES', '240'))
ENABLE_LLM_FORMATTING = os.getenv('ENABLE_LLM_FORMATTING', 'true').lower() == 'true'
ENABLE_SEGMENTATION = os.getenv('ENABLE_SEGMENTATION', 'true').lower() == 'true'
SEGMENT_DURATION_SECONDS = int(os.getenv('SEGMENT_DURATION_SECONDS', '30'))

# ===== –î–ò–†–ï–ö–¢–û–†–ò–ò =====
if IN_CONTAINER:
    VIDEOS_DIR = Path("/app/videos")
    AUDIO_DIR = Path("/app/audio")
    TRANSCRIPTIONS_DIR = Path("/app/transcriptions")
else:
    VIDEOS_DIR = Path("./videos")
    AUDIO_DIR = Path("./audio")
    TRANSCRIPTIONS_DIR = Path("./transcriptions")

for directory in [VIDEOS_DIR, AUDIO_DIR, TRANSCRIPTIONS_DIR]:
    directory.mkdir(parents=True, exist_ok=True)

# ===== –§–ò–ß–ï–§–õ–ê–ì–ò –ò –ù–û–í–´–ï –°–ï–†–í–ò–°–´ =====
FEATURE_BETA_MODE = os.getenv('FEATURE_BETA_MODE', 'false').lower() == 'true'
ROUTER_MODEL = os.getenv('ROUTER_MODEL', 'google/gemini-2.5-flash-lite')
ROUTER_CONF_HIGH = float(os.getenv('ROUTER_CONF_HIGH', '0.80'))
ROUTER_CONF_MID = float(os.getenv('ROUTER_CONF_MID', '0.55'))
SEARCH_BACKEND = os.getenv('SEARCH_BACKEND', 'pgvector')
ENABLE_STRUCT_LOGS = os.getenv('ENABLE_STRUCT_LOGS', '0').lower() in ('1', 'true')
FEATURE_GOOGLE_CALENDAR = os.getenv('FEATURE_GOOGLE_CALENDAR', 'true').lower() == 'true'
GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID', '')
GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET', '')
GOOGLE_REDIRECT_URI = os.getenv('GOOGLE_REDIRECT_URI', '')
GOOGLE_ENCRYPTION_KEY = os.getenv('GOOGLE_ENCRYPTION_KEY', '')
GOOGLE_SCOPES = [
    'https://www.googleapis.com/auth/drive.file',
    'https://www.googleapis.com/auth/documents',
    'https://www.googleapis.com/auth/spreadsheets',
]
GOOGLE_OAUTH_CONFIGURED = bool(
    GOOGLE_CLIENT_ID
    and GOOGLE_CLIENT_SECRET
    and GOOGLE_REDIRECT_URI
    and GOOGLE_ENCRYPTION_KEY
)
SHOW_GOOGLE_OAUTH_IN_MENU = os.getenv(
    'SHOW_GOOGLE_OAUTH_IN_MENU',
    'false' if ENVIRONMENT in ('production', 'prod') else 'true',
).lower() in ('1', 'true', 'yes')

AGENT_FIRST = os.getenv('AGENT_FIRST', 'false').lower() in ('1', 'true', 'yes')
if FEATURE_GOOGLE_CALENDAR:
    GOOGLE_SCOPES.append('https://www.googleapis.com/auth/calendar.readonly')
    GOOGLE_SCOPES.append('https://www.googleapis.com/auth/calendar.events')

MINIAPP_PUBLIC_URL = os.getenv('MINIAPP_PUBLIC_URL', 'https://cyberkitty.ru/miniapp').rstrip("/")
MINIAPP_PROXY_URL = os.getenv('MINIAPP_PROXY_URL', 'https://t.me/CyberKitty19_bot/journal').rstrip('/')
MINIAPP_PROXY_QUERY_PARAM = os.getenv('MINIAPP_PROXY_QUERY_PARAM', 'startapp').strip() or 'startapp'
MINIAPP_NOTE_LINK_TEMPLATE = os.getenv('MINIAPP_NOTE_LINK_TEMPLATE', '').strip()
TELEGRAM_REFERRAL_URL = os.getenv('TELEGRAM_REFERRAL_URL', 'https://t.me/CyberKitty19_bot/journal').rstrip('/')

logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
logger.info(f"üè† –†–µ–∂–∏–º: {'–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä' if IN_CONTAINER else '–ª–æ–∫–∞–ª—å–Ω—ã–π'}")
logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {DATA_DIR}")
logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤–∏–¥–µ–æ: {VIDEOS_DIR}")
logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∞—É–¥–∏–æ: {AUDIO_DIR}")
logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {TRANSCRIPTIONS_DIR}")
logger.info(f"üîß –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {MAX_FILE_SIZE_MB} –ú–ë")
logger.info(f"‚è±Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {MAX_AUDIO_DURATION_MINUTES} –º–∏–Ω—É—Ç")
logger.info(f"üß™ –ë–µ—Ç–∞-—Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {FEATURE_BETA_MODE}")
logger.info(f"üß≠ Router –º–æ–¥–µ–ª—å: {ROUTER_MODEL}")
logger.info(f"üìÇ Google Drive –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞: {GOOGLE_OAUTH_CONFIGURED}")


def load_media_service_overrides() -> Optional[Mapping[str, Any]]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.

    –û–∂–∏–¥–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ ``module.path:factory``. –§–∞–±—Ä–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç mapping
    —Å –∫–ª—é—á–∞–º–∏ prepare/download/transcribe/finalize/deliver/cleanup.
    """

    target = os.getenv("MEDIA_SERVICE_OVERRIDES")
    if not target:
        return None

    module_name, _, attr = target.partition(":")
    if not module_name or not attr:
        logger.warning(
            "MEDIA_SERVICE_OVERRIDES: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–µ—Ç—Å—è 'module:attr'",
            extra={"value": target},
        )
        return None

    try:
        module = importlib.import_module(module_name)
    except Exception as exc:  # noqa: BLE001
        logger.warning(
            "MEDIA_SERVICE_OVERRIDES: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å",
            extra={"module": module_name, "error": str(exc)},
        )
        return None

    value = getattr(module, attr, None)
    if value is None:
        logger.warning(
            "MEDIA_SERVICE_OVERRIDES: –∞—Ç—Ä–∏–±—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            extra={"module": module_name, "attr": attr},
        )
        return None

    if callable(value):
        try:
            value = value()
        except Exception as exc:  # noqa: BLE001
            logger.warning(
                "MEDIA_SERVICE_OVERRIDES: —Ñ–∞–±—Ä–∏–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π",
                extra={"module": module_name, "attr": attr, "error": str(exc)},
            )
            return None

    if not isinstance(value, Mapping):
        logger.warning(
            "MEDIA_SERVICE_OVERRIDES: –æ–∂–∏–¥–∞–µ—Ç—Å—è mapping",
            extra={"returned_type": type(value).__name__},
        )
        return None

    return value


__all__ = [
    "BOT_TOKEN",
    "DATABASE_URL",
    "IN_CONTAINER",
    "logger",
    "load_media_service_overrides",
]
