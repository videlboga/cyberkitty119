"""–ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –±–µ—Ç–∞-—Ä–µ–∂–∏–º–∞ (–∑–∞–≥–ª—É—à–∫–∞)."""

from typing import Optional

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from transkribator_modules.config import logger
from ..router import RouterResult

TYPE_LABELS = {
    "meeting": "–≤—Å—Ç—Ä–µ—á–∞",
    "idea": "–∏–¥–µ—è",
    "task": "–∑–∞–¥–∞—á–∞",
    "media": "–º–µ–¥–∏–∞",
    "recipe": "—Ä–µ—Ü–µ–ø—Ç",
    "journal": "–¥–Ω–µ–≤–Ω–∏–∫",
    "other": "–ø—Ä–æ—á–µ–µ",
}


def _build_main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚ö° –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="beta:act:now")],
            [InlineKeyboardButton("üïì –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∑–∂–µ", callback_data="beta:act:later")],
            [InlineKeyboardButton("üìù –¢–æ–ª—å–∫–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç", callback_data="beta:act:raw")],
            [InlineKeyboardButton("üóÇ –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø", callback_data="beta:act:type_menu")],
        ]
    )

def compose_header(type_hint: str, type_conf: float, manual_type: Optional[str]) -> str:
    chosen = manual_type or type_hint or "other"
    type_label = TYPE_LABELS.get(chosen, TYPE_LABELS["other"])

    if manual_type:
        return f"–ì–æ—Ç–æ–≤–æ. –í—ã–±—Ä–∞–ª–∏: _{type_label}_. –ß—Ç–æ –¥–µ–ª–∞–µ–º?"

    confidence = max(0.0, min(type_conf * 100, 100.0))
    if type_conf >= 0.55:
        return f"–ì–æ—Ç–æ–≤–æ. –ü–æ—Ö–æ–∂–µ: _{type_label}_ ({confidence:.0f}%). –ß—Ç–æ –¥–µ–ª–∞–µ–º?"

    return "–ì–æ—Ç–æ–≤–æ. –ß—Ç–æ –¥–µ–ª–∞–µ–º —Å –∑–∞–ø–∏—Å—å—é?"


async def show_processing_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    router_result: RouterResult,
) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –±–µ—Ç–∞-—Ä–µ–∂–∏–º–µ."""

    user_id = update.effective_user.id if update.effective_user else None
    logger.info(
        "–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        extra={
            "user_id": user_id,
            "mode": router_result.mode,
            "confidence": router_result.confidence,
            "type_hint": router_result.content.type_hint,
            "error": router_result.error,
        },
    )

    beta_state = context.user_data.setdefault("beta", {})
    beta_state["router_payload"] = router_result.payload.model_dump()

    manual_type = beta_state.get("manual_type")
    type_hint = router_result.content.type_hint or "other"
    type_conf = router_result.content.type_confidence or 0.0
    header = compose_header(type_hint, type_conf, manual_type)

    await update.message.reply_text(
        header,
        reply_markup=_build_main_keyboard(),
        parse_mode="Markdown",
    )
