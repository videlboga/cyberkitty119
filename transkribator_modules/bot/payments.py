import json
from datetime import datetime, timedelta
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters

from transkribator_modules.config import logger, YUKASSA_SHOP_ID, YUKASSA_SECRET_KEY
from transkribator_modules.db.database import SessionLocal, UserService, TransactionService
from transkribator_modules.db.models import PlanType

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ÆKassa —Å–µ—Ä–≤–∏—Å
try:
    from transkribator_modules.payments.yukassa import YukassaPaymentService
    YUKASSA_AVAILABLE = bool(YUKASSA_SHOP_ID and YUKASSA_SECRET_KEY)
except ImportError:
    YUKASSA_AVAILABLE = False
    logger.warning("–ÆKassa SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –¶–µ–Ω—ã –≤ Telegram Stars (1 Star ‚âà 1.3 —Ä—É–±–ª—è)
PLAN_PRICES_STARS = {
    PlanType.BASIC: 460,      # 599 —Ä—É–± ‚âà 460 Stars
    PlanType.PRO: 2300,       # 2990 —Ä—É–± ‚âà 2300 Stars  
    PlanType.UNLIMITED: 7690  # 9990 —Ä—É–± ‚âà 7690 Stars
}

PLAN_DESCRIPTIONS = {
    PlanType.BASIC: {
        "title": "–ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω",
        "description": "180 –º–∏–Ω—É—Ç –≤ –º–µ—Å—è—Ü, —Ñ–∞–π–ª—ã –¥–æ 200 –ú–ë",
        "features": [
            "180 –º–∏–Ω—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤ –º–µ—Å—è—Ü",
            "–§–∞–π–ª—ã –¥–æ 200 –ú–ë", 
            "–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è",
            "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ò–ò"
        ]
    },
    PlanType.PRO: {
        "title": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω", 
        "description": "600 –º–∏–Ω—É—Ç –≤ –º–µ—Å—è—Ü, API –¥–æ—Å—Ç—É–ø, —Ñ–∞–π–ª—ã –¥–æ 500 –ú–ë",
        "features": [
            "600 –º–∏–Ω—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤ –º–µ—Å—è—Ü",
            "–§–∞–π–ª—ã –¥–æ 500 –ú–ë",
            "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", 
            "API –¥–æ—Å—Ç—É–ø —Å –∫–ª—é—á–∞–º–∏",
            "–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"
        ]
    },
    PlanType.UNLIMITED: {
        "title": "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø–ª–∞–Ω",
        "description": "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –º–∏–Ω—É—Ç—ã, —Ñ–∞–π–ª—ã –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π API",
        "features": [
            "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –º–∏–Ω—É—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏",
            "–§–∞–π–ª—ã –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞",
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
            "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π API –¥–æ—Å—Ç—É–ø", 
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7"
        ]
    }
}

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
ASK_CONTACT, ASK_EMAIL = range(2)

async def show_payment_plans(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω—ã —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    user = update.effective_user
    
    db = SessionLocal()
    try:
        user_service = UserService(db)
        db_user = user_service.get_or_create_user(telegram_id=user.id)
        current_plan = user_service.get_user_plan(db_user)
        
        plans_text = f"""üí≥ **–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤**

üë§ **–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω:** {current_plan.display_name}

üí´ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏:**

"""
        
        keyboard = []
        
        for plan_type, price_stars in PLAN_PRICES_STARS.items():
            if plan_type.value == current_plan.name:
                continue  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω
                
            plan_info = PLAN_DESCRIPTIONS[plan_type]
            price_rub = price_stars * 1.3  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
            
            plans_text += f"**{plan_info['title']}** - {price_rub:.0f} ‚ÇΩ\n"
            plans_text += f"_{plan_info['description']}_\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
            keyboard.append([InlineKeyboardButton(
                f"üí≥ –ö—É–ø–∏—Ç—å {plan_info['title']}",
                callback_data=f"choose_payment_{plan_type.value}"
            )])
        
        if not keyboard:
            plans_text += "‚úÖ –£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω!"
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_help")])
        else:
            plans_text += "üí° **–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**\n"
            plans_text += "‚Ä¢ üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (–ÆKassa)\n"
            plans_text += "‚Ä¢ ‚≠ê Telegram Stars\n\n"
            plans_text += "üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞—â–∏—â–µ–Ω—ã"
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_help")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                plans_text, reply_markup=reply_markup, parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                plans_text, reply_markup=reply_markup, parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–ª–∞–Ω–æ–≤ –æ–ø–ª–∞—Ç—ã: {e}")
        error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–æ–≤. *—Å–º—É—â–µ–Ω–Ω–æ –ø—Ä—è—á–µ—Ç –º–æ—Ä–¥–æ—á–∫—É*"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(error_text)
        else:
            await update.message.reply_text(error_text)
    finally:
        db.close()

async def choose_payment_method(update: Update, context: ContextTypes.DEFAULT_TYPE, plan_type: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–ª–∞–Ω–∞"""
    user = update.effective_user
    query = update.callback_query
    
    if plan_type not in PLAN_PRICES_STARS:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω")
        return
    
    plan_enum = PlanType(plan_type)
    plan_info = PLAN_DESCRIPTIONS[plan_enum]
    price_rub = PLAN_PRICES_STARS[plan_enum] * 1.3
    
    payment_text = f"""üí≥ **–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã**

üìã **–ü–ª–∞–Ω:** {plan_info['title']}
üí∞ **–¶–µ–Ω–∞:** {price_rub:.0f} ‚ÇΩ
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {plan_info['description']}

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"""

    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ÆKassa (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if YUKASSA_AVAILABLE:
        keyboard.append([InlineKeyboardButton(
            f"üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ ({price_rub:.0f} ‚ÇΩ)",
            callback_data=f"pay_yukassa_{plan_type}"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è Telegram Stars
    price_stars = PLAN_PRICES_STARS[plan_enum]
    keyboard.append([InlineKeyboardButton(
        f"‚≠ê Telegram Stars ({price_stars} Stars)",
        callback_data=f"pay_stars_{plan_type}"
    )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º", callback_data="show_payment_plans")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(payment_text, reply_markup=reply_markup, parse_mode='Markdown')

async def create_yukassa_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, plan_type: str) -> None:
    """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa"""
    user = update.effective_user
    query = update.callback_query
    
    if not YUKASSA_AVAILABLE:
        await query.edit_message_text("‚ùå –ÆKassa –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ Telegram Stars.")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –ÆKassa
        yukassa_service = YukassaPaymentService()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø–ª–∞–Ω–∞
        amount = yukassa_service.get_plan_price(plan_type)
        description = yukassa_service.get_plan_description(plan_type)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment_data = yukassa_service.create_payment(
            user_id=user.id,
            plan_type=plan_type,
            amount=amount,
            description=description
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        payment_text = f"""üí≥ **–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!**

üìã **–ü–ª–∞–Ω:** {description}
üí∞ **–°—É–º–º–∞:** {amount:.0f} ‚ÇΩ
üîó **–°—Å—ã–ª–∫–∞:** [–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆKassa]({payment_data['confirmation_url']})

üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã
üîÑ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å" """

        keyboard = [
            [InlineKeyboardButton("üîó –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_data['confirmation_url'])],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_yukassa_{payment_data['payment_id']}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_payment_plans")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(payment_text, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram Stars.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_payment_plans")
            ]])
        )

async def check_yukassa_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, payment_id: str) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa"""
    user = update.effective_user
    query = update.callback_query
    
    if not YUKASSA_AVAILABLE:
        await query.edit_message_text("‚ùå –ÆKassa –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –ÆKassa
        yukassa_service = YukassaPaymentService()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂
        payment_info = yukassa_service.verify_payment(payment_id)
        
        if not payment_info:
            await query.edit_message_text(
                "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_payment_plans")
                ]])
            )
            return
        
        if payment_info['status'] == 'succeeded':
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–ª–∞–Ω
            await activate_plan_after_payment(user.id, payment_info)
            
            success_text = f"""‚úÖ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!**

üí∞ **–°—É–º–º–∞:** {payment_info['amount']:.0f} ‚ÇΩ
üìã **–ü–ª–∞–Ω:** {payment_info['metadata'].get('plan_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚è∞ **–í—Ä–µ–º—è:** {payment_info['paid_at']}

üéâ –í–∞—à –ø–ª–∞–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"""

            keyboard = [[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_help")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        elif payment_info['status'] == 'pending':
            # –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await query.edit_message_text(
                "‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_yukassa_{payment_id}")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_payment_plans")]
                ])
            )
        else:
            # –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª
            await query.edit_message_text(
                f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª. –°—Ç–∞—Ç—É—Å: {payment_info['status']}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_payment_plans")
                ]])
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_payment_plans")
            ]])
        )

async def activate_plan_after_payment(user_id: int, payment_info: dict) -> None:
    """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    db = SessionLocal()
    try:
        user_service = UserService(db)
        transaction_service = TransactionService(db)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = user_service.get_or_create_user(telegram_id=user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–ª–∞–Ω–∞ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        plan_type = payment_info['metadata'].get('plan_type')
        if not plan_type:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–∏–ø –ø–ª–∞–Ω–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞ {payment_info['payment_id']}")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = user_service.upgrade_user_plan(user, plan_type)
        
        if success:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transaction_service.create_transaction(
                user=user,
                plan_purchased=plan_type,
                amount_rub=payment_info['amount'],
                currency="RUB",
                payment_provider="yukassa",
                provider_payment_charge_id=payment_info['payment_id'],
                metadata=json.dumps(payment_info)
            )
            
            logger.info(f"–ü–ª–∞–Ω {plan_type} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω {plan_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}")
    finally:
        db.close()

async def create_payment_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE, plan_type: str) -> None:
    """–°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–ª–∞–Ω–∞ —á–µ—Ä–µ–∑ Telegram Stars"""
    user = update.effective_user
    query = update.callback_query
    
    if plan_type not in PLAN_PRICES_STARS:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω")
        return
    
    plan_enum = PlanType(plan_type)
    price_stars = PLAN_PRICES_STARS[plan_enum]
    plan_info = PLAN_DESCRIPTIONS[plan_enum]
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è Telegram Stars
        prices = [LabeledPrice(label=plan_info["title"], amount=price_stars)]
        
        # Payload –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
        payload = json.dumps({
            "user_id": user.id,
            "plan": plan_type,
            "timestamp": datetime.now().isoformat()
        })
        
        await context.bot.send_invoice(
            chat_id=user.id,
            title=f"‚≠ê {plan_info['title']}",
            description=plan_info['description'],
            payload=payload,
            provider_token="",  # –ü—É—Å—Ç–æ–π –¥–ª—è Telegram Stars
            currency="XTR",     # –í–∞–ª—é—Ç–∞ Telegram Stars
            prices=prices,
            start_parameter=f"buy_plan_{plan_type}",
            photo_url="https://i.imgur.com/placeholder.jpg",  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            photo_size=512,
            photo_width=512,
            photo_height=512,
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            send_phone_number_to_provider=False,
            send_email_to_provider=False,
            is_flexible=False
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        success_text = f"""‚úÖ **–ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω!**

üí´ **–ü–ª–∞–Ω:** {plan_info['title']}
‚≠ê **–¶–µ–Ω–∞:** {price_stars} Telegram Stars
üìã **–í–∫–ª—é—á–∞–µ—Ç:**"""

        for feature in plan_info['features']:
            success_text += f"\n‚Ä¢ {feature}"
        
        success_text += f"\n\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω–≤–æ–π—Å –≤—ã—à–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º", callback_data="show_payment_plans")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {str(e)}\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_payment_plans")
            ]])
        )

async def handle_pre_checkout_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–∞"""
    query = update.pre_checkout_query
    
    try:
        # –ü–∞—Ä—Å–∏–º payload
        payload_data = json.loads(query.invoice_payload)
        user_id = payload_data.get("user_id")
        plan_type = payload_data.get("plan")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        if user_id != query.from_user.id:
            await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return
            
        if plan_type not in PLAN_PRICES_STARS:
            await query.answer(ok=False, error_message="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É
        expected_price = PLAN_PRICES_STARS[PlanType(plan_type)]
        if query.total_amount != expected_price:
            await query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞")
            return
        
        # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        await query.answer(ok=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pre_checkout: {e}")
        await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")

async def handle_successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = update.message.successful_payment
    user = update.effective_user
    
    db = SessionLocal()
    try:
        # –ü–∞—Ä—Å–∏–º payload
        payload_data = json.loads(payment.invoice_payload)
        plan_type = payload_data.get("plan")
        
        user_service = UserService(db)
        transaction_service = TransactionService(db)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = user_service.get_or_create_user(telegram_id=user.id)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = transaction_service.create_transaction(
            user=db_user,
            amount_stars=payment.total_amount,
            amount_rub=payment.total_amount * 1.3,  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
            currency="XTR",
            payment_provider="telegram_stars",
            provider_payment_charge_id=payment.provider_payment_charge_id,
            telegram_payment_charge_id=payment.telegram_payment_charge_id,
            plan_purchased=plan_type,
            metadata=json.dumps({
                "invoice_payload": payment.invoice_payload,
                "order_info": payment.order_info.__dict__ if payment.order_info else None
            })
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_service.upgrade_user_plan(db_user, plan_type)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ø–ª–∞–Ω–µ
        plan_info = PLAN_DESCRIPTIONS[PlanType(plan_type)]
        
        success_message = f"""üéâ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**

‚úÖ **–í–∞—à –Ω–æ–≤—ã–π –ø–ª–∞–Ω:** {plan_info['title']}
‚≠ê **–û–ø–ª–∞—á–µ–Ω–æ:** {payment.total_amount} Telegram Stars
üÜî **ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:** {transaction.id}

üìã **–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:**"""

        for feature in plan_info['features']:
            success_message += f"\n‚Ä¢ {feature}"
        
        success_message += f"\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        
        keyboard = [
            [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("üîë API –∫–ª—é—á–∏", callback_data="show_api_keys")] if plan_type in ["pro", "unlimited"] else [],
            [InlineKeyboardButton("üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")]
        ]
        # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
        keyboard = [row for row in keyboard if row]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            success_message, 
            reply_markup=reply_markup, 
            parse_mode='Markdown'
        )
        
        logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–ª–∞–Ω–∞ {plan_type} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id} –∑–∞ {payment.total_amount} Stars")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞. "
            "–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, –Ω–æ –ø–ª–∞–Ω –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. "
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @kiryanovpro"
        )
    finally:
        db.close()

async def handle_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "show_payment_plans":
        await show_payment_plans(update, context)
    elif data.startswith("choose_payment_"):
        plan_type = data.replace("choose_payment_", "")
        await choose_payment_method(update, context, plan_type)
    elif data.startswith("pay_yukassa_"):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ ConversationHandler
        await query.edit_message_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
    elif data.startswith("pay_stars_"):
        plan_type = data.replace("pay_stars_", "")
        await create_payment_invoice(update, context, plan_type)
    elif data.startswith("check_yukassa_"):
        payment_id = data.replace("check_yukassa_", "")
        await check_yukassa_payment(update, context, payment_id)
    elif data.startswith("buy_plan_"):
        plan_type = data.replace("buy_plan_", "")
        await create_payment_invoice(update, context, plan_type)
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–ª–∞—Ç–µ–∂–µ–π") 

# --- –ù–æ–≤—ã–π —à–∞–≥: –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ e-mail ---
async def ask_contact_or_email_wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è plan_type –∏–∑ callback_data"""
    query = update.callback_query
    data = query.data
    if data.startswith("pay_yukassa_"):
        plan_type = data.replace("pay_yukassa_", "")
        return await ask_contact_or_email(update, context, plan_type)
    else:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω")
        return ConversationHandler.END

async def ask_contact_or_email(update: Update, context: ContextTypes.DEFAULT_TYPE, plan_type: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —á–µ–∫–∞ –ÆKassa"""
    query = update.callback_query
    context.user_data['pending_plan_type'] = plan_type
    text = (
        "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ 54-–§–ó —Ç—Ä–µ–±—É–µ—Ç—Å—è —á–µ–∫.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–µ–∫–∞ –ÆKassa:\n\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ e-mail (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —á–µ–∫–∞)\n"
        "‚Ä¢ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ Telegram"
    )
    keyboard = [
        [KeyboardButton("üìß –í–≤–µ—Å—Ç–∏ e-mail")],
        [KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await query.message.reply_text(text, reply_markup=reply_markup)
    return ASK_CONTACT

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ---
async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    if contact and contact.phone_number:
        context.user_data['yukassa_contact'] = {'phone': contact.phone_number}
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂...", reply_markup=ReplyKeyboardRemove())
        return await proceed_yukassa_payment(update, context)
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ e-mail.")
        return ASK_CONTACT

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ e-mail ---
async def handle_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    email = update.message.text.strip()
    if "@" in email and "." in email:
        context.user_data['yukassa_contact'] = {'email': email}
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂...", reply_markup=ReplyKeyboardRemove())
        return await proceed_yukassa_payment(update, context)
    else:
        await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ e-mail. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail.")
        return ASK_CONTACT

# --- –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å receipt ---
async def proceed_yukassa_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    plan_type = context.user_data.get('pending_plan_type')
    contact = context.user_data.get('yukassa_contact', {})
    if not plan_type:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω.")
        return ConversationHandler.END
    try:
        yukassa_service = YukassaPaymentService()
        amount = yukassa_service.get_plan_price(plan_type)
        description = yukassa_service.get_plan_description(plan_type)
        # –§–æ—Ä–º–∏—Ä—É–µ–º receipt
        receipt = {
            'customer': {},
            'items': [{
                'description': description,
                'quantity': '1.00',
                'amount': {'value': str(amount), 'currency': 'RUB'},
                'vat_code': 1,
                'payment_mode': 'full_prepayment',
                'payment_subject': 'service'
            }]
        }
        if 'email' in contact:
            receipt['customer']['email'] = contact['email']
        elif 'phone' in contact:
            receipt['customer']['phone'] = contact['phone']
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return ConversationHandler.END
        payment_data = yukassa_service.create_payment(
            user_id=user.id,
            plan_type=plan_type,
            amount=amount,
            description=description,
            receipt=receipt
        )
        payment_text = f"""üí≥ **–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!**\n\nüìã **–ü–ª–∞–Ω:** {description}\nüí∞ **–°—É–º–º–∞:** {amount:.0f} ‚ÇΩ\nüîó **–°—Å—ã–ª–∫–∞:** [–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆKassa]({payment_data['confirmation_url']})\n\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã\nüîÑ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å' """
        keyboard = [
            [InlineKeyboardButton("üîó –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_data['confirmation_url'])],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_yukassa_{payment_data['payment_id']}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_payment_plans")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(payment_text, reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram Stars.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_payment_plans")]])
        )
    return ConversationHandler.END 