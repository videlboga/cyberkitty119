"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –≤ CyberKitty Transkribator
"""

import json
from datetime import datetime, timedelta
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from transkribator_modules.config import logger
from transkribator_modules.db.database import SessionLocal, UserService, TransactionService
from transkribator_modules.db.models import PlanType, Plan
from transkribator_modules.payments.yukassa import YukassaPaymentService

# –¶–µ–Ω—ã –≤ Telegram Stars (1 Star ‚âà 1.3 —Ä—É–±–ª—è)
PLAN_PRICES_STARS = {
    PlanType.PRO: 230,        # 299 —Ä—É–± ‚âà 230 Stars
    PlanType.UNLIMITED: 538,   # 699 —Ä—É–± ‚âà 538 Stars
    PlanType.BETA: 1307       # 1700 —Ä—É–± ‚âà 1307 Stars
}

# –¶–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö –¥–ª—è –Æ–ö–∞—Å—Å—ã
PLAN_PRICES_RUB = {
    PlanType.BASIC: 0.0,       # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω
    PlanType.PRO: 299.0,       # PRO –ø–ª–∞–Ω
    PlanType.UNLIMITED: 699.0,  # UNLIMITED –ø–ª–∞–Ω
    PlanType.BETA: 1700.0       # Super Cat
}

PLAN_DESCRIPTIONS = {
    PlanType.BASIC: {
        "title": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω",
        "description": "3 –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –º–µ—Å—è—Ü, —Ñ–∞–π–ª—ã –¥–æ 50 –ú–ë",
        "features": [
            "3 –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –º–µ—Å—è—Ü",
            "–§–∞–π–ª—ã –¥–æ 50 –ú–ë",
            "–ë–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
            "–ë–µ–∑ –æ–ø–ª–∞—Ç—ã"
        ]
    },
    PlanType.PRO: {
        "title": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω",
        "description": "600 –º–∏–Ω—É—Ç –≤ –º–µ—Å—è—Ü, API –¥–æ—Å—Ç—É–ø, —Ñ–∞–π–ª—ã –¥–æ 500 –ú–ë",
        "features": [
            "600 –º–∏–Ω—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤ –º–µ—Å—è—Ü",
            "–§–∞–π–ª—ã –¥–æ 500 –ú–ë",
            "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
            "API –¥–æ—Å—Ç—É–ø —Å –∫–ª—é—á–∞–º–∏",
            "–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"
        ]
    },
    PlanType.UNLIMITED: {
        "title": "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø–ª–∞–Ω",
        "description": "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –º–∏–Ω—É—Ç—ã, —Ñ–∞–π–ª—ã –¥–æ 2 –ì–ë, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π API",
        "features": [
            "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –º–∏–Ω—É—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏",
            "–§–∞–π–ª—ã –¥–æ 2 –ì–ë",
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
            "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π API –¥–æ—Å—Ç—É–ø",
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7"
        ]
    },
    PlanType.BETA: {
        "title": "–°—É–ø–µ—Ä –ö–æ—Ç",
        "description": "–ë–µ—Ç–∞-—Ä–µ–∂–∏–º, —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "features": [
            "–ë–µ—Ç–∞-–¥–æ—Å—Ç—É–ø –∏ —Ä–∞–Ω–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
            "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
            "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            "–ê–≥–µ–Ω—Ç CyberKitty"
        ]
    }
}


def _get_target_message(update: Update):
    if update.message:
        return update.message
    if update.callback_query:
        return update.callback_query.message
    return None


async def _reply(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, **kwargs):
    message = _get_target_message(update)
    if message:
        return await message.reply_text(text, **kwargs)
    if update.callback_query:
        return await context.bot.send_message(chat_id=update.effective_user.id, text=text, **kwargs)
    return None

async def show_payment_plans(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã."""
    try:
        logger.info("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è show_payment_plans")

        session = SessionLocal()
        try:
            plans = (
                session.query(Plan)
                .filter(Plan.is_active == True)
                .all()
            )
        finally:
            session.close()

        order = {
            PlanType.FREE.value: 0,
            PlanType.BASIC.value: 1,
            PlanType.PRO.value: 2,
            PlanType.BETA.value: 3,
            PlanType.UNLIMITED.value: 4,
        }

        plans.sort(key=lambda p: order.get(p.name, 100))

        plans_text_lines = ["üíé **–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã CyberKitty Transkribator**", ""]

        for plan in plans:
            price = "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
            if plan.price_rub and plan.price_rub > 0:
                price = f"{int(plan.price_rub)}‚ÇΩ/–º–µ—Å—è—Ü"
            stars_price = None
            try:
                enum_value = PlanType(plan.name)
                stars_price = PLAN_PRICES_STARS.get(enum_value)
            except ValueError:
                enum_value = None

            minutes_text = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –º–∏–Ω—É—Ç—ã"
            if plan.minutes_per_month:
                minutes = int(plan.minutes_per_month)
                hours = minutes / 60
                if hours.is_integer():
                    minutes_text = f"{int(hours)} —á–∞—Å–æ–≤ ({minutes} –º–∏–Ω—É—Ç) –≤ –º–µ—Å—è—Ü"
                else:
                    minutes_text = f"{minutes} –º–∏–Ω—É—Ç –≤ –º–µ—Å—è—Ü"

            features = []
            if plan.features:
                try:
                    parsed = json.loads(plan.features)
                    if isinstance(parsed, list):
                        features = [str(item) for item in parsed]
                    else:
                        features = [str(parsed)]
                except Exception:
                    features = [plan.features]

            plans_text_lines.append(f"{plan.display_name} ({price})")
            plans_text_lines.append(f"‚Ä¢ {minutes_text}")
            plans_text_lines.append(f"‚Ä¢ –§–∞–π–ª—ã –¥–æ {int(plan.max_file_size_mb):,} –ú–ë".replace(",", " "))

            if stars_price:
                plans_text_lines.append(f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ Stars: {stars_price} ‚≠ê")

            if features:
                for feature in features:
                    plans_text_lines.append(f"‚Ä¢ {feature}")

            if plan.description:
                plans_text_lines.append(f"‚Ä¢ {plan.description}")

            plans_text_lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ø–ª–∞–Ω–∞–º–∏

        plans_text_lines.append("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!")
        plans_text = "\n".join(plans_text_lines)

        keyboard = [[InlineKeyboardButton("üÜì –û—Å—Ç–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º", callback_data="stay_basic")]]

        for plan in plans:
            name = plan.name
            display_name = plan.display_name
            if name == PlanType.FREE.value or name == PlanType.BASIC.value:
                continue

            enum_value = None
            try:
                enum_value = PlanType(name)
            except ValueError:
                pass

            if enum_value and enum_value in PLAN_PRICES_STARS:
                keyboard.append([
                    InlineKeyboardButton(
                        f"{display_name} (Stars)",
                        callback_data=f"buy_plan_{name}_stars"
                    )
                ])
            if enum_value and enum_value in PLAN_PRICES_RUB and PLAN_PRICES_RUB[enum_value] > 0:
                keyboard.append([
                    InlineKeyboardButton(
                        f"{display_name} (–Æ–ö–∞—Å—Å–∞)",
                        callback_data=f"buy_plan_{name}_yukassa"
                    )
                ])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="personal_cabinet")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.edit_message_text(
                plans_text, reply_markup=reply_markup, parse_mode='Markdown'
            )
        else:
            await _reply(update, context, plans_text, reply_markup=reply_markup, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–ª–∞–Ω–æ–≤: {e}")
        await _reply(update, context, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤")

async def initiate_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, plan_id: str) -> None:
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞."""
    try:
        logger.info(f"–ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ–ø–ª–∞—Ç—É –¥–ª—è –ø–ª–∞–Ω–∞: {plan_id}")

        try:
            plan_type = getattr(PlanType, plan_id.upper())
        except AttributeError:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω: {plan_id}")
            await update.callback_query.edit_message_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: {plan_id}")
            return

        stars_price = PLAN_PRICES_STARS.get(plan_type)
        if not stars_price:
            logger.warning(f"–ü–ª–∞–Ω {plan_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–ø–ª–∞—Ç—ã Stars")
            await update.callback_query.edit_message_text("‚ùå –≠—Ç–æ—Ç –ø–ª–∞–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars")
            return

        session = SessionLocal()
        try:
            plan_obj = session.query(Plan).filter(Plan.name == plan_type.value).first()
        finally:
            session.close()

        meta = PLAN_DESCRIPTIONS.get(plan_type, {})
        display_name = plan_obj.display_name if plan_obj else meta.get("title", plan_type.value.upper())
        description = meta.get("description", "")
        if plan_obj and plan_obj.description:
            description = plan_obj.description

        # –°–æ–∑–¥–∞–µ–º invoice –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars
        prices = [LabeledPrice(label=f"–ü–ª–∞–Ω {display_name}", amount=stars_price)]

        await context.bot.send_invoice(
            chat_id=update.effective_chat.id,
            title=f"–ü–æ–¥–ø–∏—Å–∫–∞ {display_name} - CyberKitty Transkribator",
            description=description or f"–¢–∞—Ä–∏—Ñ {display_name} –≤ CyberKitty Transkribator",
            payload=f"plan_{plan_id}",
            provider_token="",  # –î–ª—è Telegram Stars –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
            currency="XTR",  # XTR - —ç—Ç–æ –∫–æ–¥ –¥–ª—è Telegram Stars
            prices=prices,
            start_parameter="subscription"
        )

        logger.info(f"Invoice –¥–ª—è –ø–ª–∞–Ω–∞ {plan_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")

async def initiate_yukassa_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, plan_id: str) -> None:
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞."""
    try:
        logger.info(f"–ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É –¥–ª—è –ø–ª–∞–Ω–∞: {plan_id}")

        try:
            plan_type = getattr(PlanType, plan_id.upper())
        except AttributeError:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –Æ–ö–∞—Å—Å—ã: {plan_id}")
            await update.callback_query.edit_message_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: {plan_id}")
            return

        rub_price = PLAN_PRICES_RUB.get(plan_type, 0.0)
        if rub_price <= 0:
            logger.warning(f"–ü–ª–∞–Ω {plan_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Æ–ö–∞—Å—Å—ã")
            await update.callback_query.edit_message_text("‚ùå –≠—Ç–æ—Ç –ø–ª–∞–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É")
            return

        session = SessionLocal()
        try:
            plan_obj = session.query(Plan).filter(Plan.name == plan_type.value).first()
        finally:
            session.close()

        meta = PLAN_DESCRIPTIONS.get(plan_type, {})
        display_name = plan_obj.display_name if plan_obj else meta.get("title", plan_type.value.upper())
        description = meta.get("description", "")
        if plan_obj and plan_obj.description:
            description = plan_obj.description

        plan_display_price = f"{rub_price:.0f} ‚ÇΩ"

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É
        try:
            yukassa_service = YukassaPaymentService()
            payment_result = yukassa_service.create_payment(
                user_id=update.effective_user.id,
                plan_type=plan_id,
                amount=rub_price,
                description=f"–ü–æ–¥–ø–∏—Å–∫–∞ {display_name} - CyberKitty Transkribator"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
            payment_text = f"""üí≥ **–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É**

üì¶ **–ü–ª–∞–Ω:** {display_name}
üí∞ **–°—É–º–º–∞:** {plan_display_price}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {description or '–ü–æ–¥–ø–∏—Å–∫–∞ CyberKitty Transkribator'}

üîó **–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:**
{payment_result['confirmation_url']}

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

üí° –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""

            keyboard = [
                [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_result['confirmation_url'])],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="show_payment_plans")]
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.callback_query.edit_message_text(
                payment_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

            logger.info(f"–ü–ª–∞—Ç–µ–∂ –Æ–ö–∞—Å—Å—ã –¥–ª—è –ø–ª–∞–Ω–∞ {plan_id} —Å–æ–∑–¥–∞–Ω: {payment_result['payment_id']}")

        except Exception as yukassa_error:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –Æ–ö–∞—Å—Å—ã: {yukassa_error}")
            await update.callback_query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Telegram Stars."
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –Æ–ö–∞—Å—Å—ã: {e}")
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")

async def handle_pre_checkout_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç pre-checkout –∑–∞–ø—Ä–æ—Å—ã."""
    try:
        query = update.pre_checkout_query

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞, –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã –∏ —Ç.–¥.

        await query.answer(ok=True)
        logger.info(f"Pre-checkout query –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pre-checkout query: {e}")
        await query.answer(ok=False, error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")


async def handle_successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏."""
    try:
        payment = update.message.successful_payment
        user_id = update.effective_user.id

        logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {payment.total_amount/100 if payment.currency == 'RUB' else payment.total_amount} {payment.currency}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = SessionLocal()
        try:
            user_service = UserService(db)
            transaction_service = TransactionService(db)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = user_service.get_or_create_user(telegram_id=user_id)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞–Ω –ø–æ payload
            plan_name = payment.invoice_payload.replace("plan_", "") if payment.invoice_payload.startswith("plan_") else "pro"
            logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–ª–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {plan_name}")

            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            amount_rub = payment.total_amount / 100 if payment.currency == "RUB" else None
            amount_stars = payment.total_amount if payment.currency == "XTR" else None

            transaction = transaction_service.create_transaction(
                user=db_user,
                plan_type=plan_name,
                amount_rub=amount_rub or 0.0,
                amount_stars=amount_stars or 0,
                payment_method="telegram_stars" if payment.currency == "XTR" else "telegram_payments"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            upgrade_success = user_service.upgrade_user_plan(db_user, plan_name)
            if upgrade_success:
                logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ –ø–ª–∞–Ω–∞ {plan_name}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–æ {plan_name}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        finally:
            db.close()

        success_text = f"""üéâ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!

üí≥ –°—É–º–º–∞: {payment.total_amount/100 if payment.currency == 'RUB' else payment.total_amount} {payment.currency}
üì¶ –¢–æ–≤–∞—Ä: {payment.invoice_payload}
üéØ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {payment.telegram_payment_charge_id}

‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!

–ß—Ç–æ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ:
‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ò–ò

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CyberKitty Transkribator! üê±‚ú®"""

        keyboard = [
            [InlineKeyboardButton("üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await _reply(update, context, success_text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await _reply(update, context, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")

async def handle_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±–µ–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏."""
    try:
        query = update.callback_query
        data = query.data

        if data == "show_payment_plans":
            await show_payment_plans(update, context)
        elif data.startswith("buy_plan_"):
            if data.endswith("_stars"):
                # –ü–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Telegram Stars
                plan_id = data.replace("buy_plan_", "").replace("_stars", "")
                await initiate_payment(update, context, plan_id)
            elif data.endswith("_yukassa"):
                # –ü–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É
                plan_id = data.replace("buy_plan_", "").replace("_yukassa", "")
                await initiate_yukassa_payment(update, context, plan_id)
            else:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                plan_id = data.replace("buy_plan_", "")
                await initiate_payment(update, context, plan_id)
        elif data == "stay_basic":
            await query.edit_message_text(
                "üëç –í—ã –æ—Å—Ç–∞–µ—Ç–µ—Å—å –Ω–∞ –±–∞–∑–æ–≤–æ–º —Ç–∞—Ä–∏—Ñ–µ!\n\n"
                "–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ PRO –∏–ª–∏ UNLIMITED –ø–ª–∞–Ω "
                "–¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. üöÄ"
            )
        else:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ payment callback: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
