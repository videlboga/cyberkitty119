import json
from datetime import datetime, timedelta
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from transkribator_modules.config import logger
from transkribator_modules.db.database import SessionLocal, UserService, TransactionService
from transkribator_modules.db.models import PlanType

# –¶–µ–Ω—ã –≤ Telegram Stars (1 Star ‚âà 1.3 —Ä—É–±–ª—è)
PLAN_PRICES_STARS = {
    PlanType.BASIC: 760,      # 990 —Ä—É–± ‚âà 760 Stars
    PlanType.PRO: 2300,       # 2990 —Ä—É–± ‚âà 2300 Stars  
    PlanType.UNLIMITED: 7690  # 9990 —Ä—É–± ‚âà 7690 Stars
}

PLAN_DESCRIPTIONS = {
    PlanType.BASIC: {
        "title": "–ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω",
        "description": "180 –º–∏–Ω—É—Ç –≤ –º–µ—Å—è—Ü, —Ñ–∞–π–ª—ã –¥–æ 200 –ú–ë",
        "features": [
            "180 –º–∏–Ω—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤ –º–µ—Å—è—Ü",
            "–§–∞–π–ª—ã –¥–æ 200 –ú–ë", 
            "–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è",
            "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ò–ò"
        ]
    },
    PlanType.PRO: {
        "title": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω", 
        "description": "600 –º–∏–Ω—É—Ç –≤ –º–µ—Å—è—Ü, API –¥–æ—Å—Ç—É–ø, —Ñ–∞–π–ª—ã –¥–æ 500 –ú–ë",
        "features": [
            "600 –º–∏–Ω—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤ –º–µ—Å—è—Ü",
            "–§–∞–π–ª—ã –¥–æ 500 –ú–ë",
            "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", 
            "API –¥–æ—Å—Ç—É–ø —Å –∫–ª—é—á–∞–º–∏",
            "–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"
        ]
    },
    PlanType.UNLIMITED: {
        "title": "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø–ª–∞–Ω",
        "description": "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –º–∏–Ω—É—Ç—ã, —Ñ–∞–π–ª—ã –¥–æ 2 –ì–ë, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π API",
        "features": [
            "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –º–∏–Ω—É—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏",
            "–§–∞–π–ª—ã –¥–æ 2 –ì–ë",
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
            "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π API –¥–æ—Å—Ç—É–ø", 
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7"
        ]
    }
}

async def show_payment_plans(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ Telegram Stars"""
    user = update.effective_user
    
    db = SessionLocal()
    try:
        user_service = UserService(db)
        db_user = user_service.get_or_create_user(telegram_id=user.id)
        current_plan = user_service.get_user_plan(db_user)
        
        plans_text = f"""‚≠ê **–ü–æ–∫—É–ø–∫–∞ –ø–ª–∞–Ω–æ–≤ —á–µ—Ä–µ–∑ Telegram Stars**

üë§ **–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω:** {current_plan.display_name}

üí´ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏:**

"""
        
        keyboard = []
        
        for plan_type, price_stars in PLAN_PRICES_STARS.items():
            if plan_type.value == current_plan.name:
                continue  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω
                
            plan_info = PLAN_DESCRIPTIONS[plan_type]
            price_rub = price_stars * 1.3  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
            
            plans_text += f"**{plan_info['title']}** - ‚≠ê {price_stars} Stars (~{price_rub:.0f} ‚ÇΩ)\n"
            plans_text += f"_{plan_info['description']}_\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏
            keyboard.append([InlineKeyboardButton(
                f"‚≠ê –ö—É–ø–∏—Ç—å {plan_info['title']} - {price_stars} Stars",
                callback_data=f"buy_plan_{plan_type.value}"
            )])
        
        if not keyboard:
            plans_text += "‚úÖ –£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω!"
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")])
        else:
            plans_text += "üí° **–ß—Ç–æ —Ç–∞–∫–æ–µ Telegram Stars?**\n"
            plans_text += "Telegram Stars - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞ Telegram –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –≤ –±–æ—Ç–∞—Ö.\n"
            plans_text += "–ö—É–ø–∏—Ç—å Stars –º–æ–∂–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.\n\n"
            plans_text += "üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è Telegram"
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                plans_text, reply_markup=reply_markup, parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                plans_text, reply_markup=reply_markup, parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–ª–∞–Ω–æ–≤ –æ–ø–ª–∞—Ç—ã: {e}")
        error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–æ–≤. *—Å–º—É—â–µ–Ω–Ω–æ –ø—Ä—è—á–µ—Ç –º–æ—Ä–¥–æ—á–∫—É*"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(error_text)
        else:
            await update.message.reply_text(error_text)
    finally:
        db.close()

async def create_payment_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE, plan_type: str) -> None:
    """–°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–ª–∞–Ω–∞ —á–µ—Ä–µ–∑ Telegram Stars"""
    user = update.effective_user
    query = update.callback_query
    
    if plan_type not in PLAN_PRICES_STARS:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω")
        return
    
    plan_enum = PlanType(plan_type)
    price_stars = PLAN_PRICES_STARS[plan_enum]
    plan_info = PLAN_DESCRIPTIONS[plan_enum]
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è Telegram Stars
        prices = [LabeledPrice(label=plan_info["title"], amount=price_stars)]
        
        # Payload –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
        payload = json.dumps({
            "user_id": user.id,
            "plan": plan_type,
            "timestamp": datetime.now().isoformat()
        })
        
        await context.bot.send_invoice(
            chat_id=user.id,
            title=f"‚≠ê {plan_info['title']}",
            description=plan_info['description'],
            payload=payload,
            provider_token="",  # –ü—É—Å—Ç–æ–π –¥–ª—è Telegram Stars
            currency="XTR",     # –í–∞–ª—é—Ç–∞ Telegram Stars
            prices=prices,
            start_parameter=f"buy_plan_{plan_type}",
            photo_url="https://i.imgur.com/placeholder.jpg",  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            photo_size=512,
            photo_width=512,
            photo_height=512,
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            send_phone_number_to_provider=False,
            send_email_to_provider=False,
            is_flexible=False
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        success_text = f"""‚úÖ **–ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω!**

üí´ **–ü–ª–∞–Ω:** {plan_info['title']}
‚≠ê **–¶–µ–Ω–∞:** {price_stars} Telegram Stars
üìã **–í–∫–ª—é—á–∞–µ—Ç:**"""

        for feature in plan_info['features']:
            success_text += f"\n‚Ä¢ {feature}"
        
        success_text += f"\n\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω–≤–æ–π—Å –≤—ã—à–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º", callback_data="show_payment_plans")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {str(e)}\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_payment_plans")
            ]])
        )

async def handle_pre_checkout_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–∞"""
    query = update.pre_checkout_query
    
    try:
        # –ü–∞—Ä—Å–∏–º payload
        payload_data = json.loads(query.invoice_payload)
        user_id = payload_data.get("user_id")
        plan_type = payload_data.get("plan")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        if user_id != query.from_user.id:
            await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return
            
        if plan_type not in PLAN_PRICES_STARS:
            await query.answer(ok=False, error_message="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É
        expected_price = PLAN_PRICES_STARS[PlanType(plan_type)]
        if query.total_amount != expected_price:
            await query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞")
            return
        
        # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        await query.answer(ok=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pre_checkout: {e}")
        await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")

async def handle_successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = update.message.successful_payment
    user = update.effective_user
    
    db = SessionLocal()
    try:
        # –ü–∞—Ä—Å–∏–º payload
        payload_data = json.loads(payment.invoice_payload)
        plan_type = payload_data.get("plan")
        
        user_service = UserService(db)
        transaction_service = TransactionService(db)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = user_service.get_or_create_user(telegram_id=user.id)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = transaction_service.create_transaction(
            user=db_user,
            amount_stars=payment.total_amount,
            amount_rub=payment.total_amount * 1.3,  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
            currency="XTR",
            payment_provider="telegram_stars",
            provider_payment_charge_id=payment.provider_payment_charge_id,
            telegram_payment_charge_id=payment.telegram_payment_charge_id,
            plan_purchased=plan_type,
            metadata=json.dumps({
                "invoice_payload": payment.invoice_payload,
                "order_info": payment.order_info.__dict__ if payment.order_info else None
            })
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_service.upgrade_user_plan(db_user, plan_type)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ø–ª–∞–Ω–µ
        plan_info = PLAN_DESCRIPTIONS[PlanType(plan_type)]
        
        success_message = f"""üéâ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**

‚úÖ **–í–∞—à –Ω–æ–≤—ã–π –ø–ª–∞–Ω:** {plan_info['title']}
‚≠ê **–û–ø–ª–∞—á–µ–Ω–æ:** {payment.total_amount} Telegram Stars
üÜî **ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:** {transaction.id}

üìã **–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:**"""

        for feature in plan_info['features']:
            success_message += f"\n‚Ä¢ {feature}"
        
        success_message += f"\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        
        keyboard = [
            [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("üîë API –∫–ª—é—á–∏", callback_data="show_api_keys")] if plan_type in ["pro", "unlimited"] else [],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
        ]
        # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
        keyboard = [row for row in keyboard if row]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            success_message, 
            reply_markup=reply_markup, 
            parse_mode='Markdown'
        )
        
        logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–ª–∞–Ω–∞ {plan_type} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id} –∑–∞ {payment.total_amount} Stars")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞. "
            "–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, –Ω–æ –ø–ª–∞–Ω –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. "
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @kiryanovpro"
        )
    finally:
        db.close()

async def handle_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "show_payment_plans":
        await show_payment_plans(update, context)
    elif data.startswith("buy_plan_"):
        plan_type = data.replace("buy_plan_", "")
        await create_payment_invoice(update, context, plan_type)
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–ª–∞—Ç–µ–∂–µ–π") 