"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –≤ CyberKitty Transkribator
"""

import json
from datetime import datetime, timedelta
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from transkribator_modules.config import logger
from transkribator_modules.db.database import SessionLocal, UserService, TransactionService
from transkribator_modules.db.models import PlanType

# –¶–µ–Ω—ã –≤ Telegram Stars (1 Star ‚âà 1.3 —Ä—É–±–ª—è)
PLAN_PRICES_STARS = {
    PlanType.BASIC: 760,      # 990 —Ä—É–± ‚âà 760 Stars
    PlanType.PRO: 2300,       # 2990 —Ä—É–± ‚âà 2300 Stars  
    PlanType.UNLIMITED: 7690  # 9990 —Ä—É–± ‚âà 7690 Stars
}

PLAN_DESCRIPTIONS = {
    PlanType.BASIC: {
        "title": "–ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω",
        "description": "180 –º–∏–Ω—É—Ç –≤ –º–µ—Å—è—Ü, —Ñ–∞–π–ª—ã –¥–æ 200 –ú–ë",
        "features": [
            "180 –º–∏–Ω—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤ –º–µ—Å—è—Ü",
            "–§–∞–π–ª—ã –¥–æ 200 –ú–ë", 
            "–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è",
            "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ò–ò"
        ]
    },
    PlanType.PRO: {
        "title": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω", 
        "description": "600 –º–∏–Ω—É—Ç –≤ –º–µ—Å—è—Ü, API –¥–æ—Å—Ç—É–ø, —Ñ–∞–π–ª—ã –¥–æ 500 –ú–ë",
        "features": [
            "600 –º–∏–Ω—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤ –º–µ—Å—è—Ü",
            "–§–∞–π–ª—ã –¥–æ 500 –ú–ë",
            "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", 
            "API –¥–æ—Å—Ç—É–ø —Å –∫–ª—é—á–∞–º–∏",
            "–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"
        ]
    },
    PlanType.UNLIMITED: {
        "title": "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø–ª–∞–Ω",
        "description": "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –º–∏–Ω—É—Ç—ã, —Ñ–∞–π–ª—ã –¥–æ 2 –ì–ë, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π API",
        "features": [
            "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –º–∏–Ω—É—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏",
            "–§–∞–π–ª—ã –¥–æ 2 –ì–ë",
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
            "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π API –¥–æ—Å—Ç—É–ø", 
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7"
        ]
    }
}

async def show_payment_plans(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã."""
    try:
        plans_text = """üíé **–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã CyberKitty Transkribator**

üÜì **–ë–∞–∑–æ–≤—ã–π (–ë–µ—Å–ø–ª–∞—Ç–Ω–æ)**
‚Ä¢ 30 –º–∏–Ω—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ –º–µ—Å—è—Ü
‚Ä¢ –§–∞–π–ª—ã –¥–æ 100 –ú–ë
‚Ä¢ –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ

‚≠ê **PRO (299‚ÇΩ/–º–µ—Å—è—Ü)**
‚Ä¢ 10 —á–∞—Å–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ –º–µ—Å—è—Ü
‚Ä¢ –§–∞–π–ª—ã –¥–æ 2 –ì–ë
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
‚Ä¢ API –¥–æ—Å—Ç—É–ø

üöÄ **UNLIMITED (699‚ÇΩ/–º–µ—Å—è—Ü)**
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
‚Ä¢ –§–∞–π–ª—ã –¥–æ 2 –ì–ë
‚Ä¢ VIP –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
‚Ä¢ –ü–æ–ª–Ω—ã–π API –¥–æ—Å—Ç—É–ø
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ò–ò

üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!**"""

        keyboard = [
            [InlineKeyboardButton("üÜì –û—Å—Ç–∞—Ç—å—Å—è –Ω–∞ –±–∞–∑–æ–≤–æ–º", callback_data="stay_basic")],
            [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å PRO", callback_data="buy_plan_pro")],
            [InlineKeyboardButton("üöÄ –ö—É–ø–∏—Ç—å UNLIMITED", callback_data="buy_plan_unlimited")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="personal_cabinet")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                plans_text, reply_markup=reply_markup, parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                plans_text, reply_markup=reply_markup, parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–ª–∞–Ω–æ–≤: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤")

async def initiate_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, plan_id: str) -> None:
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞."""
    try:
        plan_info = {
            "pro": {
                "name": "PRO",
                "price": "299‚ÇΩ",
                "description": "10 —á–∞—Å–æ–≤ –≤ –º–µ—Å—è—Ü + API –¥–æ—Å—Ç—É–ø"
            },
            "unlimited": {
                "name": "UNLIMITED", 
                "price": "699‚ÇΩ",
                "description": "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ + VIP —Ñ—É–Ω–∫—Ü–∏–∏"
            }
        }
        
        if plan_id not in plan_info:
            await update.callback_query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω")
            return
        
        plan = plan_info[plan_id]
        
        payment_text = f"""üí≥ **–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ {plan['name']}**

üì¶ **–ü–ª–∞–Ω:** {plan['name']}
üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {plan['price']}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {plan['description']}
‚è∞ **–ü–µ—Ä–∏–æ–¥:** 30 –¥–Ω–µ–π

üöß **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**

**–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ:**
‚Ä¢ –û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏
‚Ä¢ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü
‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
‚Ä¢ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã

üìß **–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–ø–ª–∞—Ç—ã:**
–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º @cyberkitty_support

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üîî"""

        keyboard = [
            [InlineKeyboardButton("üìß –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/cyberkitty_support")],
            [InlineKeyboardButton("üîô –ö —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="show_payment_plans")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="personal_cabinet")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            payment_text, reply_markup=reply_markup, parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")

async def handle_pre_checkout_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç pre-checkout –∑–∞–ø—Ä–æ—Å—ã."""
    try:
        query = update.pre_checkout_query
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞, –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã –∏ —Ç.–¥.
        
        await query.answer(ok=True)
        logger.info(f"Pre-checkout query –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pre-checkout query: {e}")
        await query.answer(ok=False, error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")

async def handle_successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏."""
    try:
        payment = update.message.successful_payment
        user_id = update.effective_user.id
        
        logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {payment.total_amount/100} {payment.currency}")
        
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # await update_user_subscription(user_id, payment)
        
        success_text = f"""üéâ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**

üí≥ **–°—É–º–º–∞:** {payment.total_amount/100} {payment.currency}
üì¶ **–¢–æ–≤–∞—Ä:** {payment.invoice_payload}
üéØ **ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:** {payment.telegram_payment_charge_id}

‚úÖ **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**

**–ß—Ç–æ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ:**
‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ò–ò

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CyberKitty Transkribator! üê±‚ú®"""

        keyboard = [
            [InlineKeyboardButton("üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            success_text, reply_markup=reply_markup, parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")

async def handle_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±–µ–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏."""
    try:
        query = update.callback_query
        data = query.data
        
        if data == "show_payment_plans":
            await show_payment_plans(update, context)
        elif data.startswith("buy_plan_"):
            plan_id = data.replace("buy_plan_", "")
            await initiate_payment(update, context, plan_id)
        elif data == "stay_basic":
            await query.edit_message_text(
                "üëç –í—ã –æ—Å—Ç–∞–µ—Ç–µ—Å—å –Ω–∞ –±–∞–∑–æ–≤–æ–º —Ç–∞—Ä–∏—Ñ–µ!\n\n"
                "–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ PRO –∏–ª–∏ UNLIMITED –ø–ª–∞–Ω "
                "–¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. üöÄ"
            )
        else:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ payment callback: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞") 