import asyncio
from pathlib import Path
from telegram import Update
from telegram.ext import ContextTypes
import re
from urllib.parse import urlparse
import httpx
import os
import time

from transkribator_modules.config import (
    logger, user_transcriptions, VIDEOS_DIR, TRANSCRIPTIONS_DIR, MAX_MESSAGE_LENGTH, AUDIO_DIR, BOT_TOKEN
)
from transkribator_modules.utils.processor import process_video, process_video_file, process_audio_file, process_video_file_silent, process_audio_file_silent
from transkribator_modules.utils.downloader import download_media
from transkribator_modules.utils.large_file_downloader import download_large_file, get_file_info

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Å–µ—Ä–≤–µ—Ä–æ–º ---

async def send_file_to_api_server(file_path: Path, chat_id: int, message_id: int, file_type: str) -> dict:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        api_url = os.getenv("API_SERVER_URL", "http://api:8000")
        
        # –°–æ–∑–¥–∞–µ–º API –∫–ª—é—á –¥–ª—è –±–æ—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        api_key = await get_or_create_bot_api_key()
        
        with open(file_path, "rb") as f:
            files = {"file": (file_path.name, f, "application/octet-stream")}
            data = {
                "format_with_llm": "true",
                "chat_id": str(chat_id),
                "message_id": str(message_id)
            }
            headers = {"X-API-Key": api_key}
            
            async with httpx.AsyncClient(timeout=300.0) as client:
                response = await client.post(
                    f"{api_url}/transcribe",
                    files=files,
                    data=data,
                    headers=headers
                )
                
                if response.status_code == 200:
                    return response.json()
                else:
                    logger.error(f"API —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status_code} - {response.text}")
                    return None
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤ API —Å–µ—Ä–≤–µ—Ä: {e}")
        return None

async def get_or_create_bot_api_key() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç API –∫–ª—é—á –¥–ª—è –±–æ—Ç–∞"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
    import os
    return os.getenv('LOCAL_API_KEY', 'cyberkitty_local_api_key_2024')





# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ ---

async def handle_chat_join_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —á–∞—Ç."""
    chat_join_request = update.chat_join_request
    chat = chat_join_request.chat
    user = chat_join_request.from_user
    
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —á–∞—Ç {chat.id} ({chat.title}) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–ø—Ä–æ—Å
    try:
        await context.bot.approve_chat_join_request(
            chat_id=chat.id,
            user_id=user.id
        )
        logger.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç {chat.id}: {e}")

async def handle_my_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞
    if hasattr(update, 'my_chat_member') and update.my_chat_member:
        chat_member = update.my_chat_member
        chat = chat_member.chat
        new_status = chat_member.new_chat_member.status
        old_status = chat_member.old_chat_member.status
        
        logger.info(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat.id} –∏–∑–º–µ–Ω–∏–ª—Å—è: {old_status} -> {new_status}")
        
        # –ï—Å–ª–∏ –±–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É
        if new_status in ['member', 'administrator'] and old_status in ['left', 'kicked']:
            await send_welcome_message(chat, context)
        
        # –ï—Å–ª–∏ –±–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏ –∏–∑ –≥—Ä—É–ø–ø—ã
        elif new_status in ['left', 'kicked']:
            logger.info(f"–ë–æ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞ {chat.id} ({chat.title})")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    return

async def send_welcome_message(chat, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç."""
    try:
        welcome_text = (
            f"üê± –ú—è—É! –ü—Ä–∏–≤–µ—Ç, {chat.title}! –Ø CyberKitty ‚Äî –±–æ—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ.\n\n"
            "**–ß—Ç–æ —è —É–º–µ—é:**\n"
            "‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã\n"
            "‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ —Å–∞–º–º–∞—Ä–∏\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ YouTube\n\n"
            "**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
            "**–ö–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞\n"
            "/plans - –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã\n\n"
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! *—Ä–∞–¥–æ—Å—Ç–Ω–æ –º—É—Ä—á–∏—Ç*"
        )
        
        await context.bot.send_message(
            chat_id=chat.id,
            text=welcome_text,
            parse_mode='Markdown'
        )
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat.id}: {e}")

async def check_bot_permissions(chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ."""
    try:
        bot_member = await context.bot.get_chat_member(chat_id, context.bot.id)
        return bot_member.status in ['member', 'administrator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö."""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("raw_"):
        try:
            message_id = query.data.split("_")[1]
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–∏–¥–µ–æ-—Ñ–∞–π–ª, –∑–∞—Ç–µ–º –∞—É–¥–∏–æ
            raw_transcript_path = TRANSCRIPTIONS_DIR / f"telegram_video_{message_id}_raw.txt"
            if not raw_transcript_path.exists():
                raw_transcript_path = TRANSCRIPTIONS_DIR / f"telegram_audio_{message_id}_raw.txt"
            
            if not raw_transcript_path.exists():
                await query.message.reply_text(
                    "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å—ã—Ä—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞. *—Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ —Å–º–æ—Ç—Ä–∏—Ç*"
                )
                return
                
            with open(raw_transcript_path, "r", encoding="utf-8") as f:
                raw_transcript = f.read()
                
            if len(raw_transcript) > MAX_MESSAGE_LENGTH:
                # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
                with open(raw_transcript_path, "rb") as f:
                    await context.bot.send_document(
                        chat_id=query.message.chat_id,
                        document=f,
                        filename=f"raw_transcript_{message_id}.txt",
                        caption="–í–æ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ! *–¥–µ–ª–æ–≤–∏—Ç–æ –º–∞—à–µ—Ç —Ö–≤–æ—Å—Ç–æ–º*"
                    )
            else:
                # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
                await query.message.reply_text(
                    f"–í–æ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ:\n\n{raw_transcript}\n\n"
                    f"@CyberKitty19_bot"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ raw transcript: {e}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—ã—Ä–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏. *—Å–º—É—â–µ–Ω–Ω–æ –ø—Ä—è—á–µ—Ç –º–æ—Ä–¥–æ—á–∫—É*"
            )
    


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("=== –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï ===")
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.id}")
    print(f"Chat ID: {update.effective_chat.id}")
    print(f"–¢–∏–ø —á–∞—Ç–∞: {update.effective_chat.type}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    message_type = "text"
    if update.message.video:
        message_type = "video"
    elif update.message.audio:
        message_type = "audio"
    elif update.message.document:
        message_type = "document"
    
    print(f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")
    
    if update.message.video:
        print("=== –≠–¢–û –í–ò–î–ï–û! ===")
        print(f"–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: {update.message.video.file_size}")
        print(f"File ID: {update.message.video.file_id}")
    
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    message_id = update.message.message_id
    chat_type = update.effective_chat.type
    
    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    # ADMIN_IDS = [123456789, 987654321] # Placeholder for actual admin IDs
    # if user_id in ADMIN_IDS:
    #     print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    #     # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - –ø–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    #     await handle_admin_message(update, context)
    # else:
    #     print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    #     # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    #     await handle_regular_user_message(update, context)

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id} (—Ç–∏–ø: {chat_type})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
    if chat_type in ['group', 'supergroup']:
        has_permissions = await check_bot_permissions(chat_id, context)
        if not has_permissions:
            logger.warning(f"–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ {chat_id}")
            return
    
    URL_RE = re.compile(r"https?://\S+")

    # 1) –°—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–¥–∏–∞ / YouTube
    if update.message.text and URL_RE.search(update.message.text):
        url = URL_RE.search(update.message.text).group(0)
        status = await update.message.reply_text("üîó –°–∫–∞—á–∏–≤–∞—é –º–µ–¥–∏–∞ –ø–æ —Å—Å—ã–ª–∫–µ‚Ä¶")
        target_dir = VIDEOS_DIR
        dl_path = await download_media(url, target_dir)
        if not dl_path:
            await status.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ üòø")
            return

        ext = dl_path.suffix.lower()
        if ext in {'.mp3', '.wav', '.flac', '.m4a'}:
            await process_audio_file(dl_path, chat_id, message_id, context, status_message=status)
        else:
            await process_video_file(dl_path, chat_id, message_id, context, status_message=status)
        return

    # 2) –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º –∏ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –ø—Ä–æ–º–æ–∫–æ–¥)
    if update.message.text and not update.message.video and not update.message.document:
        # --- –§–∏–∫—Å: –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤ –≥—Ä—É–ø–ø–∞—Ö ---
        if chat_type in ['group', 'supergroup']:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö
        else:
            text = update.message.text.strip().upper()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —ç—Ç–æ –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥ (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã)
            if (text.startswith(("KITTY", "LIGHTKITTY", "LIGHT", "VIP", "SPECIAL", "PROMO")) or 
                (len(text) >= 5 and len(text) <= 20 and text.replace("-", "").replace("_", "").isalnum())):
                from transkribator_modules.bot.commands import activate_promo_code
                try:
                    await activate_promo_code(update, context, text)
                    return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ '{text}': {e}")
                    # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–≤–µ—á–∞–µ–º –º—è–≥–∫–æ
                    await update.message.reply_text("ü§î –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥, –Ω–æ —è –µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª. *–∑–∞–¥—É–º—á–∏–≤–æ –Ω–∞–∫–ª–æ–Ω—è–µ—Ç –≥–æ–ª–æ–≤—É*")
                    return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if update.message.voice or update.message.audio:
        # ----- –∞—É–¥–∏–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ -----
        if chat_type in ['group', 'supergroup']:
            # –í –≥—Ä—É–ø–ø–∞—Ö - –±–µ–∑ —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –º–µ–Ω—é
            audio_file = await context.bot.get_file(update.message.voice.file_id if update.message.voice else update.message.audio.file_id)
            audio_path = AUDIO_DIR / f"telegram_audio_{message_id}_chat_{chat_id}{Path(audio_file.file_path).suffix or '.ogg'}"
            await audio_file.download_to_drive(custom_path=audio_path)
            await process_audio_file_silent(audio_path, chat_id, message_id, context, user_username=update.effective_user.username, user_id=update.effective_user.id)
            return
        else:
            # –í –ª–∏—á–Ω–æ–º —á–∞—Ç–µ - –∫–∞–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω-–≤–µ—Ä—Å–∏–∏
            status_message = await update.message.reply_text(
                "–ú—è—É! –í–∏–∂—É –∞—É–¥–∏–æ! –°–∫–∞—á–∏–≤–∞—é –µ–≥–æ... *–≤–æ–∑–±—É–∂–¥–µ–Ω–Ω–æ –≤–∏–ª—è–µ—Ç —Ö–≤–æ—Å—Ç–æ–º*"
            )
            audio_file = await context.bot.get_file(update.message.voice.file_id if update.message.voice else update.message.audio.file_id)
            audio_path = AUDIO_DIR / f"telegram_audio_{message_id}_chat_{chat_id}{Path(audio_file.file_path).suffix or '.ogg'}"
            await audio_file.download_to_drive(custom_path=audio_path)
            await status_message.edit_text(
                "–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É... *—Ä–∞–¥–æ—Å—Ç–Ω–æ –º—É—Ä—á–∏—Ç*"
            )
            from transkribator_modules.utils.processor import process_audio_file
            await process_audio_file(audio_path, chat_id, message_id, context, status_message=status_message)
            return

    elif update.message.document and update.message.document.mime_type:
        mime = update.message.document.mime_type
        if mime.startswith('video/') or mime.startswith('audio/'):
            if chat_type in ['group', 'supergroup']:
                # –í –≥—Ä—É–ø–ø–∞—Ö - –±–µ–∑ —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –º–µ–Ω—é
                doc_file = await context.bot.get_file(update.message.document.file_id)
                ext = Path(doc_file.file_path).suffix or ''.join(['.', mime.split('/')[-1]])
                if mime.startswith('audio/'):
                    local_path = AUDIO_DIR / f"telegram_audio_{message_id}_chat_{chat_id}{ext}"
                    await doc_file.download_to_drive(custom_path=local_path)
                    await process_audio_file_silent(local_path, chat_id, message_id, context, user_username=update.effective_user.username, user_id=update.effective_user.id)
                else:
                    local_path = VIDEOS_DIR / f"telegram_video_{message_id}_chat_{chat_id}{ext}"
                    await doc_file.download_to_drive(custom_path=local_path)
                    await process_video_file_silent(local_path, chat_id, message_id, context, user_username=update.effective_user.username, user_id=update.effective_user.id)
                return
            else:
                # –í –ª–∏—á–Ω–æ–º —á–∞—Ç–µ - –∫–∞–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω-–≤–µ—Ä—Å–∏–∏
                status_message = await update.message.reply_text(
                    "–ú—è—É! –í–∏–∂—É —Ñ–∞–π–ª! –°–∫–∞—á–∏–≤–∞—é –µ–≥–æ... *–≤–æ–∑–±—É–∂–¥–µ–Ω–Ω–æ –≤–∏–ª—è–µ—Ç —Ö–≤–æ—Å—Ç–æ–º*"
                )
                doc_file = await context.bot.get_file(update.message.document.file_id)
                ext = Path(doc_file.file_path).suffix or ''.join(['.', mime.split('/')[-1]])
                if mime.startswith('audio/'):
                    local_path = AUDIO_DIR / f"telegram_audio_{message_id}_chat_{chat_id}{ext}"
                    await doc_file.download_to_drive(custom_path=local_path)
                    await status_message.edit_text(
                        "–ê—É–¥–∏–æ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É... *—Ä–∞–¥–æ—Å—Ç–Ω–æ –º—É—Ä—á–∏—Ç*"
                    )
                    from transkribator_modules.utils.processor import process_audio_file
                    await process_audio_file(local_path, chat_id, message_id, context, status_message=status_message)
                else:
                    local_path = VIDEOS_DIR / f"telegram_video_{message_id}_chat_{chat_id}{ext}"
                    await doc_file.download_to_drive(custom_path=local_path)
                    await status_message.edit_text(
                        "–í–∏–¥–µ–æ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É... *—Ä–∞–¥–æ—Å—Ç–Ω–æ –º—É—Ä—á–∏—Ç*"
                    )
                    from transkribator_modules.utils.processor import process_video_file
                    await process_video_file(local_path, chat_id, message_id, context, status_message=status_message)
            return

    if update.message.video:
        if chat_type in ['group', 'supergroup']:
            # –í –≥—Ä—É–ø–ø–∞—Ö - —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –±–µ–∑ –º–µ–Ω—é –∏ —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await process_video_file_silent(update.message.video, chat_id, message_id, context, user_username=update.effective_user.username, user_id=update.effective_user.id)
            return
        else:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await process_video_file_direct(update, context, update.message.video)
            return

    # –í –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–º (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö)
    if chat_type not in ['group', 'supergroup']:
        await update.message.reply_text(
            "–ú—è—É! *–∏–≥—Ä–∏–≤–æ —Å–º–æ—Ç—Ä–∏—Ç* –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ, –∏ —è —Å–æ–∑–¥–∞–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É! *–≤–∏–ª—è–µ—Ç —Ö–≤–æ—Å—Ç–∏–∫–æ–º*"
        ) 

async def save_file_info_for_local_bot(update: Update, context: ContextTypes.DEFAULT_TYPE, file_type: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã–º –±–æ—Ç–æ–º."""
    try:
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        message_id = update.message.message_id
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        if file_type == "video":
            info_file = VIDEOS_DIR / f"pending_{file_type}_{message_id}.txt"
        else:
            info_file = AUDIO_DIR / f"pending_{file_type}_{message_id}.txt"
        with open(info_file, "w", encoding="utf-8") as f:
            f.write(f"user_id={user_id}\n")
            f.write(f"chat_id={chat_id}\n")
            f.write(f"message_id={message_id}\n")
            f.write(f"file_type={file_type}\n")
            f.write(f"timestamp={update.message.date.isoformat()}\n")
        
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ {file_type} –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞: {info_file}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")

async def process_video(chat_id: int, message_id: int, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    video_path = VIDEOS_DIR / f"telegram_video_{message_id}.mp4"
    await process_video_file(video_path, chat_id, message_id, context)

async def process_video_file_direct(update: Update, context: ContextTypes.DEFAULT_TYPE, video_file) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é (—Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        file_size_mb = video_file.file_size / (1024 * 1024) if video_file.file_size else 0
        filename = getattr(video_file, 'file_name', f"video_{video_file.file_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status_msg = await update.message.reply_text(
            f"üé¨ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ:** {filename}\n"
            f"üìä **–†–∞–∑–º–µ—Ä:** {file_size_mb:.1f} –ú–ë\n\n"
            f"‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...",
            parse_mode='Markdown'
        )
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
        video_path = VIDEOS_DIR / f"telegram_video_{video_file.file_id}.mp4"
        audio_path = AUDIO_DIR / f"telegram_audio_{video_file.file_id}.wav"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
        await status_msg.edit_text(
            f"üé¨ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ:** {filename}\n"
            f"üìä **–†–∞–∑–º–µ—Ä:** {file_size_mb:.1f} –ú–ë\n\n"
            f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)",
            parse_mode='Markdown'
        )
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –Ω–∞—à—É —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        logger.info(f"üì• –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ {filename} —Ä–∞–∑–º–µ—Ä–æ–º {file_size_mb:.1f} –ú–ë")
        
        success = await download_large_file(
            bot_token=BOT_TOKEN,
            file_id=video_file.file_id,
            destination=video_path
        )
        
        if not success:
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
            return
            
        logger.info(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await status_msg.edit_text(
            f"üé¨ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ:** {filename}\n"
            f"üìä **–†–∞–∑–º–µ—Ä:** {file_size_mb:.1f} –ú–ë\n\n"
            f"üéµ –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ...",
            parse_mode='Markdown'
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
        from transkribator_modules.audio.extractor import extract_audio_from_video
        if not await extract_audio_from_video(video_path, audio_path):
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ")
            return
        
        # –°–∂–∏–º–∞–µ–º –∞—É–¥–∏–æ
        await status_msg.edit_text(
            f"üé¨ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ:** {filename}\n"
            f"üìä **–†–∞–∑–º–µ—Ä:** {file_size_mb:.1f} –ú–ë\n\n"
            f"üóúÔ∏è –°–∂–∏–º–∞—é –∞—É–¥–∏–æ...",
            parse_mode='Markdown'
        )
        
        from transkribator_modules.audio.extractor import compress_audio_for_api
        compressed_audio = await compress_audio_for_api(audio_path)
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
        await status_msg.edit_text(
            f"üé¨ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ:** {filename}\n"
            f"üìä **–†–∞–∑–º–µ—Ä:** {file_size_mb:.1f} –ú–ë\n\n"
            f"ü§ñ –°–æ–∑–¥–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...",
            parse_mode='Markdown'
        )
        
        from transkribator_modules.transcribe.transcriber import transcribe_audio
        transcript = await transcribe_audio(compressed_audio)
        
        if transcript:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            from transkribator_modules.transcribe.transcriber import format_transcript_with_llm
            formatted_transcript = await format_transcript_with_llm(transcript)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
            from transkribator_modules.utils.processor import send_transcription_result
            
            await send_transcription_result(
                chat_id=update.effective_chat.id,
                message_id=update.message.message_id,
                formatted_transcript=formatted_transcript,
                raw_transcript=transcript,
                media_prefix="telegram_video",
                context=context,
                status_message=status_msg,
            )
        else:
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é")
            
    except Exception as e:
        error_msg = str(e)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
        
        # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        if "timed out" in error_msg.lower() or "timeout" in error_msg.lower():
            await update.message.reply_text(
                f"‚è∞ **–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞**\n\n"
                f"–§–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º {file_size_mb:.1f} –ú–ë —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è.\n"
                f"–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∏–∑-–∑–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏–ª–∏ –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–∞.\n\n"
                f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–∞–π–ª –ø–æ–º–µ–Ω—å—à–µ (–¥–æ 100 –ú–ë)\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n"
                f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ**\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error_msg}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='Markdown'
            )

async def handle_summary_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–∞–º–º–∞—Ä–∏."""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è
        message_id = query.data.split("_")[-1]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∞–º–º–∞—Ä–∏
        summary_type = "–ø–æ–¥—Ä–æ–±–Ω–æ–µ" if query.data.startswith("detailed_") else "–∫—Ä–∞—Ç–∫–æ–µ"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        status_message = await query.message.reply_text(
            f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é {summary_type} —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ... *—Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ –æ–±–¥—É–º—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ*"
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é (–≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ)
        transcript_path = TRANSCRIPTIONS_DIR / f"telegram_video_{message_id}.txt"
        if not transcript_path.exists():
            transcript_path = TRANSCRIPTIONS_DIR / f"telegram_audio_{message_id}.txt"

        if not transcript_path.exists():
            await status_message.edit_text(
                "–ú—è—É... –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞! üîç *—Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ –æ–≥–ª—è–¥—ã–≤–∞–µ—Ç—Å—è* –í–æ–∑–º–æ–∂–Ω–æ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ù–∞–ø–∏—à–∏—Ç–µ @Like\\_a\\_duck - –æ–Ω —Ä–∞–∑–±–µ—Ä—ë—Ç—Å—è! Ô∏è‚Äç‚ôÇÔ∏è"
            )
            return
            
        with open(transcript_path, "r", encoding="utf-8") as f:
            transcript = f.read()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏
        from transkribator_modules.transcribe.transcriber import generate_detailed_summary, generate_brief_summary
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if query.data.startswith("detailed_summary_"):
            summary = await generate_detailed_summary(transcript)
        else:
            summary = await generate_brief_summary(transcript)
            
        if not summary:
            await status_message.edit_text(
                f"–ú—è—É... –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å {summary_type} —Å–∞–º–º–∞—Ä–∏! üòø *–≤–∏–Ω–æ–≤–∞—Ç–æ –æ–ø—É—Å–∫–∞–µ—Ç —É—à–∏* –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –º–æ–∏–º–∏ –∫–∏–±–µ—Ä—Å—Ö–µ–º–∞–º–∏. –°–æ–æ–±—â–∏—Ç–µ @Like\\_a\\_duck - –æ–Ω –≤—Å—ë –ø–æ—á–∏–Ω–∏—Ç! ‚ö°"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–º–∞—Ä–∏ –≤ —Ñ–∞–π–ª
        summary_filename = f"telegram_video_{message_id}_{summary_type}_summary.txt"
        summary_path = TRANSCRIPTIONS_DIR / summary_filename
        
        with open(summary_path, "w", encoding="utf-8") as f:
            f.write(summary)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if len(summary) > MAX_MESSAGE_LENGTH:
            # –ï—Å–ª–∏ —Å–∞–º–º–∞—Ä–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
            await status_message.edit_text(
                f"–ì–æ—Ç–æ–≤–æ! {summary_type.capitalize()} —Å–∞–º–º–∞—Ä–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—ä–µ–º–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º... *–¥–æ–≤–æ–ª—å–Ω–æ –º—É—Ä–ª—ã—á–µ—Ç*"
            )
            
            with open(summary_path, "rb") as f:
                await context.bot.send_document(
                    chat_id=query.message.chat_id,
                    document=f,
                    filename=f"{summary_type.capitalize()} —Å–∞–º–º–∞—Ä–∏ –≤–∏–¥–µ–æ {message_id}.txt",
                    caption=f"–í–æ—Ç {summary_type} —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ! *–≥–æ—Ä–¥–æ –≤—ã–ø—Ä—è–º–ª—è–µ—Ç—Å—è*"
                )
        else:
            # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
            await status_message.edit_text(
                f"–í–æ—Ç {summary_type} —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ:\n\n{summary}\n\n"
                f"@CyberKitty19_bot"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ —Å–∞–º–º–∞—Ä–∏ {query.data}: {e}")
        import traceback
        logger.error(traceback.format_exc())
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º summary_type –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        summary_type = "–ø–æ–¥—Ä–æ–±–Ω–æ–µ" if query.data.startswith("detailed_") else "–∫—Ä–∞—Ç–∫–æ–µ"
        
        await query.message.reply_text(
            f"–û–π-–æ–π! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∏–±–µ—Ä–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {summary_type} —Å–∞–º–º–∞—Ä–∏! ü§ñüí• *—Å–º—É—â–µ–Ω–Ω–æ –ø—Ä—è—á–µ—Ç –º–æ—Ä–¥–æ—á–∫—É* \n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ @Like\\_a\\_duck —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å - –æ–Ω —Ä–∞–∑–±–µ—Ä—ë—Ç—Å—è —Å –º–æ–∏–º–∏ —Å—Ö–µ–º–∞–º–∏! üîß\n\n–î–µ—Ç–∞–ª–∏: {str(e)}"
        ) 

