"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è CyberKitty Transkribator
"""

import asyncio
import subprocess
import tempfile
import html
import re
from dataclasses import dataclass
from pathlib import Path
from typing import Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ContextTypes

from transkribator_modules.agent.dialog import ingest_and_prompt, handle_instruction
from transkribator_modules.audio.extractor import extract_audio_from_video, compress_audio_for_api
from transkribator_modules.beta.feature_flags import FEATURE_BETA_MODE
from transkribator_modules.beta.handlers import (
    handle_update as handle_beta_update,
    process_text as beta_process_text,
)
from transkribator_modules.config import (
    logger,
    MAX_FILE_SIZE_MB,
    VIDEOS_DIR,
    AUDIO_DIR,
    TRANSCRIPTIONS_DIR,
    BOT_TOKEN,
    AGENT_FIRST,
    MINIAPP_PUBLIC_URL,
)
from transkribator_modules.db.database import SessionLocal, UserService, log_telegram_event, log_event
from transkribator_modules.bot.commands import promo_codes_command
from transkribator_modules.transcribe.transcriber_v4 import transcribe_audio, format_transcript_with_llm, _basic_local_format
from transkribator_modules.utils.large_file_downloader import download_large_file, get_file_info


@dataclass(frozen=True)
class _YoutubeArtifacts:
    video_path: Path
    audio_path: Path
    transcript: str
    title: str
    video_id: str
    workspace: Path
    info: dict[str, Any]

def clean_html_entities(text: str) -> str:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞: —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–∏–µ HTML-—Ç–µ–≥–æ–≤.
    –ù–µ —É–¥–∞–ª—è–µ–º –Ω–µ-ASCII, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ä—Ç–∏—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü—É. parse_mode=None.
    """
    if not text:
        return text
    return re.sub(r'<[^>]*>', '', text)


def _resolve_reply_target(update: Update):
    if getattr(update, "message", None):
        return update.message
    if getattr(update, "callback_query", None) and update.callback_query.message:
        return update.callback_query.message
    return None


async def _notify_free_quota_if_needed(update: Update, context: ContextTypes.DEFAULT_TYPE, user) -> None:
    message_text: str | None = None

    if getattr(user, "_was_created", False):
        message_text = (
            "üéÅ –í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ –¥–æ—Å—Ç—É–ø–Ω—ã 3 –≤–∏–¥–µ–æ –≤ –º–µ—Å—è—Ü. –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏."
        )
        setattr(user, "_was_created", False)
    elif getattr(user, "_usage_reset", False):
        message_text = "üîÑ –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –æ–±–Ω–æ–≤–∏–ª—Å—è ‚Äî —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü."
        setattr(user, "_usage_reset", False)

    if not message_text:
        return

    target = _resolve_reply_target(update)
    if target:
        await target.reply_text(message_text)
    else:
        effective_user = update.effective_user
        if effective_user:
            await context.bot.send_message(chat_id=effective_user.id, text=message_text)

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
VIDEO_FORMATS = {'.mp4', '.avi', '.mov', '.mkv', '.webm', '.flv', '.wmv', '.m4v', '.3gp'}
AUDIO_FORMATS = {'.mp3', '.wav', '.flac', '.aac', '.ogg', '.m4a', '.wma', '.opus'}

_YOUTUBE_URL_RE = re.compile(
    r"(https?://(?:www\.)?(?:youtube\.com/(?:watch\?v=|shorts/)[\w-]+(?:[^\s]*)?|youtu\.be/[\w-]+(?:[^\s]*)?))",
    re.IGNORECASE,
)

def _schedule_background_task(
    context: ContextTypes.DEFAULT_TYPE,
    coro,  # type: ignore[var-annotated]
    *,
    description: str,
) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É –≤ —Ñ–æ–Ω–µ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è."""

    task = context.application.create_task(coro)

    def _on_done(finished_task: asyncio.Task) -> None:
        try:
            finished_task.result()
        except asyncio.CancelledError:
            logger.info(
                "–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                extra={"description": description},
            )
        except Exception as exc:  # noqa: BLE001 - —Ö–æ—Ç–∏–º –≤–∏–¥–µ—Ç—å —Å—Ç–µ–∫
            logger.exception(
                "–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏",
                extra={"description": description, "error": str(exc)},
            )

    task.add_done_callback(_on_done)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """üé¨ **CyberKitty Transkribator** üê±

–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–µ—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞!

**–ß—Ç–æ —è —É–º–µ—é:**
üé• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ –¥–æ 2 –ì–ë
üéµ –†–∞–±–æ—Ç–∞—Ç—å —Å –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞–º–∏
üìù –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
ü§ñ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª
2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —è –æ–±—Ä–∞–±–æ—Ç–∞—é —Ñ–∞–π–ª
3. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é!

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
‚Ä¢ –í–∏–¥–µ–æ: MP4, AVI, MOV, MKV, WebM –∏ –¥—Ä—É–≥–∏–µ
‚Ä¢ –ê—É–¥–∏–æ: MP3, WAV, FLAC, AAC, OGG –∏ –¥—Ä—É–≥–∏–µ

–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –ø–æ–º–æ—â–∏."""

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton(
                "üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                web_app=WebAppInfo(url=MINIAPP_PUBLIC_URL),
            )
        ]
    ])

    if update.message:
        await update.message.reply_text(welcome_text, parse_mode='Markdown', reply_markup=keyboard)
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=welcome_text,
            parse_mode='Markdown',
            reply_markup=keyboard,
        )
    try:
        log_telegram_event(
            update.effective_user,
            "command_start",
            {"chat_id": update.effective_chat.id if update.effective_chat else None},
        )
    except Exception:  # noqa: BLE001
        logger.debug("Failed to log /start event", exc_info=True)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ CyberKitty Transkribator**

**–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ 2 –ì–ë
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
‚Ä¢ –ò–ò-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**

üé• **–í–∏–¥–µ–æ:** MP4, AVI, MOV, MKV, WebM, FLV, WMV, M4V, 3GP
üéµ **–ê—É–¥–∏–æ:** MP3, WAV, FLAC, AAC, OGG, M4A, WMA, OPUS

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 2 –ì–ë
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 4 —á–∞—Å–∞

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ñ–∞–π–ª
2. –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ - —è –∏–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ
3. –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ AI API –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
4. –¢–µ–∫—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é LLM
5. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≥–æ—Ç–æ–≤—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏ —è –Ω–∞—á–Ω—É –æ–±—Ä–∞–±–æ—Ç–∫—É! üöÄ"""

    await update.message.reply_text(help_text, parse_mode='Markdown')
    try:
        log_telegram_event(
            update.effective_user,
            "command_help",
            {"chat_id": update.effective_chat.id if update.effective_chat else None},
        )
    except Exception:  # noqa: BLE001
        logger.debug("Failed to log /help event", exc_info=True)

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    status_text = """‚úÖ **–°—Ç–∞—Ç—É—Å CyberKitty Transkribator**

ü§ñ –ë–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω
üåê Telegram Bot API Server: –ê–∫—Ç–∏–≤–µ–Ω
üéµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ: –î–æ—Å—Ç—É–ø–Ω–∞
üé• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ: –î–æ—Å—Ç—É–ø–Ω–∞
üß† –ò–ò —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: –ü–æ–¥–∫–ª—é—á–µ–Ω–∞
üìù –ò–ò —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ê–∫—Ç–∏–≤–Ω–æ

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 2 –ì–ë
‚Ä¢ –ú–∞–∫—Å. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 4 —á–∞—Å–∞
‚Ä¢ –§–æ—Ä–º–∞—Ç—ã –≤–∏–¥–µ–æ: 9 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö
‚Ä¢ –§–æ—Ä–º–∞—Ç—ã –∞—É–¥–∏–æ: 8 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö

–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ"""

    await update.message.reply_text(status_text, parse_mode='Markdown')
    try:
        log_telegram_event(
            update.effective_user,
            "command_status",
            {"chat_id": update.effective_chat.id if update.effective_chat else None},
        )
    except Exception:  # noqa: BLE001
        logger.debug("Failed to log /status event", exc_info=True)

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Ñ–∞–π–ª–æ–≤)"""
    document = update.message.document

    if not document:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size_mb = document.file_size / (1024 * 1024) if document.file_size else 0

    if file_size_mb > MAX_FILE_SIZE_MB:
        await update.message.reply_text(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size_mb:.1f} –ú–ë\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE_MB} –ú–ë"
        )
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    file_extension = Path(document.file_name).suffix.lower() if document.file_name else ''

    if file_extension in VIDEO_FORMATS:
        _schedule_background_task(
            context,
            process_video_file(update, context, document),
            description="document_video_processing",
        )
    elif file_extension in AUDIO_FORMATS:
        _schedule_background_task(
            context,
            process_audio_file(update, context, document),
            description="document_audio_processing",
        )
    else:
        await update.message.reply_text(
            f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}\n\n"
            f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            f"üé• –í–∏–¥–µ–æ: {', '.join(sorted(VIDEO_FORMATS))}\n"
            f"üéµ –ê—É–¥–∏–æ: {', '.join(sorted(AUDIO_FORMATS))}"
        )

async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤"""
    video = update.message.video

    if not video:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size_mb = video.file_size / (1024 * 1024) if video.file_size else 0

    if file_size_mb > MAX_FILE_SIZE_MB:
        await update.message.reply_text(
            f"‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {file_size_mb:.1f} –ú–ë\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE_MB} –ú–ë"
        )
        return

    _schedule_background_task(
        context,
        process_video_file(update, context, video),
        description="video_processing",
    )

async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤"""
    audio = update.message.audio or update.message.voice

    if not audio:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size_mb = audio.file_size / (1024 * 1024) if audio.file_size else 0

    if file_size_mb > MAX_FILE_SIZE_MB:
        await update.message.reply_text(
            f"‚ùå –ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {file_size_mb:.1f} –ú–ë\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE_MB} –ú–ë"
        )
        return

    _schedule_background_task(
        context,
        process_audio_file(update, context, audio),
        description="audio_processing",
    )

async def process_video_file(update: Update, context: ContextTypes.DEFAULT_TYPE, video_file, beta_enabled: bool | None = None) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª"""
    try:
        file_size_mb = video_file.file_size / (1024 * 1024) if video_file.file_size else 0
        filename = getattr(video_file, 'file_name', f"video_{video_file.file_id}")
        if beta_enabled is None:
            beta_enabled = await _is_beta_enabled(update)

        # –í –≥—Ä—É–ø–ø–∞—Ö –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        is_group = update.effective_chat and update.effective_chat.type in ("group", "supergroup")
        status_msg = None
        if not is_group:
            status_msg = await update.message.reply_text(
                f"üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ: {filename}\n"
                f"üìä –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë\n\n"
                f"‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª..."
            )

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
        video_path = VIDEOS_DIR / f"telegram_video_{video_file.file_id}.mp4"
        audio_path = AUDIO_DIR / f"telegram_audio_{video_file.file_id}.wav"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
        if status_msg:
            await status_msg.edit_text(
                f"üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ: {filename}\n"
                f"üìä –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë\n\n"
                f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)"
            )

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –Ω–∞—à—É —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        logger.info(f"üì• –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ {filename} —Ä–∞–∑–º–µ—Ä–æ–º {file_size_mb:.1f} –ú–ë")

        success = await download_large_file(
            bot_token=BOT_TOKEN,
            file_id=video_file.file_id,
            destination=video_path
        )

        if not success:
            if status_msg:
                await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
            return

        logger.info(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if status_msg:
            await status_msg.edit_text(
                f"üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ: {filename}\n"
                f"üìä –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë\n\n"
                f"üéµ –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ..."
            )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
        if not await extract_audio_from_video(video_path, audio_path):
            if status_msg:
                await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ")
            return

        # –°–∂–∏–º–∞–µ–º –∞—É–¥–∏–æ
        if status_msg:
            await status_msg.edit_text(
                f"üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ: {filename}\n"
                f"üìä –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë\n\n"
                f"üóúÔ∏è –°–∂–∏–º–∞—é –∞—É–¥–∏–æ..."
            )

        compressed_audio = await compress_audio_for_api(audio_path)

        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
        if status_msg:
            await status_msg.edit_text(
                f"üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ: {filename}\n"
                f"üìä –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë\n\n"
                f"ü§ñ –°–æ–∑–¥–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é..."
            )

        transcript = await transcribe_audio(compressed_audio)

        if not transcript or not transcript.strip():
            logger.error(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è –≤–∏–¥–µ–æ {filename}")
            error_text = (
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ. –°–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. "
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç."
            )
            if status_msg:
                await status_msg.edit_text(error_text)
            else:
                await update.message.reply_text(error_text)
            try:
                video_path.unlink(missing_ok=True)
                audio_path.unlink(missing_ok=True)
                comp_path = Path(compressed_audio)
                if comp_path != audio_path:
                    comp_path.unlink(missing_ok=True)
            except Exception as clear_exc:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ (video): {clear_exc}")
            return

        if AGENT_FIRST and transcript and transcript.strip():
            if status_msg:
                await status_msg.edit_text("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞! –û—Ç–∫—Ä—ã–≤–∞—é –¥–∏–∞–ª–æ–≥‚Ä¶")
            await ingest_and_prompt(update, context, transcript, source='video')
            try:
                video_path.unlink(missing_ok=True)
                audio_path.unlink(missing_ok=True)
                comp_path = Path(compressed_audio)
                if comp_path != audio_path:
                    comp_path.unlink(missing_ok=True)
            except Exception as clear_exc:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (agent video): {clear_exc}")
            return
        if beta_enabled and transcript and transcript.strip() and not AGENT_FIRST:
            if status_msg:
                await status_msg.edit_text("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞! –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é –æ–±—Ä–∞–±–æ—Ç–∫–∏‚Ä¶")
            await beta_process_text(update, context, transcript, source='video')
            try:
                video_path.unlink(missing_ok=True)
                audio_path.unlink(missing_ok=True)
                comp_path = Path(compressed_audio)
                if comp_path != audio_path:
                    comp_path.unlink(missing_ok=True)
            except Exception as clear_exc:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (beta video): {clear_exc}")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ (OpenRouter/DeepSeek) —Å –ª–æ–∫–∞–ª—å–Ω—ã–º fallback
        logger.info("–ó–∞–ø—É—Å–∫–∞—é LLM-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (video)")
        formatted_transcript = None
        try:
            if transcript:
                formatted_transcript = await format_transcript_with_llm(transcript)
        except Exception as e:
            logger.warning(f"LLM-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (video) –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        if not formatted_transcript and transcript:
            logger.info("LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω/–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á ‚Äî –ø—Ä–∏–º–µ–Ω—è—é –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            formatted_transcript = _basic_local_format(transcript)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if formatted_transcript and formatted_transcript.strip():
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é (—É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é)
            transcript_path = TRANSCRIPTIONS_DIR / f"telegram_transcript_{video_file.file_id}.txt"
            transcript_path.write_text(formatted_transcript or "", encoding='utf-8')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            try:
                from transkribator_modules.db.database import SessionLocal, UserService, TranscriptionService
                from transkribator_modules.db.database import get_media_duration

                db = SessionLocal()
                try:
                    user_service = UserService(db)
                    transcription_service = TranscriptionService(db)

                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = user_service.get_or_create_user(
                        telegram_id=update.effective_user.id,
                        username=update.effective_user.username,
                        first_name=update.effective_user.first_name,
                        last_name=update.effective_user.last_name
                    )

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    can_use, limit_message = user_service.check_usage_limit(user)
                    await _notify_free_quota_if_needed(update, context, user)
                    if not can_use:
                        if status_msg:
                            await status_msg.edit_text(f"‚ùå {limit_message}")
                        else:
                            await update.message.reply_text(f"‚ùå {limit_message}")
                        return

                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
                    duration_minutes = get_media_duration(str(audio_path))

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –±–∞–∑—É
                    transcription_service.save_transcription(
                        user=user,
                        filename=filename,
                        file_size_mb=file_size_mb,
                        audio_duration_minutes=duration_minutes,
                        raw_transcript=transcript or "",
                        formatted_transcript=formatted_transcript or "",
                        processing_time=0.0,
                        transcription_service="deepinfra",
                        formatting_service="llm" if formatted_transcript != transcript else "none"
                    )

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    user_service.add_usage(user, duration_minutes)

                    logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
                    try:
                        log_event(
                            user,
                            "video_transcription_saved",
                            {
                                "filename": filename,
                                "duration_minutes": duration_minutes,
                                "file_size_mb": file_size_mb,
                            },
                        )
                    except Exception:
                        logger.debug("Failed to log video transcription event", exc_info=True)

                finally:
                    db.close()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –ø—É—Å—Ç–∞—è
        if not transcript or not transcript.strip():
            if status_msg:
                await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if status_msg:
            await status_msg.edit_text("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞!")

        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        clean_transcript = clean_html_entities((formatted_transcript or ""))
        full_message = f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n\n{clean_transcript}\n\n@CyberKitty19_bot"

        logger.info(f"–î–ª–∏–Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {len(transcript or '')} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"–î–ª–∏–Ω–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {len(formatted_transcript or '')} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"–î–ª–∏–Ω–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(full_message)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏—Å—Ö–æ–¥–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –æ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if False:
            logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (disabled)")
            await update.message.reply_text(full_message)
        else:
            # –ï—Å–ª–∏ –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º .docx
            logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∫–∞–∫ .docx —Ñ–∞–π–ª")
            from docx import Document
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            TRANSCRIPTIONS_DIR.mkdir(parents=True, exist_ok=True)
            docx_path = TRANSCRIPTIONS_DIR / f"transcript_{Path(filename).stem}.docx"
            document = Document()
            for line in (formatted_transcript or "").split('\n'):
                document.add_paragraph(line)
            document.save(docx_path)
            logger.info(f"–°–æ–∑–¥–∞–Ω .docx —Ñ–∞–π–ª: {docx_path}")
            with open(docx_path, 'rb') as f:
                await update.message.reply_document(
                    document=f,
                    filename=docx_path.name,
                    caption="üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞!\n\n@CyberKitty19_bot"
                )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
        if not is_group:
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = [
                [
                    InlineKeyboardButton("üîß –û–±—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data=f"process_transcript_{update.effective_user.id}"),
                    InlineKeyboardButton("üì§ –ü—Ä–∏—Å–ª–∞—Ç—å –µ—â—ë", callback_data=f"send_more_{update.effective_user.id}")
                ],
                [
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"main_menu_{update.effective_user.id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await update.message.reply_text(
                "–ß—Ç–æ –¥–∞–ª—å—à–µ –±—É–¥–µ–º —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å? ü§î",
                reply_markup=reply_markup
            )

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            video_path.unlink(missing_ok=True)
            audio_path.unlink(missing_ok=True)
            if compressed_audio != audio_path:
                compressed_audio.unlink(missing_ok=True)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")

    except Exception as e:
        error_msg = str(e)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")

        # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        if "timed out" in error_msg.lower() or "timeout" in error_msg.lower():
            await update.message.reply_text(
                f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞\n\n"
                f"–§–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º {file_size_mb:.1f} –ú–ë —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è.\n"
                f"–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∏–∑-–∑–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏–ª–∏ –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–∞.\n\n"
                f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–∞–π–ª –ø–æ–º–µ–Ω—å—à–µ (–¥–æ 100 –ú–ë)\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n"
                f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
            )
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {error_msg}")

async def process_audio_file(update: Update, context: ContextTypes.DEFAULT_TYPE, audio_file, beta_enabled: bool | None = None) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª"""
    try:
        file_size_mb = audio_file.file_size / (1024 * 1024) if audio_file.file_size else 0
        filename = getattr(audio_file, 'file_name', f"audio_{audio_file.file_id}")
        if beta_enabled is None:
            beta_enabled = await _is_beta_enabled(update)

        # –í –≥—Ä—É–ø–ø–∞—Ö –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        is_group = update.effective_chat and update.effective_chat.type in ("group", "supergroup")
        status_msg = None
        if not is_group:
            status_msg = await update.message.reply_text(
                f"üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ: {filename}\n"
                f"üìä –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë\n\n"
                f"‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª..."
            )

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å
        audio_path = AUDIO_DIR / f"telegram_audio_{audio_file.file_id}.mp3"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
        if status_msg:
            await status_msg.edit_text(
                f"üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ: {filename}\n"
                f"üìä –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë\n\n"
                f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)"
            )

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –Ω–∞—à—É —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        logger.info(f"üì• –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ {filename} —Ä–∞–∑–º–µ—Ä–æ–º {file_size_mb:.1f} –ú–ë")

        success = await download_large_file(
            bot_token=BOT_TOKEN,
            file_id=audio_file.file_id,
            destination=audio_path
        )

        if not success:
            if status_msg:
                await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
            return

        logger.info(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω")

        # –°–∂–∏–º–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if status_msg:
            await status_msg.edit_text(
                f"üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ: {filename}\n"
                f"üìä –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë\n\n"
                f"üóúÔ∏è –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∞—É–¥–∏–æ..."
            )

        processed_audio = await compress_audio_for_api(audio_path)

        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
        if status_msg:
            await status_msg.edit_text(
                f"üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ: {filename}\n"
                f"üìä –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë\n\n"
                f"ü§ñ –°–æ–∑–¥–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é..."
            )

        transcript = await transcribe_audio(processed_audio)

        if not transcript or not transcript.strip():
            logger.error(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è –∞—É–¥–∏–æ {filename}")
            error_text = (
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ. –°–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. "
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç."
            )
            if status_msg:
                await status_msg.edit_text(error_text)
            else:
                await update.message.reply_text(error_text)
            try:
                audio_path.unlink(missing_ok=True)
                proc_path = Path(processed_audio)
                if proc_path != audio_path:
                    proc_path.unlink(missing_ok=True)
            except Exception as clear_exc:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ (audio): {clear_exc}")
            return

        if AGENT_FIRST and transcript and transcript.strip():
            if status_msg:
                await status_msg.edit_text("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞! –û—Ç–∫—Ä—ã–≤–∞—é –¥–∏–∞–ª–æ–≥‚Ä¶")
            await ingest_and_prompt(update, context, transcript, source='audio')
            try:
                audio_path.unlink(missing_ok=True)
                proc_path = Path(processed_audio)
                if proc_path != audio_path:
                    proc_path.unlink(missing_ok=True)
            except Exception as clear_exc:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (agent audio): {clear_exc}")
            return
        if beta_enabled and transcript and transcript.strip() and not AGENT_FIRST:
            if status_msg:
                await status_msg.edit_text("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞! –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é –æ–±—Ä–∞–±–æ—Ç–∫–∏‚Ä¶")
            await beta_process_text(update, context, transcript, source='audio')
            try:
                audio_path.unlink(missing_ok=True)
                proc_path = Path(processed_audio)
                if proc_path != audio_path:
                    proc_path.unlink(missing_ok=True)
            except Exception as clear_exc:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (beta audio): {clear_exc}")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ (OpenRouter/DeepSeek) —Å –ª–æ–∫–∞–ª—å–Ω—ã–º fallback
        logger.info("–ó–∞–ø—É—Å–∫–∞—é LLM-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (audio)")
        formatted_transcript = None
        try:
            if transcript:
                formatted_transcript = await format_transcript_with_llm(transcript)
        except Exception as e:
            logger.warning(f"LLM-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (audio) –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        if not formatted_transcript and transcript:
            logger.info("LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω/–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á ‚Äî –ø—Ä–∏–º–µ–Ω—è—é –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            formatted_transcript = _basic_local_format(transcript)

        if formatted_transcript and formatted_transcript.strip():
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é (—É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é)
            transcript_path = TRANSCRIPTIONS_DIR / f"telegram_transcript_{audio_file.file_id}.txt"
            transcript_path.write_text(formatted_transcript or "", encoding='utf-8')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            try:
                from transkribator_modules.db.database import SessionLocal, UserService, TranscriptionService
                from transkribator_modules.db.database import get_media_duration

                db = SessionLocal()
                try:
                    user_service = UserService(db)
                    transcription_service = TranscriptionService(db)

                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = user_service.get_or_create_user(
                        telegram_id=update.effective_user.id,
                        username=update.effective_user.username,
                        first_name=update.effective_user.first_name,
                        last_name=update.effective_user.last_name
                    )

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    can_use, limit_message = user_service.check_usage_limit(user)
                    await _notify_free_quota_if_needed(update, context, user)
                    if not can_use:
                        if status_msg:
                            await status_msg.edit_text(f"‚ùå {limit_message}")
                        else:
                            await update.message.reply_text(f"‚ùå {limit_message}")
                        return

                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
                    duration_minutes = get_media_duration(str(audio_path))

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –±–∞–∑—É
                    transcription_service.save_transcription(
                        user=user,
                        filename=filename,
                        file_size_mb=file_size_mb,
                        audio_duration_minutes=duration_minutes,
                        raw_transcript=transcript or "",
                        formatted_transcript=formatted_transcript or "",
                        processing_time=0.0,
                        transcription_service="deepinfra",
                        formatting_service="llm" if formatted_transcript != transcript else "none"
                    )

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    user_service.add_usage(user, duration_minutes)

                    logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
                    try:
                        log_event(
                            user,
                            "audio_transcription_saved",
                            {
                                "filename": filename,
                                "duration_minutes": duration_minutes,
                                "file_size_mb": file_size_mb,
                            },
                        )
                    except Exception:
                        logger.debug("Failed to log audio transcription event", exc_info=True)

                finally:
                    db.close()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if status_msg:
                await status_msg.edit_text("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞!")

            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            clean_transcript = clean_html_entities(formatted_transcript or "")
            full_message = f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n\n{clean_transcript}\n\n@CyberKitty19_bot"

            logger.info(f"–î–ª–∏–Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–∞—É–¥–∏–æ): {len(transcript or '')} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"–î–ª–∏–Ω–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–∞—É–¥–∏–æ): {len(formatted_transcript or '')} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"–î–ª–∏–Ω–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∞—É–¥–∏–æ): {len(full_message)} —Å–∏–º–≤–æ–ª–æ–≤")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏—Å—Ö–æ–¥–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –æ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if False:
                logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∞—É–¥–∏–æ, disabled)")
                await update.message.reply_text(full_message)
            else:
                # –ï—Å–ª–∏ –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º .docx
                logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∫–∞–∫ .docx —Ñ–∞–π–ª (–∞—É–¥–∏–æ)")
                from docx import Document
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                TRANSCRIPTIONS_DIR.mkdir(parents=True, exist_ok=True)
                docx_path = TRANSCRIPTIONS_DIR / f"transcript_{Path(filename).stem}.docx"
                document = Document()
                for line in (formatted_transcript or "").split('\n'):
                    document.add_paragraph(line)
                document.save(docx_path)
                logger.info(f"–°–æ–∑–¥–∞–Ω .docx —Ñ–∞–π–ª (–∞—É–¥–∏–æ): {docx_path}")
                with open(docx_path, 'rb') as f:
                    await update.message.reply_document(
                        document=f,
                        filename=docx_path.name,
                        caption="üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞!\n\n@CyberKitty19_bot"
                    )

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
            if not is_group:
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                keyboard = [
                    [
                        InlineKeyboardButton("üîß –û–±—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data=f"process_transcript_{update.effective_user.id}"),
                        InlineKeyboardButton("üì§ –ü—Ä–∏—Å–ª–∞—Ç—å –µ—â—ë", callback_data=f"send_more_{update.effective_user.id}")
                    ],
                    [
                        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"main_menu_{update.effective_user.id}")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await update.message.reply_text(
                    "–ß—Ç–æ –¥–∞–ª—å—à–µ –±—É–¥–µ–º —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å? ü§î",
                    reply_markup=reply_markup
                )
        else:
            if status_msg:
                await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é")

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            audio_path.unlink(missing_ok=True)
            if processed_audio != audio_path:
                processed_audio.unlink(missing_ok=True)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")

    except Exception as e:
        error_msg = str(e)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")

        # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        if "timed out" in error_msg.lower() or "timeout" in error_msg.lower():
            await update.message.reply_text(
                f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞\n\n"
                f"–§–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º {file_size_mb:.1f} –ú–ë —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è.\n"
                f"–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∏–∑-–∑–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏–ª–∏ –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–∞.\n\n"
                f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–∞–π–ª –ø–æ–º–µ–Ω—å—à–µ (–¥–æ 100 –ú–ë)\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n"
                f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
            )
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {error_msg}")

# –£–±—Ä–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å—ã—Ä–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é ‚Äî —Å–æ—Å—Ä–µ–¥–æ—Ç–∞—á–∏–≤–∞–µ–º—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –≤—ã–¥–∞—á–µ


def _extract_youtube_links(text: str) -> list[str]:
    if not text:
        return []
    return [match.group(1) for match in _YOUTUBE_URL_RE.finditer(text)]


async def _handle_youtube_link(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    url: str,
    beta_enabled: bool,
) -> None:
    status_msg = None
    artifacts: _YoutubeArtifacts | None = None
    is_group = update.effective_chat and update.effective_chat.type in ("group", "supergroup")
    try:
        if not is_group:
            status_msg = await update.message.reply_text(
                "üé¨ –ù–∞—à—ë–ª —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, –≥–æ—Ç–æ–≤–ª—é –æ–±—Ä–∞–±–æ—Ç–∫—É‚Ä¶",
                disable_web_page_preview=True,
            )
    except Exception as exc:  # noqa: BLE001
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ YouTube", extra={"error": str(exc)})

    try:
        artifacts = await _process_youtube_ingest(update, url, status_msg)
        transcript = (artifacts.transcript or "").strip()
        summary = artifacts.title or "YouTube –≤–∏–¥–µ–æ"
        filename = artifacts.video_path.name
        file_size_mb = artifacts.video_path.stat().st_size / (1024 * 1024)

        if not transcript:
            warning_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ –∏–∑ —Ä–æ–ª–∏–∫–∞ –∏–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø—É—Å—Ç–∞—è."
            if status_msg:
                await _safe_edit_message(status_msg, warning_text)
            else:
                await update.message.reply_text(warning_text)
            return

        if AGENT_FIRST:
            if status_msg:
                await status_msg.edit_text("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞! –û—Ç–∫—Ä—ã–≤–∞—é –¥–∏–∞–ª–æ–≥‚Ä¶")
            await ingest_and_prompt(update, context, transcript, source='video')
            return

        if beta_enabled:
            if status_msg:
                await status_msg.edit_text("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞! –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é –æ–±—Ä–∞–±–æ—Ç–∫–∏‚Ä¶")
            await beta_process_text(update, context, transcript, source='video')
            return

        logger.info("–ó–∞–ø—É—Å–∫–∞—é LLM-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (youtube)")
        formatted_transcript = None
        try:
            formatted_transcript = await format_transcript_with_llm(transcript)
        except Exception as exc:  # noqa: BLE001
            logger.warning("LLM-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (youtube) –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: %s", exc)
        if not formatted_transcript:
            logger.info("LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω/–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á ‚Äî –ø—Ä–∏–º–µ–Ω—è—é –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è YouTube")
            formatted_transcript = _basic_local_format(transcript)

        if formatted_transcript and formatted_transcript.strip():
            transcript_path = TRANSCRIPTIONS_DIR / f"youtube_transcript_{artifacts.video_id}.txt"
            transcript_path.write_text(formatted_transcript, encoding='utf-8')

            try:
                from transkribator_modules.db.database import (
                    SessionLocal as _SessionLocal,
                    TranscriptionService,
                    get_media_duration,
                )

                db = _SessionLocal()
                try:
                    user_service = UserService(db)
                    transcription_service = TranscriptionService(db)
                    user = user_service.get_or_create_user(
                        telegram_id=update.effective_user.id,
                        username=update.effective_user.username,
                        first_name=update.effective_user.first_name,
                        last_name=update.effective_user.last_name,
                    )

                    can_use, limit_message = user_service.check_usage_limit(user)
                    await _notify_free_quota_if_needed(update, context, user)
                    if not can_use:
                        if status_msg:
                            await status_msg.edit_text(f"‚ùå {limit_message}")
                        else:
                            await update.message.reply_text(f"‚ùå {limit_message}")
                        return

                    duration_minutes = get_media_duration(str(artifacts.audio_path))
                    transcription_service.save_transcription(
                        user=user,
                        filename=filename,
                        file_size_mb=file_size_mb,
                        audio_duration_minutes=duration_minutes,
                        raw_transcript=transcript,
                        formatted_transcript=formatted_transcript,
                        processing_time=0.0,
                        transcription_service="deepinfra",
                        formatting_service="llm" if formatted_transcript != transcript else "none",
                    )
                    user_service.add_usage(user, duration_minutes)
                    logger.info(
                        "‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è YouTube —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s",
                        user.telegram_id,
                    )
                finally:
                    db.close()
            except Exception as exc:  # noqa: BLE001
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ YouTube: %s", exc)

            if status_msg:
                await status_msg.edit_text("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞!")

            clean_text = clean_html_entities(formatted_transcript)
            logger.info("–î–ª–∏–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ YouTube: %s —Å–∏–º–≤–æ–ª–æ–≤", len(formatted_transcript))

            from docx import Document

            TRANSCRIPTIONS_DIR.mkdir(parents=True, exist_ok=True)
            docx_path = TRANSCRIPTIONS_DIR / f"transcript_youtube_{artifacts.video_id}.docx"
            document = Document()
            document.add_heading(summary, level=1)
            document.add_paragraph(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {url}")
            document.add_paragraph("")
            for line in clean_text.splitlines():
                document.add_paragraph(line)
            document.save(docx_path)

            with open(docx_path, 'rb') as handle:
                await update.message.reply_document(
                    document=handle,
                    filename=docx_path.name,
                    caption="üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞!\n\n@CyberKitty19_bot",
                )

            if not is_group:
                keyboard = [
                    [
                        InlineKeyboardButton("üîß –û–±—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data=f"process_transcript_{update.effective_user.id}"),
                        InlineKeyboardButton("üì§ –ü—Ä–∏—Å–ª–∞—Ç—å –µ—â—ë", callback_data=f"send_more_{update.effective_user.id}"),
                    ],
                    [
                        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"main_menu_{update.effective_user.id}"),
                    ],
                ]
                await update.message.reply_text(
                    "–ß—Ç–æ –¥–∞–ª—å—à–µ –±—É–¥–µ–º —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å? ü§î",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                )
        else:
            message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è YouTube –≤–∏–¥–µ–æ."
            if status_msg:
                await status_msg.edit_text(message)
            else:
                await update.message.reply_text(message)
    except Exception as exc:  # noqa: BLE001
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å YouTube —Å—Å—ã–ª–∫—É",
            extra={"error": str(exc), "url": url, "user_id": update.effective_user.id},
        )
        error_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."
        if status_msg:
            await _safe_edit_message(status_msg, error_text)
        else:
            await update.message.reply_text(error_text)
    finally:
        if artifacts:
            _cleanup_workspace(artifacts.workspace)


async def _process_youtube_ingest(
    update: Update,
    url: str,
    status_msg,
) -> _YoutubeArtifacts:
    workspace = Path(tempfile.mkdtemp(prefix="youtube_ingest_"))
    try:
        await _safe_edit_message(status_msg, "üì• –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ —Å YouTube‚Ä¶")
        download_path, info = await asyncio.to_thread(_download_youtube_media, url, workspace)

        await _safe_edit_message(status_msg, "üéõÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∞—É–¥–∏–æ‚Ä¶")
        wav_path = await asyncio.to_thread(_convert_to_wav, download_path)

        await _safe_edit_message(status_msg, "üó£Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∞—É–¥–∏–æ‚Ä¶")
        transcript_raw = await transcribe_audio(str(wav_path))
        transcript = (transcript_raw or "").strip()
        title = (info.get("title") or "").strip() or "YouTube –≤–∏–¥–µ–æ"
        video_id = info.get("id") or download_path.stem
        return _YoutubeArtifacts(
            video_path=download_path,
            audio_path=wav_path,
            transcript=transcript,
            title=title,
            video_id=video_id,
            workspace=workspace,
            info=info or {},
        )
    except Exception:
        _cleanup_workspace(workspace)
        raise


def _download_youtube_media(url: str, workspace: Path) -> tuple[Path, dict]:
    try:
        import yt_dlp  # type: ignore[import]
    except ImportError as exc:  # pragma: no cover - –≤–Ω–µ—à–Ω—è—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
        raise RuntimeError("–ü–∞–∫–µ—Ç yt-dlp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫ YouTube.") from exc

    workspace.mkdir(parents=True, exist_ok=True)
    output_template = workspace / "%(id)s.%(ext)s"
    ydl_opts = {
        "format": "bestaudio/best",
        "outtmpl": str(output_template),
        "quiet": True,
        "no_warnings": True,
        "noplaylist": True,
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=True)
        filename = ydl.prepare_filename(info)
    file_path = Path(filename)
    if not file_path.exists():
        # yt_dlp –º–æ–∂–µ—Ç —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –≤ workspace –ø–æ–¥ –¥—Ä—É–≥–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        candidates = sorted(workspace.glob(f"{info.get('id', '')}.*"))
        if not candidates:
            raise FileNotFoundError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube")
        file_path = candidates[0]
    return file_path, info


def _convert_to_wav(input_path: Path) -> Path:
    output_path = input_path.with_suffix(".wav")
    cmd = [
        "ffmpeg",
        "-y",
        "-i",
        str(input_path),
        "-ac",
        "1",
        "-ar",
        "16000",
        str(output_path),
    ]
    subprocess.run(cmd, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return output_path


def _cleanup_workspace(path: Path) -> None:
    for item in sorted(path.glob("**/*"), reverse=True):
        try:
            if item.is_file() or item.is_symlink():
                item.unlink()
            elif item.is_dir():
                item.rmdir()
        except FileNotFoundError:
            continue
    try:
        path.rmdir()
    except Exception:  # noqa: BLE001
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é YouTube", exc_info=True)


async def _safe_edit_message(message, text: str) -> None:
    if not message:
        return
    try:
        await message.edit_text(text, disable_web_page_preview=True)
    except Exception as exc:  # noqa: BLE001
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", extra={"error": str(exc)})

async def _is_beta_enabled(update: Update) -> bool:
    if not FEATURE_BETA_MODE:
        return False
    db = SessionLocal()
    try:
        user_service = UserService(db)
        db_user = user_service.get_or_create_user(
            telegram_id=update.effective_user.id,
            username=update.effective_user.username,
            first_name=update.effective_user.first_name,
            last_name=update.effective_user.last_name,
        )
        return user_service.is_beta_enabled(db_user)
    except Exception as exc:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ—Ç–∞-—Ä–µ–∂–∏–º: {exc}")
        return False
    finally:
        db.close()


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Bot API Server."""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not update.message:
        logger.warning("–ü–æ–ª—É—á–µ–Ω update –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
    is_group = update.effective_chat and update.effective_chat.type in ("group", "supergroup")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–µ—Ç–∞-—Ä–µ–∂–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö)
    beta_enabled = False
    if not is_group:
        beta_enabled = await _is_beta_enabled(update)

    # –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç –∂–¥—ë—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é ‚Äî –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ä–µ–ø–ª–∏–∫—É
    if AGENT_FIRST and not is_group and update.message.text and context.user_data.get('agent_waiting_instruction'):
        await handle_instruction(update, context)
        return

    text_content = (update.message.text or update.message.caption or "").strip()

    # –ö–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–µ–ª–µ–≥—Ä–∞–º–æ–º –æ—Ç–¥–µ–ª—å–Ω–æ, –ø–æ—ç—Ç–æ–º—É –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "@".
    if text_content.startswith("/"):
        return

    if text_content.lower().startswith("promo"):
        parts = text_content.split()
        if parts:
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ "promo CODE", —Ç–∞–∫ –∏ "PROMO CODE" (–±–µ–∑ —Å–ª–µ—à–∞).
            context.args = parts[1:]
            await promo_codes_command(update, context)
            return

    if FEATURE_BETA_MODE and beta_enabled and text_content and not AGENT_FIRST:
        youtube_links = _extract_youtube_links(text_content)
        if youtube_links:
            logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube, –∑–∞–ø—É—Å–∫–∞—é –±–µ—Ç–∞-–∏–Ω–≥–µ—Å—Ç")
            await _handle_youtube_link(update, context, youtube_links[0], beta_enabled)
            return
        logger.info("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –±–µ—Ç–∞-—Ä–µ–∂–∏–º")
        await handle_beta_update(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
    if update.message.video:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        try:
            log_telegram_event(
                update.effective_user,
                "message_video",
                {
                    "chat_id": chat_id,
                    "file_id": update.message.video.file_id,
                    "file_size": update.message.video.file_size,
                    "caption": update.message.caption,
                },
            )
        except Exception:
            logger.debug("Failed to log video message", exc_info=True)
        _schedule_background_task(
            context,
            process_video_file(update, context, update.message.video, beta_enabled=beta_enabled),
            description="message_video_processing",
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
    if update.message.audio:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        try:
            log_telegram_event(
                update.effective_user,
                "message_audio",
                {
                    "chat_id": chat_id,
                    "file_id": update.message.audio.file_id,
                    "file_size": update.message.audio.file_size,
                    "duration": update.message.audio.duration,
                    "caption": update.message.caption,
                },
            )
        except Exception:
            logger.debug("Failed to log audio message", exc_info=True)
        _schedule_background_task(
            context,
            process_audio_file(update, context, update.message.audio, beta_enabled=beta_enabled),
            description="message_audio_processing",
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if update.message.voice:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        try:
            log_telegram_event(
                update.effective_user,
                "message_voice",
                {
                    "chat_id": chat_id,
                    "file_id": update.message.voice.file_id,
                    "file_size": update.message.voice.file_size,
                    "duration": update.message.voice.duration,
                },
            )
        except Exception:
            logger.debug("Failed to log voice message", exc_info=True)
        _schedule_background_task(
            context,
            process_audio_file(update, context, update.message.voice, beta_enabled=beta_enabled),
            description="voice_processing",
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤–∏–¥–µ–æ/–∞—É–¥–∏–æ —Ñ–∞–π–ª—ã)
    if update.message.document:
        document = update.message.document
        filename = document.file_name.lower() if document.file_name else ""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ
        if any(ext in filename for ext in VIDEO_FORMATS):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–∏–¥–µ–æ-–¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {filename}")
            try:
                log_telegram_event(
                    update.effective_user,
                    "message_document_video",
                    {
                        "chat_id": chat_id,
                        "file_id": document.file_id,
                        "file_size": document.file_size,
                        "file_name": document.file_name,
                    },
                )
            except Exception:
                logger.debug("Failed to log document video", exc_info=True)
            _schedule_background_task(
                context,
                process_video_file(update, context, document, beta_enabled=beta_enabled),
                description="message_document_video_processing",
            )
            return
        elif any(ext in filename for ext in AUDIO_FORMATS):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ-–¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {filename}")
            try:
                log_telegram_event(
                    update.effective_user,
                    "message_document_audio",
                    {
                        "chat_id": chat_id,
                        "file_id": document.file_id,
                        "file_size": document.file_size,
                        "file_name": document.file_name,
                    },
                )
            except Exception:
                logger.debug("Failed to log document audio", exc_info=True)
            _schedule_background_task(
                context,
                process_audio_file(update, context, document, beta_enabled=beta_enabled),
                description="message_document_audio_processing",
            )
            return

    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message.text:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–∞ –∏–ª–∏ —á—Ç–æ –±–æ—Ç —É–ø–æ–º—è–Ω—É—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        is_group = update.effective_chat and update.effective_chat.type in ("group", "supergroup")
        bot_mentioned = False

        if is_group:
            # –í –≥—Ä—É–ø–ø–∞—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ –±–æ—Ç
            bot_username = context.bot.username
            if bot_username and f"@{bot_username}" in update.message.text:
                bot_mentioned = True

        # –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö –∏–ª–∏ –µ—Å–ª–∏ –±–æ—Ç —É–ø–æ–º—è–Ω—É—Ç –≤ –≥—Ä—É–ø–ø–µ
        if not is_group or bot_mentioned:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            if context.user_data.get('waiting_for_task', False):
                await handle_transcript_processing_task(update, context)
            else:
                await update.message.reply_text(
                    "–ü—Ä–∏–≤–µ—Ç! üê± –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª, –∏ —è —Å–æ–∑–¥–∞–º –¥–ª—è —Ç–µ–±—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é!\n\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                    "üìπ –í–∏–¥–µ–æ: MP4, AVI, MOV, MKV –∏ –¥—Ä—É–≥–∏–µ\n"
                    "üéµ –ê—É–¥–∏–æ: MP3, WAV, M4A, OGG –∏ –¥—Ä—É–≥–∏–µ\n"
                    "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 2 –ì–ë\n"
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 4 —á–∞—Å–∞\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!"
                )
            try:
                log_telegram_event(
                    update.effective_user,
                    "message_text",
                    {
                        "chat_id": chat_id,
                        "text": update.message.text,
                    },
                )
            except Exception:
                logger.debug("Failed to log text message", exc_info=True)

async def handle_transcript_processing_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏."""
    try:
        user_id = update.effective_user.id
        task_description = update.message.text

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        context.user_data['waiting_for_task'] = False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await update.message.reply_text(
            "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–≤–æ–µ–π –∑–∞–¥–∞—á–µ...\n\n"
            "*—Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç*\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...",
            parse_mode='Markdown'
        )

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from transkribator_modules.db.database import SessionLocal, UserService, TranscriptionService

        db = SessionLocal()
        try:
            user_service = UserService(db)
            transcription_service = TranscriptionService(db)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = user_service.get_or_create_user(telegram_id=user_id)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            transcriptions = transcription_service.get_user_transcriptions(user, limit=1)

            if not transcriptions:
                await processing_msg.edit_text(
                    "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏!"
                )
                return

            latest_transcription = transcriptions[0]
            transcript_text = latest_transcription.formatted_transcript or latest_transcription.raw_transcript

            if not transcript_text:
                await processing_msg.edit_text("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø—É—Å—Ç–∞")
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–¥–∞—á–µ
            processed_text = await process_transcript_with_task(transcript_text, task_description)

            if not processed_text:
                await processing_msg.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é.\n\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = f"‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:**\n\n{processed_text}\n\n@CyberKitty19_bot"

            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
            if len(result_text) > 4000:
                from docx import Document
                from pathlib import Path

                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                TRANSCRIPTIONS_DIR.mkdir(parents=True, exist_ok=True)
                docx_path = TRANSCRIPTIONS_DIR / f"processed_transcript_{user_id}.docx"

                document = Document()
                document.add_heading("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è", 0)
                document.add_paragraph(f"–ó–∞–¥–∞—á–∞: {task_description}")
                document.add_paragraph("–†–µ–∑—É–ª—å—Ç–∞—Ç:")
                document.add_paragraph(processed_text)
                document.save(docx_path)

                with open(docx_path, 'rb') as f:
                    await update.message.reply_document(
                        document=f,
                        filename=f"processed_transcript.docx",
                        caption="‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ—Ç–æ–≤!\n\n@CyberKitty19_bot"
                    )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                docx_path.unlink(missing_ok=True)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ parse_mode —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å markdown entities
                await update.message.reply_text(result_text)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await processing_msg.edit_text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç)
            from transkribator_modules.bot.commands import personal_cabinet_command
            await personal_cabinet_command(update, context)

        finally:
            db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

async def process_transcript_with_task(transcript_text: str, task_description: str) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–¥–∞—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        from transkribator_modules.transcribe.transcriber_v4 import request_llm_response

        system_prompt = (
            "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —á–∏—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
            "–∏ –≤—ã–¥–∞–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ.")
        user_prompt = (
            "–ó–ê–î–ê–ß–ê: {task}\n\n"
            "–¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø:\n{transcript}\n\n"
            "–û–±—Ä–∞–±–æ—Ç–∞–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–¥–∞—á–µ. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, —Å–ª–µ–¥—É–π –µ–º—É —Ç–æ—á–Ω–æ."
        ).format(task=task_description, transcript=transcript_text)

        processed_text = None
        if request_llm_response:
            processed_text = await request_llm_response(system_prompt, user_prompt)

        if processed_text:
            cleaned_text = processed_text.strip().replace("*", "").replace("_", "").replace("`", "")
            if cleaned_text:
                return cleaned_text

        logger.warning("LLM –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏, –æ—Ç–¥–∞—é –∏—Å—Ö–æ–¥–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é")
        return (
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ –ò–ò. –í–æ—Ç –∏—Å—Ö–æ–¥–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n\n"
            f"{transcript_text}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –∑–∞–¥–∞—á–µ–π: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}"
