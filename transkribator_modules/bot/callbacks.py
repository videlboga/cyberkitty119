import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from transkribator_modules.config import logger
from transkribator_modules.db.database import SessionLocal, UserService, ApiKeyService, PromoCodeService
from transkribator_modules.db.models import ApiKey, PlanType
from transkribator_modules.bot.payments import handle_payment_callback

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    data = query.data
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö callback'–æ–≤
        if data == "show_payment_plans" or data.startswith("buy_plan_"):
            await handle_payment_callback(update, context)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å–∞–º–º–∞—Ä–∏
        elif data.startswith("detailed_summary_") or data.startswith("brief_summary_"):
            from transkribator_modules.bot.handlers import handle_summary_callback
            await handle_summary_callback(update, context)
            return

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        elif data == "personal_cabinet":
            from transkribator_modules.bot.commands import personal_cabinet_command
            await personal_cabinet_command(update, context)
        elif data == "show_tutorial":
            from transkribator_modules.bot.commands import show_tutorial
            await show_tutorial(update, context)
        elif data == "show_help":
            from transkribator_modules.bot.commands import start_command
            await start_command(update, context)
        elif data == "show_promo_codes":
            from transkribator_modules.bot.commands import promo_codes_command
            await promo_codes_command(update, context)
        elif data == "show_referral":
            from transkribator_modules.bot.commands import referral_command
            await referral_command(update, context)
        elif data == "add_to_group":
            await add_to_group_callback(query, user)
        elif data == "enter_promo_code":
            await enter_promo_code_callback(query, user)
        elif data == "show_plans":
            await show_plans_callback(query, user)
        elif data == "show_plans_from_cabinet":
            await show_plans_callback(query, user)
        elif data == "show_stats":
            await show_stats_callback(query, user)
        elif data == "show_api_keys":
            await show_api_keys_callback(query, user)
        elif data == "create_api_key":
            await create_api_key_callback(query, user)
        elif data == "list_api_keys":
            await list_api_keys_callback(query, user)
        elif data.startswith("delete_api_key_"):
            key_id = int(data.split("_")[-1])
            await delete_api_key_callback(query, user, key_id)
        elif data == "back_to_start":
            from transkribator_modules.bot.commands import start_command
            await start_command(update, context)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback, –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {data}")
            await query.edit_message_text("üôà –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. *—Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ –º–æ—Ä–≥–∞–µ—Ç*")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback handler: {e}")
        await query.edit_message_text(
            "üòø –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. *—Å–º—É—â–µ–Ω–Ω–æ –ø—Ä—è—á–µ—Ç –º–æ—Ä–¥–æ—á–∫—É*"
        )

async def enter_promo_code_callback(query, user):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    promo_text = """üéÅ **–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞**

–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø—Ä–æ–º–æ–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!

–ù–∞–ø—Ä–∏–º–µ—Ä: `–ö–û–¢–ò–ö2024`

üîç **–ì–¥–µ –Ω–∞–π—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã?**
‚Ä¢ –í —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö @kiryanovpro
‚Ä¢ –í —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫—Ü–∏—è—Ö
‚Ä¢ –ó–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ

üò∏ *–æ–∂–∏–¥–∞–µ—Ç —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º*"""

    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="personal_cabinet")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(promo_text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_plans_callback(query, user):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã"""
    from transkribator_modules.db.database import get_plans
    
    plans = get_plans()
    plans_text = "üí∞ **–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:**\n\n"
    
    for plan in plans:
        features = []
        if plan.features:
            try:
                features = json.loads(plan.features)
            except:
                features = [plan.features]
        
        minutes_text = f"{plan.minutes_per_month:.0f} –º–∏–Ω—É—Ç" if plan.minutes_per_month else "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ"
        price_text = f"{plan.price_rub:.0f} ‚ÇΩ" if plan.price_rub > 0 else "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
        
        plans_text += f"**{plan.display_name}** - {price_text}\n"
        plans_text += f"‚Ä¢ {minutes_text} –≤ –º–µ—Å—è—Ü\n"
        plans_text += f"‚Ä¢ –§–∞–π–ª—ã –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n"
        
        for feature in features:
            plans_text += f"‚Ä¢ {feature}\n"
        
        plans_text += f"_{plan.description}_\n\n"
    
    plans_text += "‚≠ê **–ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ Telegram Stars**"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –≤—ã–∑–≤–∞–Ω–æ –º–µ–Ω—é —Ç–∞—Ä–∏—Ñ–æ–≤
    back_callback = "personal_cabinet" if query.data == "show_plans_from_cabinet" else "show_help"
    keyboard = [
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –ø–ª–∞–Ω", callback_data="show_payment_plans")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(plans_text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_stats_callback(query, user):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    db = SessionLocal()
    try:
        user_service = UserService(db)
        from transkribator_modules.db.database import TranscriptionService
        transcription_service = TranscriptionService(db)
        
        db_user = user_service.get_or_create_user(telegram_id=user.id)
        usage_info = user_service.get_usage_info(db_user)
        
        recent_transcriptions = transcription_service.get_user_transcriptions(db_user, limit=5)
        
        stats_text = f"""üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
‚Ä¢ Telegram ID: `{user.id}`
‚Ä¢ –ü–ª–∞–Ω: {usage_info['plan_display_name']}
‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {db_user.created_at.strftime('%d.%m.%Y')}

üìà **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {usage_info['minutes_used_this_month']:.1f} –º–∏–Ω"""

        if usage_info['minutes_limit']:
            remaining = usage_info['minutes_remaining']
            percentage = usage_info['usage_percentage']
            stats_text += f"\n‚Ä¢ –õ–∏–º–∏—Ç: {usage_info['minutes_limit']:.0f} –º–∏–Ω"
            stats_text += f"\n‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {remaining:.1f} –º–∏–Ω ({100-percentage:.1f}%)"
        else:
            stats_text += f"\n‚Ä¢ –õ–∏–º–∏—Ç: –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ ‚ôæÔ∏è"
        
        stats_text += f"\n‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ: {usage_info['total_minutes_transcribed']:.1f} –º–∏–Ω"
        
        if recent_transcriptions:
            stats_text += f"\n\nüé¨ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:**"
            for i, trans in enumerate(recent_transcriptions, 1):
                date_str = trans.created_at.strftime('%d.%m %H:%M')
                stats_text += f"\n{i}. {trans.filename or '–í–∏–¥–µ–æ'} ({trans.audio_duration_minutes:.1f} –º–∏–Ω) - {date_str}"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="personal_cabinet")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')
        
    finally:
        db.close()

async def show_api_keys_callback(query, user):
    """–ü–æ–∫–∞–∑–∞—Ç—å API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    db = SessionLocal()
    try:
        user_service = UserService(db)
        db_user = user_service.get_or_create_user(telegram_id=user.id)
        plan = user_service.get_user_plan(db_user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ API
        if plan.name in [PlanType.FREE, PlanType.BASIC]:
            api_text = f"""üîë **API –¥–æ—Å—Ç—É–ø**

‚ùå API –¥–æ—Å—Ç—É–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–ª–∞–Ω–∞ "{plan.display_name}"

API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞—á–∏–Ω–∞—è —Å –ø–ª–∞–Ω–∞ "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π".

üí° –û–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ API."""
            
            keyboard = [
                [InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω—ã", callback_data="show_plans")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="personal_cabinet")]
            ]
        else:
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
            api_keys = db.query(ApiKey).filter(
                ApiKey.user_id == db_user.id,
                ApiKey.is_active == True
            ).all()
            
            api_text = f"""üîë **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏**

‚úÖ API –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø–ª–∞–Ω–∞ "{plan.display_name}"

**–í–∞—à–∏ API –∫–ª—é—á–∏:** ({len(api_keys)}/5)"""
            
            if api_keys:
                for i, key in enumerate(api_keys, 1):
                    last_used = key.last_used_at.strftime('%d.%m.%Y') if key.last_used_at else "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è"
                    limit_text = f"{key.minutes_limit:.0f} –º–∏–Ω" if key.minutes_limit else "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ"
                    api_text += f"\n{i}. {key.name}"
                    api_text += f"\n   ‚Ä¢ –õ–∏–º–∏—Ç: {limit_text}"
                    api_text += f"\n   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {key.minutes_used:.1f} –º–∏–Ω"
                    api_text += f"\n   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {last_used}"
            else:
                api_text += "\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç API –∫–ª—é—á–µ–π."
            
            api_text += f"\n\nüìñ **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API:**"
            api_text += f"\n–ë–∞–∑–æ–≤—ã–π URL: `http://localhost:8000`"
            api_text += f"\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: `Authorization: Bearer YOUR_API_KEY`"
            api_text += f"\n–≠–Ω–¥–ø–æ–∏–Ω—Ç: `POST /transcribe`"
            
            keyboard = []
            if len(api_keys) < 5:  # –õ–∏–º–∏—Ç 5 –∫–ª—é—á–µ–π
                keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á", callback_data="create_api_key")])
            
            if api_keys:
                keyboard.append([InlineKeyboardButton("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏", callback_data="list_api_keys")])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="personal_cabinet")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(api_text, reply_markup=reply_markup, parse_mode='Markdown')
        
    finally:
        db.close()

async def create_api_key_callback(query, user):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π API –∫–ª—é—á"""
    db = SessionLocal()
    try:
        user_service = UserService(db)
        api_key_service = ApiKeyService(db)
        
        db_user = user_service.get_or_create_user(telegram_id=user.id)
        plan = user_service.get_user_plan(db_user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        existing_keys = db.query(ApiKey).filter(
            ApiKey.user_id == db_user.id,
            ApiKey.is_active == True
        ).count()
        
        if existing_keys >= 5:
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç API –∫–ª—é—á–µ–π (5 —à—Ç—É–∫). –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–ª—é—á–∏.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_api_keys")
                ]])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á
        raw_key, api_key = api_key_service.generate_api_key(
            user=db_user,
            name=f"API Key {existing_keys + 1}"
        )
        
        success_text = f"""‚úÖ **API –∫–ª—é—á —Å–æ–∑–¥–∞–Ω!**

üîë **–í–∞—à –Ω–æ–≤—ã–π API –∫–ª—é—á:**
```
{raw_key}
```

‚ö†Ô∏è **–í–ê–ñ–ù–û:** –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ! –û–Ω –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω.

üìñ **–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
```bash
curl -X POST "http://localhost:8000/transcribe" \\
  -H "Authorization: Bearer {raw_key}" \\
  -F "file=@video.mp4"
```

üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–ª—é—á —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∫–ª—é—á–∏"""
        
        keyboard = [
            [InlineKeyboardButton("üìã –ú–æ–∏ –∫–ª—é—á–∏", callback_data="show_api_keys")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="personal_cabinet")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ API –∫–ª—é—á–∞: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ API –∫–ª—é—á–∞. *—Å–º—É—â–µ–Ω–Ω–æ –ø—Ä—è—á–µ—Ç –º–æ—Ä–¥–æ—á–∫—É*",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_api_keys")
            ]])
        )
    finally:
        db.close()

async def list_api_keys_callback(query, user):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ API –∫–ª—é—á–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    db = SessionLocal()
    try:
        user_service = UserService(db)
        db_user = user_service.get_or_create_user(telegram_id=user.id)
        
        api_keys = db.query(ApiKey).filter(
            ApiKey.user_id == db_user.id,
            ApiKey.is_active == True
        ).all()
        
        if not api_keys:
            await query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö API –∫–ª—é—á–µ–π.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_api_keys")
                ]])
            )
            return
        
        keys_text = "üîë **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏:**\n\n"
        keyboard = []
        
        for i, key in enumerate(api_keys, 1):
            created = key.created_at.strftime('%d.%m.%Y')
            last_used = key.last_used_at.strftime('%d.%m.%Y') if key.last_used_at else "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è"
            limit_text = f"{key.minutes_limit:.0f} –º–∏–Ω" if key.minutes_limit else "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ"
            
            keys_text += f"**{i}. {key.name}**\n"
            keys_text += f"‚Ä¢ –°–æ–∑–¥–∞–Ω: {created}\n"
            keys_text += f"‚Ä¢ –õ–∏–º–∏—Ç: {limit_text}\n"
            keys_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {key.minutes_used:.1f} –º–∏–Ω\n"
            keys_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {last_used}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
            keyboard.append([InlineKeyboardButton(
                f"üóë –£–¥–∞–ª–∏—Ç—å '{key.name}'", 
                callback_data=f"delete_api_key_{key.id}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_api_keys")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(keys_text, reply_markup=reply_markup, parse_mode='Markdown')
        
    finally:
        db.close()

async def delete_api_key_callback(query, user, key_id):
    """–£–¥–∞–ª–∏—Ç—å API –∫–ª—é—á"""
    db = SessionLocal()
    try:
        user_service = UserService(db)
        db_user = user_service.get_or_create_user(telegram_id=user.id)
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á
        api_key = db.query(ApiKey).filter(
            ApiKey.id == key_id,
            ApiKey.user_id == db_user.id,
            ApiKey.is_active == True
        ).first()
        
        if not api_key:
            await query.edit_message_text(
                "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_api_keys")
                ]])
            )
            return
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª—é—á
        api_key.is_active = False
        db.commit()
        
        await query.edit_message_text(
            f"‚úÖ API –∫–ª—é—á '{api_key.name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üìã –ú–æ–∏ –∫–ª—é—á–∏", callback_data="show_api_keys"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="personal_cabinet")
            ]])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ API –∫–ª—é—á–∞: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_api_keys")
            ]])
        )
    finally:
        db.close()

async def add_to_group_callback(query, user):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É"""
    group_text = """üë• **–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É**

üê± **CyberKitty** –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö!

‚ú® **–ß—Ç–æ —É–º–µ–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ
‚Ä¢ –û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã
‚Ä¢ –ù–µ —Å–ø–∞–º–∏—Ç –ª–∏—à–Ω–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
‚Ä¢ –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é

üìã **–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å:**
1. –î–æ–±–∞–≤—å—Ç–µ @CyberKitty19_bot –≤ –≥—Ä—É–ø–ø—É
2. –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤)
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ –≤ –≥—Ä—É–ø–ø—É
4. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –æ—Ç–≤–µ—Ç–∏—Ç

üîß **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
‚Ä¢ –ü—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ü—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π

üí° **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –≤ –≥—Ä—É–ø–ø–∞—Ö:**
‚Ä¢ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ
‚Ä¢ –ë–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
‚Ä¢ –ù–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

üò∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤ –ª—é–±–æ–π –≥—Ä—É–ø–ø–µ"""

    keyboard = [
        [InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞", url="https://t.me/CyberKitty19_bot")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(group_text, reply_markup=reply_markup, parse_mode='Markdown') 