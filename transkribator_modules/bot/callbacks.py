"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±–µ–∫–æ–≤ –¥–ª—è CyberKitty Transkribator
"""

import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from transkribator_modules.config import logger
from transkribator_modules.db.database import SessionLocal, UserService, ApiKeyService, PromoCodeService
from transkribator_modules.db.models import ApiKey, PlanType
from transkribator_modules.bot.payments import handle_payment_callback, show_payment_plans, initiate_payment, initiate_yukassa_payment

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±–µ–∫ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()

    data = query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–ª–±–µ–∫: {data}")
    logger.info(f"–ü–æ–ª–Ω—ã–π update: {update.to_dict() if hasattr(update, 'to_dict') else str(update)}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–ª–±–µ–∫–æ–≤
    if data == "show_payment_plans":
        logger.info("–ü–æ–ª—É—á–µ–Ω –∫–æ–ª–±–µ–∫ show_payment_plans")
        await show_payment_plans(update, context)

    elif data == "personal_cabinet":
        await show_personal_cabinet(update, context)

    elif data == "show_help":
        from transkribator_modules.bot.commands import help_command
        await help_command(update, context)

    elif data.startswith("buy_plan_"):
        if data.endswith("_stars"):
            # –ü–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Telegram Stars
            plan_id = data.replace("buy_plan_", "").replace("_stars", "")
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–ª–±–µ–∫ –æ–ø–ª–∞—Ç—ã –ø–ª–∞–Ω–∞ —á–µ—Ä–µ–∑ Stars: {data}, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π plan_id: {plan_id}")
            await initiate_payment(update, context, plan_id)
        elif data.endswith("_yukassa"):
            # –ü–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É
            plan_id = data.replace("buy_plan_", "").replace("_yukassa", "")
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–ª–±–µ–∫ –æ–ø–ª–∞—Ç—ã –ø–ª–∞–Ω–∞ —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É: {data}, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π plan_id: {plan_id}")
            await initiate_yukassa_payment(update, context, plan_id)
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            plan_id = data.replace("buy_plan_", "")
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–ª–±–µ–∫ –æ–ø–ª–∞—Ç—ã –ø–ª–∞–Ω–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç): {data}, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π plan_id: {plan_id}")
            await initiate_payment(update, context, plan_id)


    elif data == "show_stats":
        from transkribator_modules.bot.commands import stats_command
        await stats_command(update, context)

    elif data == "show_api_keys":
        await show_api_keys(update, context)

    elif data == "enter_promo_code":
        await enter_promo_code(update, context)

    elif data == "show_promo_codes":
        from transkribator_modules.bot.commands import promo_codes_command
        await promo_codes_command(update, context)

    elif data == "show_plans":
        await show_plans_callback(query, update.effective_user)

    elif data == "create_api_key":
        await create_api_key_callback(query, update.effective_user)

    elif data == "list_api_keys":
        await list_api_keys_callback(query, update.effective_user)

    elif data.startswith("delete_api_key_"):
        key_id = int(data.split("_")[-1])
        await delete_api_key_callback(query, update.effective_user, key_id)

    elif data == "back_to_start":
        await back_to_start_callback(query, update.effective_user)

    elif data.startswith("brief_summary_") or data.startswith("detailed_summary_"):
        await handle_summary_callback(update, context)

    elif data.startswith("process_transcript_"):
        await handle_process_transcript_callback(update, context)

    elif data.startswith("send_more_"):
        await handle_send_more_callback(update, context)

    elif data.startswith("main_menu_"):
        await handle_main_menu_callback(update, context)

    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

async def show_personal_cabinet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user = update.effective_user
        db = SessionLocal()

        try:
            user_service = UserService(db)
            from transkribator_modules.db.database import TranscriptionService
            transcription_service = TranscriptionService(db)

            db_user = user_service.get_or_create_user(telegram_id=user.id)
            usage_info = user_service.get_usage_info(db_user)

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            transcriptions_count = transcription_service.get_user_transcriptions_count(db_user)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∞—Ä–∏—Ñ–∞
            plan_status = ""
            if db_user.plan_expires_at:
                if db_user.plan_expires_at > datetime.utcnow():
                    days_left = (db_user.plan_expires_at - datetime.utcnow()).days
                    plan_status = f"(–∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω.)"
                else:
                    plan_status = "(–∏—Å—Ç–µ–∫)"
            elif db_user.current_plan != "free":
                plan_status = "(–±–µ—Å—Å—Ä–æ—á–Ω–æ üéâ)"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
            usage_text = ""
            if usage_info['current_plan'] == 'free':
                remaining = usage_info['generations_remaining']
                percentage = usage_info['usage_percentage']
                usage_text = f"""üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage_info['generations_used_this_month']} –∏–∑ {usage_info['generations_limit']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {remaining} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {usage_info['total_generations']}
‚Ä¢ –ú–∏–Ω—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ: {usage_info['minutes_used_this_month']:.1f} –º–∏–Ω"""
            elif usage_info['minutes_limit']:
                remaining = usage_info['minutes_remaining']
                percentage = usage_info['usage_percentage']
                usage_text = f"""üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage_info['minutes_used_this_month']:.1f} –∏–∑ {usage_info['minutes_limit']:.0f} –º–∏–Ω
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {remaining:.1f} –º–∏–Ω"""
            else:
                usage_text = f"""üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage_info['minutes_used_this_month']:.1f} –º–∏–Ω
‚Ä¢ –õ–∏–º–∏—Ç: –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ ‚ôæÔ∏è"""

            cabinet_text = f"""üê± **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
‚Ä¢ –ò–º—è: {user.first_name or '–ö–æ—Ç–∏–∫'} {user.last_name or ''}
‚Ä¢ –ü–ª–∞–Ω: {usage_info['plan_display_name']} {plan_status}

{usage_text}

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {transcriptions_count}
‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ: {usage_info['total_minutes_transcribed']:.1f} –º–∏–Ω
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {db_user.updated_at.strftime('%d.%m.%Y %H:%M') if db_user.updated_at else '–ù–∏–∫–æ–≥–¥–∞'}

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ 2 –ì–ë
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ PRO –ø–æ–¥–ø–∏—Å–∫—É! üöÄ"""
        finally:
            db.close()

        keyboard = [
            [InlineKeyboardButton("üíé –¢–∞—Ä–∏—Ñ—ã", callback_data="show_payment_plans")],
            [InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="enter_promo_code")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.edit_message_text(
                cabinet_text, reply_markup=reply_markup, parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                cabinet_text, reply_markup=reply_markup, parse_mode='Markdown'
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞")

async def show_plans_callback(query, user):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã"""
    from transkribator_modules.db.database import get_plans

    plans = get_plans()
    plans_text = "üí∞ **–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:**\n\n"

    for plan in plans:
        features = []
        if plan.features:
            try:
                features = json.loads(plan.features)
            except:
                features = [plan.features]

        minutes_text = f"{plan.minutes_per_month:.0f} –º–∏–Ω—É—Ç" if plan.minutes_per_month else "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ"
        price_text = f"{plan.price_rub:.0f} ‚ÇΩ" if plan.price_rub > 0 else "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"

        plans_text += f"**{plan.display_name}** - {price_text}\n"
        plans_text += f"‚Ä¢ {minutes_text} –≤ –º–µ—Å—è—Ü\n"
        plans_text += f"‚Ä¢ –§–∞–π–ª—ã –¥–æ {plan.max_file_size_mb:.0f} –ú–ë\n"

        for feature in features:
            plans_text += f"‚Ä¢ {feature}\n"

        plans_text += f"_{plan.description}_\n\n"

    plans_text += "‚≠ê **–ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ Telegram Stars**"

    keyboard = [
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –ø–ª–∞–Ω", callback_data="show_payment_plans")],
        [InlineKeyboardButton("üîô –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(plans_text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_stats_callback(query, user):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    db = SessionLocal()
    try:
        user_service = UserService(db)
        from transkribator_modules.db.database import TranscriptionService
        transcription_service = TranscriptionService(db)

        db_user = user_service.get_or_create_user(telegram_id=user.id)
        usage_info = user_service.get_usage_info(db_user)

        recent_transcriptions = transcription_service.get_user_transcriptions(db_user, limit=5)

        stats_text = f"""üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
‚Ä¢ Telegram ID: `{user.id}`
‚Ä¢ –ü–ª–∞–Ω: {usage_info['plan_display_name']}
‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {db_user.created_at.strftime('%d.%m.%Y')}

üìà **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**"""

        # –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if usage_info['current_plan'] == 'free':
            remaining = usage_info['generations_remaining']
            percentage = usage_info['usage_percentage']
            stats_text += f"\n‚Ä¢ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {usage_info['generations_used_this_month']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"
            stats_text += f"\n‚Ä¢ –õ–∏–º–∏—Ç: {usage_info['generations_limit']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"
            stats_text += f"\n‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {remaining} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ({100-percentage:.1f}%)"
            stats_text += f"\n‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {usage_info['total_generations']}"
        elif usage_info['minutes_limit']:
            remaining = usage_info['minutes_remaining']
            percentage = usage_info['usage_percentage']
            stats_text += f"\n‚Ä¢ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {usage_info['minutes_used_this_month']:.1f} –º–∏–Ω"
            stats_text += f"\n‚Ä¢ –õ–∏–º–∏—Ç: {usage_info['minutes_limit']:.0f} –º–∏–Ω"
            stats_text += f"\n‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {remaining:.1f} –º–∏–Ω ({100-percentage:.1f}%)"
        else:
            stats_text += f"\n‚Ä¢ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {usage_info['minutes_used_this_month']:.1f} –º–∏–Ω"
            stats_text += f"\n‚Ä¢ –õ–∏–º–∏—Ç: –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ ‚ôæÔ∏è"

        stats_text += f"\n‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ: {usage_info['total_minutes_transcribed']:.1f} –º–∏–Ω"

        if recent_transcriptions:
            stats_text += f"\n\nüé¨ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:**"
            for i, trans in enumerate(recent_transcriptions, 1):
                date_str = trans.created_at.strftime('%d.%m %H:%M')
                stats_text += f"\n{i}. {trans.filename or '–í–∏–¥–µ–æ'} ({trans.audio_duration_minutes:.1f} –º–∏–Ω) - {date_str}"

        keyboard = [
            [InlineKeyboardButton("üìä –ü–ª–∞–Ω—ã", callback_data="show_plans")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')

    finally:
        db.close()

async def show_api_keys_callback(query, user):
    """–ü–æ–∫–∞–∑–∞—Ç—å API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    db = SessionLocal()
    try:
        user_service = UserService(db)
        db_user = user_service.get_or_create_user(telegram_id=user.id)
        plan = user_service.get_user_plan(db_user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ API
        if not plan or plan.name == PlanType.FREE:
            api_text = f"""üîë **API –¥–æ—Å—Ç—É–ø**

‚ùå API –¥–æ—Å—Ç—É–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–ª–∞–Ω–∞ "{plan.display_name}"

API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞—á–∏–Ω–∞—è —Å –ø–ª–∞–Ω–∞ "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π".

üí° –û–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ API."""

            keyboard = [
                [InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω—ã", callback_data="show_plans")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
        else:
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
            api_keys = db.query(ApiKey).filter(
                ApiKey.user_id == db_user.id,
                ApiKey.is_active == True
            ).all()

            api_text = f"""üîë **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏**

‚úÖ API –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø–ª–∞–Ω–∞ "{plan.display_name}"

**–í–∞—à–∏ API –∫–ª—é—á–∏:** ({len(api_keys)}/5)"""

            if api_keys:
                for i, key in enumerate(api_keys, 1):
                    last_used = key.last_used_at.strftime('%d.%m.%Y') if key.last_used_at else "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è"
                    limit_text = f"{key.minutes_limit:.0f} –º–∏–Ω" if key.minutes_limit else "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ"
                    api_text += f"\n{i}. {key.name}"
                    api_text += f"\n   ‚Ä¢ –õ–∏–º–∏—Ç: {limit_text}"
                    api_text += f"\n   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {key.minutes_used:.1f} –º–∏–Ω"
                    api_text += f"\n   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {last_used}"
            else:
                api_text += "\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç API –∫–ª—é—á–µ–π."

            api_text += f"\n\nüìñ **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API:**"
            api_text += f"\n–ë–∞–∑–æ–≤—ã–π URL: `http://localhost:8000`"
            api_text += f"\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: `Authorization: Bearer YOUR_API_KEY`"
            api_text += f"\n–≠–Ω–¥–ø–æ–∏–Ω—Ç: `POST /transcribe`"

            keyboard = []
            if len(api_keys) < 5:  # –õ–∏–º–∏—Ç 5 –∫–ª—é—á–µ–π
                keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á", callback_data="create_api_key")])

            if api_keys:
                keyboard.append([InlineKeyboardButton("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏", callback_data="list_api_keys")])

            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(api_text, reply_markup=reply_markup, parse_mode='Markdown')

    finally:
        db.close()

async def create_api_key_callback(query, user):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π API –∫–ª—é—á"""
    db = SessionLocal()
    try:
        user_service = UserService(db)
        api_key_service = ApiKeyService(db)

        db_user = user_service.get_or_create_user(telegram_id=user.id)
        plan = user_service.get_user_plan(db_user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        existing_keys = db.query(ApiKey).filter(
            ApiKey.user_id == db_user.id,
            ApiKey.is_active == True
        ).count()

        if existing_keys >= 5:
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç API –∫–ª—é—á–µ–π (5 —à—Ç—É–∫). –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–ª—é—á–∏.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_api_keys")
                ]])
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á
        raw_key, api_key = api_key_service.generate_api_key(
            user=db_user,
            name=f"API Key {existing_keys + 1}"
        )

        success_text = f"""‚úÖ **API –∫–ª—é—á —Å–æ–∑–¥–∞–Ω!**

üîë **–í–∞—à –Ω–æ–≤—ã–π API –∫–ª—é—á:**
```
{raw_key}
```

‚ö†Ô∏è **–í–ê–ñ–ù–û:** –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ! –û–Ω –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω.

üìñ **–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
```bash
curl -X POST "http://localhost:8000/transcribe" \\
  -H "Authorization: Bearer {raw_key}" \\
  -F "file=@video.mp4"
```

üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–ª—é—á —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∫–ª—é—á–∏"""

        keyboard = [
            [InlineKeyboardButton("üìã –ú–æ–∏ –∫–ª—é—á–∏", callback_data="show_api_keys")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ API –∫–ª—é—á–∞: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ API –∫–ª—é—á–∞. *—Å–º—É—â–µ–Ω–Ω–æ –ø—Ä—è—á–µ—Ç –º–æ—Ä–¥–æ—á–∫—É*",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_api_keys")
            ]])
        )
    finally:
        db.close()

async def list_api_keys_callback(query, user):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ API –∫–ª—é—á–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    db = SessionLocal()
    try:
        user_service = UserService(db)
        db_user = user_service.get_or_create_user(telegram_id=user.id)

        api_keys = db.query(ApiKey).filter(
            ApiKey.user_id == db_user.id,
            ApiKey.is_active == True
        ).all()

        if not api_keys:
            await query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö API –∫–ª—é—á–µ–π.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_api_keys")
                ]])
            )
            return

        keys_text = "üîë **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏:**\n\n"
        keyboard = []

        for i, key in enumerate(api_keys, 1):
            created = key.created_at.strftime('%d.%m.%Y')
            last_used = key.last_used_at.strftime('%d.%m.%Y') if key.last_used_at else "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è"
            limit_text = f"{key.minutes_limit:.0f} –º–∏–Ω" if key.minutes_limit else "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ"

            keys_text += f"**{i}. {key.name}**\n"
            keys_text += f"‚Ä¢ –°–æ–∑–¥–∞–Ω: {created}\n"
            keys_text += f"‚Ä¢ –õ–∏–º–∏—Ç: {limit_text}\n"
            keys_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {key.minutes_used:.1f} –º–∏–Ω\n"
            keys_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {last_used}\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
            keyboard.append([InlineKeyboardButton(
                f"üóë –£–¥–∞–ª–∏—Ç—å '{key.name}'",
                callback_data=f"delete_api_key_{key.id}"
            )])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_api_keys")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(keys_text, reply_markup=reply_markup, parse_mode='Markdown')

    finally:
        db.close()

async def delete_api_key_callback(query, user, key_id):
    """–£–¥–∞–ª–∏—Ç—å API –∫–ª—é—á"""
    db = SessionLocal()
    try:
        user_service = UserService(db)
        db_user = user_service.get_or_create_user(telegram_id=user.id)

        # –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á
        api_key = db.query(ApiKey).filter(
            ApiKey.id == key_id,
            ApiKey.user_id == db_user.id,
            ApiKey.is_active == True
        ).first()

        if not api_key:
            await query.edit_message_text(
                "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_api_keys")
                ]])
            )
            return

        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª—é—á
        api_key.is_active = False
        db.commit()

        await query.edit_message_text(
            f"‚úÖ API –∫–ª—é—á '{api_key.name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üìã –ú–æ–∏ –∫–ª—é—á–∏", callback_data="show_api_keys"),
                InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")
            ]])
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ API –∫–ª—é—á–∞: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_api_keys")
            ]])
        )
    finally:
        db.close()

async def back_to_start_callback(query, user):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = f"""üê± **–ú—è—É! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Cyberkitty19 Transkribator!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name or '–∫–æ—Ç–∏–∫'}! –Ø —É–º–Ω—ã–π –∫–æ—Ç–∏–∫-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ç–≤–æ–∏ –≤–∏–¥–µ–æ –≤ —Ç–µ–∫—Å—Ç!

üé¨ **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –≤–∏–¥–µ–æ –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç
‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä—É—é —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò
‚Ä¢ –°–æ–∑–¥–∞—é –∫—Ä–∞—Ç–∫–∏–µ –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏
‚Ä¢ –†–∞–±–æ—Ç–∞—é —Å –±–æ–ª—å—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ —á–µ—Ä–µ–∑ API

üöÄ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ, –∏ —è —Å–æ–∑–¥–∞–º –∫—Ä–∞—Å–∏–≤—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É! –ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –æ–±—ã—á–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –∏–ª–∏ —Å –ò–ò-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

üí° **–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?**
–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ!

*–º—É—Ä—á–∏—Ç –∏ –≤–∏–ª—è–µ—Ç —Ö–≤–æ—Å—Ç–∏–∫–æ–º* üêæ"""

    keyboard = [
        [InlineKeyboardButton("üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")],
        [InlineKeyboardButton("üí° –ü–æ–º–æ—â—å", callback_data="show_help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_api_keys(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        api_text = """üîë **API –∫–ª—é—á–∏**

üöß **API –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**

**–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ REST API –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
‚Ä¢ Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
‚Ä¢ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
‚Ä¢ PRO –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –≤—ã—à–µ
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üöÄ"""

        from telegram import InlineKeyboardButton, InlineKeyboardMarkup

        keyboard = [
            [InlineKeyboardButton("üîô –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            api_text, reply_markup=reply_markup, parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ API –∫–ª—é—á–µ–π: {e}")
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ API –∫–ª—é—á–µ–π")

async def enter_promo_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥."""
    try:
        promo_text = """üéÅ **–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`/promo [–≤–∞—à_–ø—Ä–æ–º–æ–∫–æ–¥]`

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/promo WELCOME10`
‚Ä¢ `/promo PREMIUM30`

**–ì–¥–µ –Ω–∞–π—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã:**
‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏

–ñ–¥–µ–º –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥! üî•"""

        from telegram import InlineKeyboardButton, InlineKeyboardMarkup

        keyboard = [
            [InlineKeyboardButton("üîô –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            promo_text, reply_markup=reply_markup, parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞")

async def handle_summary_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏."""
    query = update.callback_query
    await query.answer()

    try:
        data = query.data
        user_id = update.effective_user.id

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∞–º–º–∞—Ä–∏
        if data.startswith("brief_summary_"):
            summary_type = "brief"
            summary_type_ru = "–∫—Ä–∞—Ç–∫–æ–µ"
        elif data.startswith("detailed_summary_"):
            summary_type = "detailed"
            summary_type_ru = "–ø–æ–¥—Ä–æ–±–Ω–æ–µ"
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–∞–º–º–∞—Ä–∏")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            f"ü§ñ –°–æ–∑–¥–∞—é {summary_type_ru} —Å–∞–º–º–∞—Ä–∏...\n\n"
            f"*—Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç*\n"
            f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...",
            parse_mode='Markdown'
        )

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = SessionLocal()
        try:
            from transkribator_modules.db.database import TranscriptionService
            transcription_service = TranscriptionService(db)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_service = UserService(db)
            user = user_service.get_or_create_user(telegram_id=user_id)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            transcriptions = transcription_service.get_user_transcriptions(user, limit=1)

            if not transcriptions:
                await query.edit_message_text(
                    "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏.\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏!"
                )
                return

            latest_transcription = transcriptions[0]
            transcript_text = latest_transcription.formatted_transcript or latest_transcription.raw_transcript

            if not transcript_text:
                await query.edit_message_text("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø—É—Å—Ç–∞")
                return

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏
            from transkribator_modules.transcribe.transcriber_v4 import generate_detailed_summary, generate_brief_summary

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏
            if summary_type == "brief":
                summary = await generate_brief_summary(transcript_text)
            else:
                summary = await generate_detailed_summary(transcript_text)

            if not summary:
                await query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏.\n\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–º–∞—Ä–∏
            summary_text = f"üìã **{summary_type_ru.title()} —Å–∞–º–º–∞—Ä–∏:**\n\n{summary}\n\n@CyberKitty19_bot"

            # –ï—Å–ª–∏ —Å–∞–º–º–∞—Ä–∏ –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
            if len(summary_text) > 4000:
                from docx import Document
                from pathlib import Path

                docx_path = Path("/tmp") / f"summary_{user_id}_{summary_type}.docx"
                document = Document()
                document.add_heading(f"{summary_type_ru.title()} —Å–∞–º–º–∞—Ä–∏", 0)
                document.add_paragraph(summary)
                document.save(docx_path)

                with open(docx_path, 'rb') as f:
                    await query.message.reply_document(
                        document=f,
                        filename=f"summary_{summary_type}.docx",
                        caption=f"üìã {summary_type_ru.title()} —Å–∞–º–º–∞—Ä–∏ –≥–æ—Ç–æ–≤–æ!\n\n@CyberKitty19_bot"
                    )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                docx_path.unlink(missing_ok=True)
            else:
                await query.message.reply_text(summary_text, parse_mode='Markdown')

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await query.edit_message_text(
                f"‚úÖ {summary_type_ru.title()} —Å–∞–º–º–∞—Ä–∏ –≥–æ—Ç–æ–≤–æ!\n\n"
                f"–ß—Ç–æ –¥–∞–ª—å—à–µ –±—É–¥–µ–º —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å? ü§î"
            )

        finally:
            db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∞–º–º–∞—Ä–∏: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∞–º–º–∞—Ä–∏.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

async def handle_process_transcript_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é'."""
    query = update.callback_query
    await query.answer()

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        instruction_text = """üîß **–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏**

–û–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ, –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª, –¢–ó –æ–±—Å—É–∂–¥–∞–µ–º–æ–≥–æ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî —á—Ç–æ —É–≥–æ–¥–Ω–æ.

–ï—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–∏—à–ª–∏ –ø—Ä–∏–º–µ—Ä: "–•–æ—á—É –≤–æ—Ç —Ç–∞–∫:
<–ø—Ä–∏–º–µ—Ä>".

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏! üìù"""

        await query.edit_message_text(instruction_text, parse_mode='Markdown')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['waiting_for_task'] = True
        context.user_data['user_id'] = update.effective_user.id

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å': {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_send_more_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ü—Ä–∏—Å–ª–∞—Ç—å –µ—â—ë'."""
    query = update.callback_query
    await query.answer()

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        send_more_text = """üì§ **–ü—Ä–∏—Å–ª–∞—Ç—å –µ—â—ë —Ñ–∞–π–ª**

–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–≤—ã–π –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
üé• –í–∏–¥–µ–æ: MP4, AVI, MOV, MKV, WebM –∏ –¥—Ä—É–≥–∏–µ
üéµ –ê—É–¥–∏–æ: MP3, WAV, FLAC, AAC, OGG –∏ –¥—Ä—É–≥–∏–µ
üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 2 –ì–ë
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 4 —á–∞—Å–∞

–ñ–¥—É —Ç–≤–æ–π —Ñ–∞–π–ª! üê±"""

        await query.edit_message_text(send_more_text, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏—Å–ª–∞—Ç—å –µ—â—ë': {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_main_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'."""
    query = update.callback_query
    await query.answer()

    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await back_to_start_callback(query, update.effective_user)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
