import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from transkribator_modules.config import logger
from transkribator_modules.db.database import (
    SessionLocal, UserService, ApiKeyService, TransactionService, PromoCodeService
)
from transkribator_modules.db.models import ApiKey, PlanType

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–∞–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ù–∞–∑–∞–¥)."""
    welcome_text = f"""üê± **–ú—è—É! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Cyberkitty19 Transkribator!**

–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name or '–∫–æ—Ç–∏–∫'}! –Ø —É–º–Ω—ã–π –∫–æ—Ç–∏–∫-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ç–≤–æ–∏ –≤–∏–¥–µ–æ –≤ —Ç–µ–∫—Å—Ç!

üé¨ **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –≤–∏–¥–µ–æ –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç
‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä—É—é —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò
‚Ä¢ –°–æ–∑–¥–∞—é –∫—Ä–∞—Ç–∫–∏–µ –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏
‚Ä¢ –†–∞–±–æ—Ç–∞—é —Å –±–æ–ª—å—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ —á–µ—Ä–µ–∑ API

üöÄ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ, –∏ —è —Å–æ–∑–¥–∞–º –∫—Ä–∞—Å–∏–≤—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É! –ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –æ–±—ã—á–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –∏–ª–∏ —Å –ò–ò-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

üí° **–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?**
–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ!

*–º—É—Ä—á–∏—Ç –∏ –≤–∏–ª—è–µ—Ç —Ö–≤–æ—Å—Ç–∏–∫–æ–º* üêæ"""

    keyboard = [
        [InlineKeyboardButton("üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")],
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="show_payment_plans")],
        [InlineKeyboardButton("üí° –ü–æ–º–æ—â—å", callback_data="show_help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ CyberKitty Transkribator**

**–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ 2 –ì–ë
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
‚Ä¢ –ò–ò-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –±–æ–Ω—É—Å–æ–≤

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/plans - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
/api - API –∫–ª—é—á–∏
/promo - –ü—Ä–æ–º–æ–∫–æ–¥—ã

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**

üé• **–í–∏–¥–µ–æ:** MP4, AVI, MOV, MKV, WebM, FLV, WMV, M4V, 3GP
üéµ **–ê—É–¥–∏–æ:** MP3, WAV, FLAC, AAC, OGG, M4A, WMA, OPUS

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 2 –ì–ë
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 4 —á–∞—Å–∞

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ñ–∞–π–ª
2. –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ - —è –∏–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ
3. –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ AI API –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
4. –¢–µ–∫—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é LLM
5. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≥–æ—Ç–æ–≤—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏ —è –Ω–∞—á–Ω—É –æ–±—Ä–∞–±–æ—Ç–∫—É! üöÄ"""

    await update.message.reply_text(help_text, parse_mode='Markdown')

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    status_text = """‚úÖ **–°—Ç–∞—Ç—É—Å CyberKitty Transkribator**

ü§ñ –ë–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω
üåê Telegram Bot API Server: –ê–∫—Ç–∏–≤–µ–Ω
üéµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ: –î–æ—Å—Ç—É–ø–Ω–∞
üé• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ: –î–æ—Å—Ç—É–ø–Ω–∞
üß† –ò–ò —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: –ü–æ–¥–∫–ª—é—á–µ–Ω–∞
üìù –ò–ò —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ê–∫—Ç–∏–≤–Ω–æ
üíé –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π: –ê–∫—Ç–∏–≤–Ω–∞

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 2 –ì–ë
‚Ä¢ –ú–∞–∫—Å. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 4 —á–∞—Å–∞
‚Ä¢ –§–æ—Ä–º–∞—Ç—ã –≤–∏–¥–µ–æ: 9 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö
‚Ä¢ –§–æ—Ä–º–∞—Ç—ã –∞—É–¥–∏–æ: 8 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö

–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ"""

    await update.message.reply_text(status_text, parse_mode='Markdown')

async def raw_transcript_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rawtranscript"""
    help_text = """üìù **–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—ã—Ä–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏**

–ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é,
–Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–°—ã—Ä–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è" –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.

**–ß—Ç–æ —ç—Ç–æ –¥–∞–µ—Ç:**
‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –ò–ò-–æ–±—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
2. –ü–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°—ã—Ä–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è"
4. –ü–æ–ª—É—á–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç

–£–¥–æ–±–Ω–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏! üîß"""

    await update.message.reply_text(help_text, parse_mode='Markdown')

async def plans_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /plans"""
    from transkribator_modules.bot.payments import show_payment_plans
    await show_payment_plans(update, context)

async def buy_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /buy ‚Äî –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–∫—É–ø–∫–µ."""
    from transkribator_modules.bot.payments import show_payment_plans
    await show_payment_plans(update, context)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    try:
        from transkribator_modules.db.database import get_user_stats
        user_id = update.effective_user.id
        stats = get_user_stats(user_id)

        stats_text = f"""üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {stats.get('files_processed', 0)}
‚Ä¢ –ú–∏–Ω—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('minutes_transcribed', 0)}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: {stats.get('last_activity', '–ù–∏–∫–æ–≥–¥–∞')}

üíé **–ü–æ–¥–ø–∏—Å–∫–∞:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {stats.get('subscription_status', '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π')}
‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ —Ñ–∞–π–ª–æ–≤: {stats.get('files_remaining', '–ë–µ–∑–ª–∏–º–∏—Ç')}
‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {stats.get('subscription_until', '–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ')}

üìà **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**
‚Ä¢ –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {stats.get('total_characters', 0)}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats.get('avg_duration', 0)} –º–∏–Ω

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CyberKitty Transkribator! üê±"""

        await update.message.reply_text(stats_text, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def api_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /api"""
    api_text = """üîå **API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è**

**–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ:**
‚Ä¢ REST API –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
‚Ä¢ Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
‚Ä¢ –ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤

**–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ URL
‚Ä¢ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üöÄ

*API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å PRO –ø–æ–¥–ø–∏—Å–∫–æ–π*"""

    await update.message.reply_text(api_text, parse_mode='Markdown')

async def promo_codes_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /promo"""
    if not context.args:
        promo_text = """üéÅ **–ü—Ä–æ–º–æ–∫–æ–¥—ã**

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ `/promo [–∫–æ–¥]` –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/promo WELCOME10` - —Å–∫–∏–¥–∫–∞ 10%
‚Ä¢ `/promo PREMIUM30` - 30 –¥–Ω–µ–π PRO –±–µ—Å–ø–ª–∞—Ç–Ω–æ

**–ì–¥–µ –Ω–∞–π—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã:**
‚Ä¢ –ù–∞—à Telegram –∫–∞–Ω–∞–ª
‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤! üî•"""

        await update.message.reply_text(promo_text, parse_mode='Markdown')
        return

    promo_code = context.args[0].upper()

    try:
        from transkribator_modules.db.database import activate_promo_code
        user_id = update.effective_user.id
        result = activate_promo_code(user_id, promo_code)

        if result['success']:
            await update.message.reply_text(
                f"üéâ **–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
                f"**–ë–æ–Ω—É—Å:** {result['bonus']}\n"
                f"**–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {result['expires']}\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CyberKitty Transkribator! üê±",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞**\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {result['error']}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∫–æ–¥–∞.",
                parse_mode='Markdown'
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def personal_cabinet_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user

    db = SessionLocal()
    try:
        user_service = UserService(db)
        promo_service = PromoCodeService(db)

        db_user = user_service.get_or_create_user(telegram_id=user.id)
        usage_info = user_service.get_usage_info(db_user)
        active_promos = promo_service.get_user_active_promos(db_user)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∞—Ä–∏—Ñ–∞
        plan_status = ""
        if db_user.plan_expires_at:
            if db_user.plan_expires_at > datetime.utcnow():
                days_left = (db_user.plan_expires_at - datetime.utcnow()).days
                plan_status = f"(–∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω.)"
            else:
                plan_status = "(–∏—Å—Ç–µ–∫)"
        elif db_user.current_plan != "free":
            plan_status = "(–±–µ—Å—Å—Ä–æ—á–Ω–æ üéâ)"

        cabinet_text = f"""üê± **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
‚Ä¢ –ò–º—è: {user.first_name or '–ö–æ—Ç–∏–∫'} {user.last_name or ''}
‚Ä¢ –ü–ª–∞–Ω: {usage_info['plan_display_name']} {plan_status}

üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:**"""

        # –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if usage_info['current_plan'] == 'free':
            remaining = usage_info['generations_remaining']
            percentage = usage_info['usage_percentage']
            progress_bar = "üü©" * int(percentage // 10) + "‚¨ú" * (10 - int(percentage // 10))

            cabinet_text += f"""
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage_info['generations_used_this_month']} –∏–∑ {usage_info['generations_limit']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {remaining} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
{progress_bar} {percentage:.1f}%"""
        elif usage_info['minutes_limit']:
            remaining = usage_info['minutes_remaining']
            percentage = usage_info['usage_percentage']
            progress_bar = "üü©" * int(percentage // 10) + "‚¨ú" * (10 - int(percentage // 10))

            cabinet_text += f"""
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage_info['minutes_used_this_month']:.1f} –∏–∑ {usage_info['minutes_limit']:.0f} –º–∏–Ω
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {remaining:.1f} –º–∏–Ω
{progress_bar} {percentage:.1f}%"""
        else:
            cabinet_text += f"""
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage_info['minutes_used_this_month']:.1f} –º–∏–Ω
‚Ä¢ –õ–∏–º–∏—Ç: –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ ‚ôæÔ∏è"""

        cabinet_text += f"""

üìà **–í—Å–µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ:** {usage_info['total_minutes_transcribed']:.1f} –º–∏–Ω"""

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
        if active_promos:
            cabinet_text += f"\n\nüéÅ **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:**"
            for promo in active_promos[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                expires_text = ""
                if promo.expires_at:
                    days_left = (promo.expires_at - datetime.utcnow()).days
                    expires_text = f" (–µ—â—ë {days_left} –¥–Ω.)"
                cabinet_text += f"\n‚Ä¢ {promo.promo_code.description}{expires_text}"

        cabinet_text += f"\n\nüêæ *–º—É—Ä—á–∏—Ç –¥–æ–≤–æ–ª—å–Ω–æ*"

        # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="show_promo_codes")],
            [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –ø–ª–∞–Ω", callback_data="show_payment_plans")],
        ]

        # API –∫–ª—é—á–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è Pro+ –ø–ª–∞–Ω–æ–≤
        if db_user.current_plan in ["pro", "unlimited"]:
            keyboard.append([InlineKeyboardButton("üîë API –∫–ª—é—á–∏", callback_data="show_api_keys")])

        keyboard.append([InlineKeyboardButton("üí° –ü–æ–º–æ—â—å", callback_data="show_help")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.edit_message_text(
                cabinet_text, reply_markup=reply_markup, parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                cabinet_text, reply_markup=reply_markup, parse_mode='Markdown'
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ: {e}")
        error_text = "üòø –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–±–∏–Ω–µ—Ç–∞. *–≥—Ä—É—Å—Ç–Ω–æ –º—è—É–∫–∞–µ—Ç*"

        if update.callback_query:
            await update.callback_query.edit_message_text(error_text)
        else:
            await update.message.reply_text(error_text)
    finally:
        db.close()
