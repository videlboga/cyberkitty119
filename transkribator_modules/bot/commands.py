import json
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from transkribator_modules.config import logger, ADMIN_IDS
from transkribator_modules.db.database import (
    SessionLocal, UserService, ApiKeyService, TransactionService, PromoCodeService
)
from transkribator_modules.db.models import ApiKey, PlanType

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å –Ω–æ–≤—ã–º –∫–æ—Ç—è—á–∏–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–º —ç–∫—Ä–∞–Ω–æ–º"""
    user = update.effective_user
    
    welcome_text = f"""üê± **–ú—è—É! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CyberKitty Transkribator!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name or '–∫–æ—Ç–∏–∫'}! –Ø —É–º–Ω—ã–π –∫–æ—Ç–∏–∫-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ç–æ—Ä! 

üé¨ **–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ** ‚Äî —è —Å–¥–µ–ª–∞—é –≤—Å—ë —Å–∞–º!

‚ú® **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ üìù –ü—Ä–µ–≤—Ä–∞—â–∞—é —Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç
‚Ä¢ ü§ñ –î–µ–ª–∞—é –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ò–ò  
‚Ä¢ üìã –°–æ–∑–¥–∞—é –∫—Ä–∞—Ç–∫–∏–µ –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏
‚Ä¢ üîÑ –†–∞–±–æ—Ç–∞—é —Å —Ñ–∞–π–ª–∞–º–∏ –¥–æ 2 –ì–ë

üöÄ **–ù–∞—á–∏–Ω–∞–µ–º?**
1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç)
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏  
3Ô∏è‚É£ –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é!

üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω–∞–∂–º–∏ "üìñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è" –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏*

*–º—É—Ä—á–∏—Ç –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ* üêæ"""

    keyboard = [
        [
            InlineKeyboardButton("üìñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="show_tutorial"),
            InlineKeyboardButton("üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")
        ],
        [
            InlineKeyboardButton("‚≠ê –¢–∞—Ä–∏—Ñ—ã", callback_data="show_payment_plans"),
            InlineKeyboardButton("üí° –ü–æ–º–æ—â—å", callback_data="show_help")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def plans_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /plans - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã"""
    from transkribator_modules.bot.payments import show_payment_plans
    await show_payment_plans(update, context)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await personal_cabinet_command(update, context)

async def api_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /api - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏"""
    user = update.effective_user
    
    db = SessionLocal()
    try:
        user_service = UserService(db)
        db_user = user_service.get_or_create_user(telegram_id=user.id)
        
        if db_user.current_plan not in ["pro", "unlimited"]:
            await update.message.reply_text(
                "üîê API –¥–æ—Å—Ç—É–ø –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞–Ω–æ–≤ üíé –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ üöÄ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π\n\n"
                "üòø *–≥—Ä—É—Å—Ç–Ω–æ –º—è—É–∫–∞–µ—Ç*"
            )
            return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º API –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ callback
        from transkribator_modules.bot.callbacks import show_api_keys_callback
        await show_api_keys_callback(None, user)
        
    finally:
        db.close()

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help —Å –∫–æ—Ç—è—á–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    help_text = """üîß **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞  
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–∏—Å–æ–≤
/buy - –ö—É–ø–∏—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
üé¨ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ (–¥–æ 50 –ú–ë –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ)
ü§ñ –í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏:
   ‚Ä¢ –û–±—ã—á–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
   ‚Ä¢ –° –ò–ò-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   ‚Ä¢ –ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏
   ‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏

**–§–æ—Ä–º–∞—Ç—ã –≤–∏–¥–µ–æ:** MP4, AVI, MOV, MKV, WebM
**–Ø–∑—ã–∫–∏:** –†—É—Å—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –¥—Ä—É–≥–∏–µ

**–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:**
üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π - 30 –º–∏–Ω/–º–µ—Å—è—Ü
‚≠ê –ë–∞–∑–æ–≤—ã–π - 3 —á–∞—Å–∞/–º–µ—Å—è—Ü  
üíé –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π - 10 —á–∞—Å–æ–≤/–º–µ—Å—è—Ü + API
üöÄ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π + VIP

–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ @kiryanovpro 

*–º—É—Ä—á–∏—Ç –∏ –ø–æ–¥–º–∏–≥–∏–≤–∞–µ—Ç* üò∏"""

    keyboard = [
        [InlineKeyboardButton("üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")],
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –ø–ª–∞–Ω", callback_data="show_payment_plans")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')

async def personal_cabinet_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    
    db = SessionLocal()
    try:
        user_service = UserService(db)
        promo_service = PromoCodeService(db)
        
        db_user = user_service.get_or_create_user(telegram_id=user.id)
        usage_info = user_service.get_usage_info(db_user)
        active_promos = promo_service.get_user_active_promos(db_user)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∞—Ä–∏—Ñ–∞
        plan_status = ""
        if db_user.plan_expires_at:
            if db_user.plan_expires_at > datetime.utcnow():
                days_left = (db_user.plan_expires_at - datetime.utcnow()).days
                plan_status = f"(–∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω.)"
            else:
                plan_status = "(–∏—Å—Ç–µ–∫)"
        elif db_user.current_plan != "free":
            plan_status = "(–±–µ—Å—Å—Ä–æ—á–Ω–æ üéâ)"

        cabinet_text = f"""üê± **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
‚Ä¢ –ò–º—è: {user.first_name or '–ö–æ—Ç–∏–∫'} {user.last_name or ''}
‚Ä¢ –ü–ª–∞–Ω: {usage_info['plan_display_name']} {plan_status}

üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:**"""

        if usage_info['minutes_limit']:
            remaining = usage_info['minutes_remaining']
            percentage = usage_info['usage_percentage']
            progress_bar = "üü©" * int(percentage // 10) + "‚¨ú" * (10 - int(percentage // 10))
            
            cabinet_text += f"""
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage_info['minutes_used_this_month']:.1f} –∏–∑ {usage_info['minutes_limit']:.0f} –º–∏–Ω
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {remaining:.1f} –º–∏–Ω
{progress_bar} {percentage:.1f}%"""
        else:
            cabinet_text += f"""
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage_info['minutes_used_this_month']:.1f} –º–∏–Ω
‚Ä¢ –õ–∏–º–∏—Ç: –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ ‚ôæÔ∏è"""
        
        cabinet_text += f"""

üìà **–í—Å–µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ:** {usage_info['total_minutes_transcribed']:.1f} –º–∏–Ω"""

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
        if active_promos:
            cabinet_text += f"\n\nüéÅ **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:**"
            for promo in active_promos[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                expires_text = ""
                if promo.expires_at:
                    days_left = (promo.expires_at - datetime.utcnow()).days
                    expires_text = f" (–µ—â—ë {days_left} –¥–Ω.)"
                cabinet_text += f"\n‚Ä¢ {promo.promo_code.description}{expires_text}"

        cabinet_text += f"\n\nüêæ *–º—É—Ä—á–∏—Ç –¥–æ–≤–æ–ª—å–Ω–æ*"

        # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="show_promo_codes")],
            [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –ø–ª–∞–Ω", callback_data="show_payment_plans")],
        ]
        
        # API –∫–ª—é—á–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è Pro+ –ø–ª–∞–Ω–æ–≤
        if db_user.current_plan in ["pro", "unlimited"]:
            keyboard.append([InlineKeyboardButton("üîë API –∫–ª—é—á–∏", callback_data="show_api_keys")])
        
        keyboard.append([InlineKeyboardButton("üí° –ü–æ–º–æ—â—å", callback_data="show_help")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                cabinet_text, reply_markup=reply_markup, parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                cabinet_text, reply_markup=reply_markup, parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ: {e}")
        error_text = "üòø –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–±–∏–Ω–µ—Ç–∞. *–≥—Ä—É—Å—Ç–Ω–æ –º—è—É–∫–∞–µ—Ç*"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(error_text)
        else:
            await update.message.reply_text(error_text)
    finally:
        db.close()

async def promo_codes_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"""
    user = update.effective_user
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã (–ø—Ä–æ–º–æ–∫–æ–¥)
    if context.args and len(context.args) > 0:
        promo_code = context.args[0].upper()
        await activate_promo_code(update, context, promo_code)
        return
    
    db = SessionLocal()
    try:
        user_service = UserService(db)
        promo_service = PromoCodeService(db)
        
        db_user = user_service.get_or_create_user(telegram_id=user.id)
        active_promos = promo_service.get_user_active_promos(db_user)
        
        promo_text = f"""üéÅ **–ü—Ä–æ–º–æ–∫–æ–¥—ã**

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ!

üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
–í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:
`/promo –¢–í–û–ô_–ü–†–û–ú–û–ö–û–î`

üéØ **–ì–¥–µ –≤–∑—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã?**
‚Ä¢ –í —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
‚Ä¢ –í —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫—Ü–∏—è—Ö –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö
‚Ä¢ –ó–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ

üò∏ *–°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å!*"""

        if active_promos:
            promo_text += f"\n\nüéâ **–¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:**"
            for promo in active_promos:
                expires_text = ""
                if promo.expires_at:
                    if promo.expires_at > datetime.utcnow():
                        days_left = (promo.expires_at - datetime.utcnow()).days
                        expires_text = f" (–µ—â—ë {days_left} –¥–Ω.)"
                    else:
                        expires_text = " (–∏—Å—Ç–µ–∫)"
                else:
                    expires_text = " (–±–µ—Å—Å—Ä–æ—á–Ω–æ üéâ)"
                
                promo_text += f"\n‚Ä¢ {promo.promo_code.description}{expires_text}"
        
        promo_text += f"\n\nüò∏ *–ø—Ä–µ–¥–≤–∫—É—à–∞—é—â–µ –º—É—Ä—á–∏—Ç*"

        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promo_code")],
            [InlineKeyboardButton("üîô –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                promo_text, reply_markup=reply_markup, parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                promo_text, reply_markup=reply_markup, parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö: {e}")
        error_text = "üòø –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤. *—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω–Ω–æ –º—è—É–∫–∞–µ—Ç*"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(error_text)
        else:
            await update.message.reply_text(error_text)
    finally:
        db.close()

async def activate_promo_code(update: Update, context: ContextTypes.DEFAULT_TYPE, promo_code: str) -> None:
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user = update.effective_user
    
    db = SessionLocal()
    try:
        user_service = UserService(db)
        promo_service = PromoCodeService(db)
        
        db_user = user_service.get_or_create_user(telegram_id=user.id)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        is_valid, message, promo = promo_service.validate_promo_code(promo_code, db_user)
        
        if not is_valid:
            await update.message.reply_text(message)
            return
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        activation = promo_service.activate_promo_code(promo, db_user)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        duration_text = ""
        if promo.duration_days:
            duration_text = f" –Ω–∞ {promo.duration_days} –¥–Ω–µ–π"
        else:
            duration_text = " –Ω–∞–≤—Å–µ–≥–¥–∞"
        
        success_text = f"""üéâ **–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**

{promo.description}

‚ú® **–¢–≤–æ–π –Ω–æ–≤—ã–π –ø–ª–∞–Ω:** üöÄ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π{duration_text}

üéÅ **–ß—Ç–æ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ:**
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –º–∏–Ω—É—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
‚Ä¢ –§–∞–π–ª—ã –¥–æ 2 –ì–ë  
‚Ä¢ VIP –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞

üòª *—Å—á–∞—Å—Ç–ª–∏–≤–æ –º—É—Ä—á–∏—Ç –∏ –¥–µ–ª–∞–µ—Ç –∫—É–ª—å–±–∏—Ç*"""

        keyboard = [
            [InlineKeyboardButton("üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")],
            [InlineKeyboardButton("üé¨ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await update.message.reply_text("üòø –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. *–≥—Ä—É—Å—Ç–Ω–æ –º—è—É–∫–∞–µ—Ç*")
    finally:
        db.close()

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    status_text = """üîß **–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ Cyberkitty19 Transkribator**

ü§ñ **–ë–æ—Ç:** ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
üåê **API —Å–µ—Ä–≤–µ—Ä:** ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
üîß **–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:** ‚úÖ –ì–æ—Ç–æ–≤
üíæ **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:** ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞

üò∏ *–≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –º—É—Ä—á–∞—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ*"""
    
    await update.message.reply_text(status_text, parse_mode='Markdown')

# ----------------------------------------------------------------------------
# üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
# ----------------------------------------------------------------------------

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/broadcast <—Ç–µ–∫—Å—Ç> ‚Äì —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (30 –¥–Ω.)."""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
    text = " ".join(context.args) if context.args else None

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –Ω–æ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì –±–µ—Ä—ë–º –µ–≥–æ
    if not text and update.message.reply_to_message and update.message.reply_to_message.text:
        text = update.message.reply_to_message.text

    if not text:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π.")
        return

    await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É‚Ä¶")

    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    from datetime import timedelta, datetime
    db = SessionLocal()
    sent = 0
    try:
        user_service = UserService(db)
        users = user_service.get_active_users(days=30)

        for user in users:
            try:
                await context.bot.send_message(chat_id=user.telegram_id, text=text, parse_mode='Markdown')
                sent += 1
                await asyncio.sleep(0.05)  # –º–µ–ª–∫–∞—è –ø–∞—É–∑–∞
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")

        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

    finally:
        db.close()

async def raw_transcript_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "üé¨ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ —Å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π, –∏ —è –≤–µ—Ä–Ω—É —Ç–æ–ª—å–∫–æ —Å—ã—Ä—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!\n\n"
        "üò∫ *–≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç–µ*"
    )

async def show_tutorial(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    tutorial_text = """üìñ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CyberKitty Transkribator**

üé¨ **–®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ç–∞—â–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –≤ —á–∞—Ç
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, AVI, MOV, MKV, WebM
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∞—Ä–∏—Ñ–∞:
  üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π: –¥–æ 50 –ú–ë
  ‚≠ê –ë–∞–∑–æ–≤—ã–π: –¥–æ 500 –ú–ë  
  üíé –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π: –¥–æ 2 –ì–ë
  üöÄ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π: –¥–æ 2 –ì–ë

ü§ñ **–®–∞–≥ 2: –í—ã–±–µ—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É**
–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã:
‚Ä¢ üìù **–°—ã—Ä–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è** ‚Äî –∫–∞–∫ –µ—Å—Ç—å
‚Ä¢ ‚ú® **–° –ò–ò-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º** ‚Äî –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
‚Ä¢ üìã **–ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏** ‚Äî –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
‚Ä¢ üìÑ **–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏** ‚Äî —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑

‚ö° **–®–∞–≥ 3: –ü–æ–ª—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç**
‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ ‚Äî —Å—Ä–∞–∑—É –≤ —á–∞—Ç–µ
‚Ä¢ –î–ª–∏–Ω–Ω—ã–µ ‚Äî —Å—Å—ã–ª–∫–æ–π –Ω–∞ Google Docs
‚Ä¢ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç–≤–æ—ë–º –∞–∫–∫–∞—É–Ω—Ç–µ

üéÅ **–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/plans ‚Äî —Ç–∞—Ä–∏—Ñ—ã –∏ –ø–æ–∫—É–ø–∫–∞
/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è  
/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

üí° **–ü—Ä–æ–º–æ–∫–æ–¥—ã:**
–í–≤–æ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø—Ä—è–º–æ –≤ —á–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: KITTY2024)
–°–ª–µ–¥–∏ –∑–∞ –∞–∫—Ü–∏—è–º–∏ –≤ @kiryanovpro

üêæ *–ì–æ—Ç–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å? –û—Ç–ø—Ä–∞–≤–ª—è–π –≤–∏–¥–µ–æ!*"""

    keyboard = [
        [
            InlineKeyboardButton("üé¨ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="back_to_start"),
            InlineKeyboardButton("‚≠ê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã", callback_data="show_payment_plans")
        ],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(tutorial_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(tutorial_text, reply_markup=reply_markup, parse_mode='Markdown') 