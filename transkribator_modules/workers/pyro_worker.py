#!/usr/bin/env python3

"""
–ú–æ–¥—É–ª—å Pyrogram –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ –∏–∑ Telegram.
–í–æ—Ä–∫–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—é—â–∏–π –∑–∞–¥–∞–Ω–Ω—ã–π —á–∞—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∫–æ–º–∞–Ω–¥—ã –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞.
"""

import os
import sys
import asyncio
import logging
import re
from pathlib import Path

from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.errors import FloodWait, ChatAdminRequired

from transkribator_modules.config import (
    TELEGRAM_API_ID, TELEGRAM_API_HASH, BOT_TOKEN,
    PYROGRAM_WORKER_CHAT_ID, VIDEOS_DIR, logger
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∏ —Ö–µ—à–∞
if not TELEGRAM_API_ID or TELEGRAM_API_ID == 0:
    logger.error("‚ùå TELEGRAM_API_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    sys.exit(1)

if not TELEGRAM_API_HASH:
    logger.error("‚ùå TELEGRAM_API_HASH –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    sys.exit(1)

# –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞ –∏–∑ —Ç–æ–∫–µ–Ω–∞
BOT_ID = BOT_TOKEN.split(':')[0] if BOT_TOKEN else ''
SESSION_NAME = "cyberkitty19_pyro_worker_new"

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
PYRO_DOWNLOAD_PATTERN = re.compile(r'#pyro_download_(\d+)_(\d+)')

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Pyrogram
app = Client(SESSION_NAME, api_id=TELEGRAM_API_ID, api_hash=TELEGRAM_API_HASH)

async def download_and_save_video(message, target_file):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∏–¥–µ–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram."""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ —Ñ–∞–π–ª: {target_file}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        target_file.parent.mkdir(exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        await message.download(file_name=str(target_file))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        if target_file.exists() and target_file.stat().st_size > 0:
            logger.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {target_file} (—Ä–∞–∑–º–µ—Ä: {target_file.stat().st_size} –±–∞–π—Ç)")
            return True
        else:
            logger.error(f"‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: {target_file}")
            return False
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        return False

# –§–∏–ª—å—Ç—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
def from_our_bot(_, __, message):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞."""
    if not message.from_user:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID –±–æ—Ç–∞ –∏–∑ —Ç–æ–∫–µ–Ω–∞)
    bot_user_id = BOT_TOKEN.split(':')[0] if BOT_TOKEN else ''
    return str(message.from_user.id) == bot_user_id

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä
bot_filter = filters.create(from_our_bot)

@app.on_message(filters.chat(PYROGRAM_WORKER_CHAT_ID))
async def handle_all_messages(client, message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–ª–µ–π–Ω–æ–º —á–∞—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
    try:
        sender = message.from_user
        sender_info = f"@{sender.username}" if sender and sender.username else f"ID:{sender.id}" if sender else "Unknown"
        message_text = message.text or message.caption or ""
        
        logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–ª–µ–π–Ω–æ–º —á–∞—Ç–µ –æ—Ç {sender_info}: {message_text[:100]}{'...' if len(message_text) > 100 else ''}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç –Ω–∞—à–µ–≥–æ –ª–∏ –±–æ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot_user_id = BOT_TOKEN.split(':')[0] if BOT_TOKEN else ''
        is_from_bot = sender and str(sender.id) == bot_user_id
        
        logger.info(f"ü§ñ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞: {is_from_bot} (–æ–∂–∏–¥–∞–µ–º—ã–π ID: {bot_user_id}, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ID: {sender.id if sender else 'None'})")
        
        if is_from_bot:
            await handle_bot_messages(client, message)
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@app.on_message(bot_filter & filters.chat(PYROGRAM_WORKER_CHAT_ID))
async def handle_bot_messages(client, message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–ª–µ–π–Ω–æ–º —á–∞—Ç–µ."""
    try:
        sender = message.from_user
        sender_info = f"@{sender.username}" if sender.username else f"ID:{sender.id}"
        message_text = message.text or message.caption or ""
        
        logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_info}: {message_text[:50]}{'...' if len(message_text) > 50 else ''}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏
        pyro_match = PYRO_DOWNLOAD_PATTERN.search(message_text)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
        if pyro_match:
            chat_id, message_id = pyro_match.groups()
            logger.info(f"üé¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: chat_id={chat_id}, message_id={message_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if message.video:
                video_path = VIDEOS_DIR / f"telegram_video_{message_id}.mp4"
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                success = await download_and_save_video(message, video_path)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                if success:
                    await client.send_message(PYROGRAM_WORKER_CHAT_ID, f"#pyro_downloaded_{chat_id}_{message_id}")
                else:
                    await client.send_message(PYROGRAM_WORKER_CHAT_ID, f"#pyro_download_failed_{chat_id}_{message_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –≤–∏–¥–µ–æ")
        else:
            logger.debug(f"‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É—é")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        import traceback
        logger.error(traceback.format_exc())

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Pyrogram worker'–∞."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Pyrogram worker'–∞...")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
    pyro_logger = logging.getLogger('pyro_worker')
    pyro_handler = logging.FileHandler("pyro_worker.log")
    pyro_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
    pyro_logger.addHandler(pyro_handler)
    pyro_logger.setLevel(logging.INFO)
    
    async with app:
        me = await app.get_me()
        pyro_logger.info(f"‚úÖ Pyrogram worker –∑–∞–ø—É—â–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ {me.first_name} {me.last_name or ''} (@{me.username or '–±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞'})")
        pyro_logger.info(f"üëÄ –ñ–¥—É –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ —Å ID {BOT_ID} –≤ —á–∞—Ç–µ {PYROGRAM_WORKER_CHAT_ID}...")
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã–º
        await asyncio.Future()

if __name__ == "__main__":
    try:
        app.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 