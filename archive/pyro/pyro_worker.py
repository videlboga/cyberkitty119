#!/usr/bin/env python3

import os
import sys
import asyncio
import logging
import re
from pathlib import Path
from dotenv import load_dotenv
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.errors import FloodWait, ChatAdminRequired

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API
API_ID = int(os.getenv('TELEGRAM_API_ID', '0'))
API_HASH = os.getenv('TELEGRAM_API_HASH', '')
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '')
BOT_ID = os.getenv('BOT_ID', '')
TELETHON_WORKER_CHAT_ID = int(os.getenv('TELETHON_WORKER_CHAT_ID', '0'))
SESSION_NAME = 'pyro_worker'

# –ü—É—Ç–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
BASE_DIR = Path(__file__).resolve().parent
VIDEOS_DIR = BASE_DIR / "videos"
AUDIO_DIR = BASE_DIR / "audio"
TRANSCRIPTIONS_DIR = BASE_DIR / "transcriptions"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
VIDEOS_DIR.mkdir(exist_ok=True)
AUDIO_DIR.mkdir(exist_ok=True)
TRANSCRIPTIONS_DIR.mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("pyro_worker.log")
    ]
)
logger = logging.getLogger(__name__)

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
VIDEO_DOWNLOAD_PATTERN = re.compile(r'#video_download_(\d+)_(\d+)')
FORWARD_DOWNLOAD_PATTERN = re.compile(r'#forward_download_(\d+)_(\d+)_(-?\d+)_(\d+)')

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Pyrogram
app = Client(SESSION_NAME, api_id=API_ID, api_hash=API_HASH)

async def download_and_save_video(message, target_file):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∏–¥–µ–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram."""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ —Ñ–∞–π–ª: {target_file}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        target_file.parent.mkdir(exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        await message.download(file_name=str(target_file))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        if target_file.exists() and target_file.stat().st_size > 0:
            logger.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {target_file} (—Ä–∞–∑–º–µ—Ä: {target_file.stat().st_size} –±–∞–π—Ç)")
            return True
        else:
            logger.error(f"‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: {target_file}")
            return False
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        return False

# –§–∏–ª—å—Ç—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
def from_our_bot(_, __, message):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞."""
    if not message.from_user:
        return False
    
    return message.from_user.username == BOT_ID or str(message.from_user.id) == BOT_TOKEN.split(':')[0]

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä
bot_filter = filters.create(from_our_bot)

@app.on_message(bot_filter & filters.chat(TELETHON_WORKER_CHAT_ID))
async def handle_bot_messages(client, message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–ª–µ–π–Ω–æ–º —á–∞—Ç–µ."""
    try:
        sender = message.from_user
        sender_info = f"@{sender.username}" if sender.username else f"ID:{sender.id}"
        message_text = message.text or message.caption or ""
        
        logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_info}: {message_text[:50]}{'...' if len(message_text) > 50 else ''}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏
        video_match = VIDEO_DOWNLOAD_PATTERN.search(message_text)
        forward_match = FORWARD_DOWNLOAD_PATTERN.search(message_text)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
        if video_match:
            chat_id, message_id = video_match.groups()
            logger.info(f"üé¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: chat_id={chat_id}, message_id={message_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if message.video:
                video_path = VIDEOS_DIR / f"telegram_video_{message_id}.mp4"
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                success = await download_and_save_video(message, video_path)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                if success:
                    await client.send_message(BOT_ID, f"#video_downloaded_{chat_id}_{message_id}")
                else:
                    await client.send_message(BOT_ID, f"#video_download_failed_{chat_id}_{message_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –≤–∏–¥–µ–æ")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif forward_match:
            chat_id, message_id, source_chat_id, source_message_id = forward_match.groups()
            logger.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞: "
                      f"chat_id={chat_id}, message_id={message_id}, "
                      f"source_chat_id={source_chat_id}, source_message_id={source_message_id}")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
                source_chat_id = int(source_chat_id)
                source_message_id = int(source_message_id)
                
                # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
                video_path = VIDEOS_DIR / f"telegram_video_{message_id}.mp4"
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞
                    source_message = await client.get_messages(source_chat_id, message_ids=source_message_id)
                    
                    if source_message and source_message.video:
                        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                        success = await download_and_save_video(source_message, video_path)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                        if success:
                            await client.send_message(BOT_ID, f"#video_downloaded_{chat_id}_{message_id}")
                        else:
                            await client.send_message(BOT_ID, f"#video_download_failed_{chat_id}_{message_id}")
                    else:
                        logger.error(f"‚ùå –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ: {source_chat_id}, {source_message_id}")
                        await client.send_message(BOT_ID, f"#video_download_failed_{chat_id}_{message_id}_no_media")
                
                except FloodWait as e:
                    logger.error(f"‚è±Ô∏è Flood wait error: {e}")
                    await client.send_message(BOT_ID, f"#video_download_failed_{chat_id}_{message_id}_flood_wait_{e.x}")
                
                except ChatAdminRequired:
                    logger.error(f"üîí –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É: {source_chat_id}")
                    await client.send_message(BOT_ID, f"#video_download_failed_{chat_id}_{message_id}_no_access")
            
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∫—É: {e}")
                await client.send_message(BOT_ID, f"#video_download_failed_{chat_id}_{message_id}_error")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        import traceback
        logger.error(traceback.format_exc())

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Pyrogram worker'–∞."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Pyrogram worker'–∞...")
    
    async with app:
        me = await app.get_me()
        logger.info(f"‚úÖ Pyrogram worker –∑–∞–ø—É—â–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ {me.first_name} {me.last_name or ''} (@{me.username or '–±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞'})")
        logger.info(f"üëÄ –ñ–¥—É –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ —Å ID {BOT_ID} –≤ —á–∞—Ç–µ {TELETHON_WORKER_CHAT_ID}...")
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã–º
        await asyncio.Future()

if __name__ == "__main__":
    try:
        app.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 