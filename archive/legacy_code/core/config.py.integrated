import os
import logging
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ
    pass

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –º—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
IN_CONTAINER = os.path.exists('/app') and os.access('/app', os.W_OK)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
if IN_CONTAINER:
    DATA_DIR = Path("/app/data")
else:
    DATA_DIR = Path("./data")
DATA_DIR.mkdir(parents=True, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL.upper()),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(DATA_DIR / 'bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ===== –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê =====
BOT_TOKEN = os.getenv('BOT_TOKEN', '')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º BOT_TOKEN —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞ (–Ω–µ –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞)
REQUIRE_BOT_TOKEN = os.getenv('REQUIRE_BOT_TOKEN', 'true').lower() == 'true'
if REQUIRE_BOT_TOKEN and not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    raise ValueError("BOT_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")

# ===== TELEGRAM BOT API SERVER =====
USE_LOCAL_BOT_API = os.getenv('USE_LOCAL_BOT_API', 'true').lower() == 'true'
LOCAL_BOT_API_URL = os.getenv('LOCAL_BOT_API_URL', 'http://localhost:8083')

# API_ID –∏ API_HASH –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è Bot API Server (–≤ docker-compose.yml)
TELEGRAM_API_ID = int(os.getenv('TELEGRAM_API_ID', '0'))
TELEGRAM_API_HASH = os.getenv('TELEGRAM_API_HASH', '')

if USE_LOCAL_BOT_API:
    logger.info(f"üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π Telegram Bot API Server: {LOCAL_BOT_API_URL}")
    if TELEGRAM_API_ID == 0:
        logger.warning("‚ö†Ô∏è TELEGRAM_API_ID –Ω–µ –∑–∞–¥–∞–Ω! –ù—É–∂–µ–Ω –¥–ª—è Bot API Server")
    if not TELEGRAM_API_HASH:
        logger.warning("‚ö†Ô∏è TELEGRAM_API_HASH –Ω–µ –∑–∞–¥–∞–Ω! –ù—É–∂–µ–Ω –¥–ª—è Bot API Server")
else:
    logger.info("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Telegram Bot API")

# ===== API –ö–õ–Æ–ß–ò –î–õ–Ø AI –°–ï–†–í–ò–°–û–í =====
DEEPINFRA_API_KEY = os.getenv('DEEPINFRA_API_KEY', '')
n# ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï API –ö–õ–Æ–ß–ò =====
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY", "")
OPENROUTER_MODEL = os.getenv("OPENROUTER_MODEL", "anthropic/claude-3.5-sonnet")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Replicate API
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN", "")
REPLICATE_WHISPER_MODEL = os.getenv("REPLICATE_WHISPER_MODEL", "carnifexer/whisperx")
REPLICATE_WHISPER_DIARIZATION_MODEL = os.getenv("REPLICATE_WHISPER_DIARIZATION_MODEL", "thomasmol/whisper-diarization")
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY', '')
OPENROUTER_MODEL = os.getenv('OPENROUTER_MODEL', 'anthropic/claude-3.5-sonnet')

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• =====
if IN_CONTAINER:
    DATABASE_URL = os.getenv('DATABASE_URL', f'sqlite:///{DATA_DIR}/cyberkitty19_transkribator.db')
else:
    DATABASE_URL = os.getenv('DATABASE_URL', f'sqlite:///{DATA_DIR.absolute()}/cyberkitty19_transkribator.db')

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò –§–ê–ô–õ–û–í =====
MAX_FILE_SIZE_MB = int(os.getenv('MAX_FILE_SIZE_MB', '2000'))
MAX_AUDIO_DURATION_MINUTES = int(os.getenv('MAX_AUDIO_DURATION_MINUTES', '240'))
ENABLE_LLM_FORMATTING = os.getenv('ENABLE_LLM_FORMATTING', 'true').lower() == 'true'
ENABLE_SEGMENTATION = os.getenv('ENABLE_SEGMENTATION', 'true').lower() == 'true'
SEGMENT_DURATION_SECONDS = int(os.getenv('SEGMENT_DURATION_SECONDS', '30'))

# ===== –î–ò–†–ï–ö–¢–û–†–ò–ò =====
if IN_CONTAINER:
    VIDEOS_DIR = Path("/app/videos")
    AUDIO_DIR = Path("/app/audio")
    TRANSCRIPTIONS_DIR = Path("/app/transcriptions")
else:
    VIDEOS_DIR = Path("./videos")
    AUDIO_DIR = Path("./audio")
    TRANSCRIPTIONS_DIR = Path("./transcriptions")

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
for directory in [VIDEOS_DIR, AUDIO_DIR, TRANSCRIPTIONS_DIR]:
    directory.mkdir(parents=True, exist_ok=True)

logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
logger.info(f"üè† –†–µ–∂–∏–º: {'–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä' if IN_CONTAINER else '–ª–æ–∫–∞–ª—å–Ω—ã–π'}")
logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {DATA_DIR}")
logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤–∏–¥–µ–æ: {VIDEOS_DIR}")
logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∞—É–¥–∏–æ: {AUDIO_DIR}")
logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {TRANSCRIPTIONS_DIR}")
logger.info(f"üîß –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {MAX_FILE_SIZE_MB} –ú–ë")
logger.info(f"‚è±Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {MAX_AUDIO_DURATION_MINUTES} –º–∏–Ω—É—Ç") 
# ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====
MAX_MESSAGE_LENGTH = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

# ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
user_transcriptions = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
