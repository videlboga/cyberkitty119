import asyncio
import html
import re
from pathlib import Path
from transkribator_modules.config import (
    logger, user_transcriptions, AUDIO_DIR, TRANSCRIPTIONS_DIR, MAX_MESSAGE_LENGTH, VIDEOS_DIR
)
from transkribator_modules.audio.extractor import extract_audio_from_video
from transkribator_modules.transcribe.transcriber import (
    transcribe_audio, format_transcript_with_llm, _basic_local_format
)

def clean_html_entities(text: str) -> str:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–±–∏—Ä–∞–µ–º HTML-—Ç–µ–≥–∏.
    –ù–µ —Ç—Ä–æ–≥–∞–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã, —á—Ç–æ–±—ã –Ω–µ ¬´–ª–æ–º–∞—Ç—å¬ª —Ç–µ–∫—Å—Ç.
    –ü—Ä–∏ parse_mode=None Telegram –Ω–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É.
    """
    if not text:
        return text
    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–≥–∏ –≤–∏–¥–∞ <...>
    return re.sub(r'<[^>]*>', '', text)

async def process_video_file(video_path, chat_id, message_id, context, status_message=None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ —Ñ–∞–π–ª–∞, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é.
    –≠—Ç–∞ –≤–µ—Ä—Å–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—ä–µ–∫—Ç–∞ Update –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é —Å —Ñ–∞–π–ª–∞–º–∏."""
    
    # –ö–Ω–æ–ø–∫–∏ —É–±—Ä–∞–Ω—ã –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤—ã–¥–∞—á—É
    
    try:
        # –ï—Å–ª–∏ –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏—à—ë–ª Telegram-–æ–±—ä–µ–∫—Ç (Video/Document), —Å–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∏–≤–∞–µ–º –µ–≥–æ –≤ —Ñ–∞–π–ª
        if not isinstance(video_path, Path):
            try:
                file_id = getattr(video_path, 'file_id', None)
                if file_id is None:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç–∞ video_path: –æ–∂–∏–¥–∞–ª—Å—è Path –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å file_id")
                # –ö—É–¥–∞ —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ
                download_path = VIDEOS_DIR / f"telegram_video_{message_id}.mp4"
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                download_path.parent.mkdir(parents=True, exist_ok=True)
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telegram Bot API
                tg_file = await context.bot.get_file(file_id)
                await tg_file.download_to_drive(custom_path=download_path)
                logger.info(f"[PROCESSOR] –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {download_path}")
                video_path = download_path
            except Exception as download_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π: {download_error}")
                if status_message:
                    await status_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
                else:
                    await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
                return
        
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        audio_path = AUDIO_DIR / f"telegram_video_{message_id}.wav"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ
        if not video_path.exists():
            if status_message:
                await status_message.edit_text(
                    "–ú—è—É! –í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏. *–≥—Ä—É—Å—Ç–Ω–æ –º–∞—à–µ—Ç —Ö–≤–æ—Å—Ç–æ–º*"
                )
            else:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="–ú—è—É! –í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏. *–≥—Ä—É—Å—Ç–Ω–æ –º–∞—à–µ—Ç —Ö–≤–æ—Å—Ç–æ–º*"
                )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if not status_message:
            status_message = await context.bot.send_message(
                chat_id=chat_id,
                text="–ú—É—Ä-–º—É—Ä! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ... *—Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω*"
            )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
        await status_message.edit_text(
            "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ... *–Ω–µ—Ç–µ—Ä–ø–µ–ª–∏–≤–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –ª–∞–ø–∫–∞–º–∏*"
        )
        
        audio_extracted = await extract_audio_from_video(video_path, audio_path)
        if not audio_extracted:
            await status_message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ. *–≥—Ä—É—Å—Ç–Ω–æ –≤–∑–¥—ã—Ö–∞–µ—Ç*"
            )
            return
    
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        await status_message.edit_text(
            "–ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é... *–≤–æ–∑–±—É–∂–¥–µ–Ω–Ω–æ –≤–∏–ª—è–µ—Ç —Ö–≤–æ—Å—Ç–æ–º*"
        )
        
        raw_transcript = await transcribe_audio(audio_path)
        if not raw_transcript:
            await status_message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ. *—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω–Ω–æ –º—è—É–∫–∞–µ—Ç*"
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        await status_message.edit_text(
            "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –ü—Ä–∏–≤–æ–∂—É —Ç–µ–∫—Å—Ç –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥... *–¥–µ–ª–æ–≤–∏—Ç–æ —Å—Ç—É—á–∏—Ç –ø–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ*"
        )
        
        formatted_transcript = await format_transcript_with_llm(raw_transcript)
        if not formatted_transcript:
            # LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç–µ—Ä
            formatted_transcript = _basic_local_format(raw_transcript)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏
        transcript_path = TRANSCRIPTIONS_DIR / f"telegram_video_{message_id}.txt"
        raw_transcript_path = TRANSCRIPTIONS_DIR / f"telegram_video_{message_id}_raw.txt"
        
        with open(transcript_path, "w", encoding="utf-8") as f:
            f.write(formatted_transcript)
            
        with open(raw_transcript_path, "w", encoding="utf-8") as f:
            f.write(raw_transcript)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_transcriptions[chat_id] = {
            'raw': raw_transcript,
            'formatted': formatted_transcript,
            'path': str(transcript_path),
            'raw_path': str(raw_transcript_path),
            'timestamp': asyncio.get_event_loop().time()
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –∏–ª–∏ .docx –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ
        if len(formatted_transcript or "") > MAX_MESSAGE_LENGTH:
            if status_message:
                await status_message.edit_text(
                    "–ì–æ—Ç–æ–≤–æ! –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–∏–ª–∞—Å—å –¥–ª–∏–Ω–Ω–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º..."
                )
            from docx import Document
            docx_path = TRANSCRIPTIONS_DIR / f"transcript_video_{message_id}.docx"
            document = Document()
            for line in formatted_transcript.split('\n'):
                document.add_paragraph(line)
            document.save(docx_path)
            with open(docx_path, 'rb') as f:
                await context.bot.send_document(
                    chat_id=chat_id,
                    document=f,
                    filename=docx_path.name,
                    caption="üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞!"
                )
        else:
            clean_transcript = clean_html_entities(formatted_transcript or "")
            if status_message:
                await status_message.edit_text(
                    f"–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ:\n\n{clean_transcript}",
                    parse_mode=None
                )
            else:
                await context.bot.send_message(chat_id=chat_id, text=clean_transcript)
        
        logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ñ–∞–π–ª—ã: {transcript_path}, {raw_transcript_path}")
        return transcript_path, raw_transcript_path
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
        import traceback
        logger.error(traceback.format_exc())
        
        if status_message:
            await status_message.edit_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}. *–≤–∏–Ω–æ–≤–∞—Ç–æ –æ–ø—É—Å–∫–∞–µ—Ç —É—à–∏*"
            )
        return None, None

async def process_video(chat_id, message_id, update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é."""
    # –ö–Ω–æ–ø–∫–∏ —É–±—Ä–∞–Ω—ã ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    
    user_id = update.effective_user.id
    
    try:
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        from transkribator_modules.config import VIDEOS_DIR
        video_path = VIDEOS_DIR / f"telegram_video_{message_id}.mp4"
        audio_path = AUDIO_DIR / f"telegram_video_{message_id}.wav"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ
        if not video_path.exists():
            await update.message.reply_text(
                "–ú—è—É! –í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏. *–≥—Ä—É—Å—Ç–Ω–æ –º–∞—à–µ—Ç —Ö–≤–æ—Å—Ç–æ–º*"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status_message = await update.message.reply_text(
            "–ú—É—Ä-–º—É—Ä! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ... *—Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω*"
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
        await status_message.edit_text(
            "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ... *–Ω–µ—Ç–µ—Ä–ø–µ–ª–∏–≤–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –ª–∞–ø–∫–∞–º–∏*"
        )
        
        audio_extracted = await extract_audio_from_video(video_path, audio_path)
        if not audio_extracted:
            await status_message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ. *–≥—Ä—É—Å—Ç–Ω–æ –≤–∑–¥—ã—Ö–∞–µ—Ç*"
            )
            return
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        await status_message.edit_text(
            "–ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é... *–≤–æ–∑–±—É–∂–¥–µ–Ω–Ω–æ –≤–∏–ª—è–µ—Ç —Ö–≤–æ—Å—Ç–æ–º*"
        )
        
        raw_transcript = await transcribe_audio(audio_path)
        if not raw_transcript:
            await status_message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ. *—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω–Ω–æ –º—è—É–∫–∞–µ—Ç*"
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        await status_message.edit_text(
            "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –ü—Ä–∏–≤–æ–∂—É —Ç–µ–∫—Å—Ç –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥... *–¥–µ–ª–æ–≤–∏—Ç–æ —Å—Ç—É—á–∏—Ç –ø–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ*"
        )
        
        formatted_transcript = await format_transcript_with_llm(raw_transcript)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏
        transcript_path = TRANSCRIPTIONS_DIR / f"telegram_video_{message_id}.txt"
        raw_transcript_path = TRANSCRIPTIONS_DIR / f"telegram_video_{message_id}_raw.txt"
        
        with open(transcript_path, "w", encoding="utf-8") as f:
            f.write(formatted_transcript)
        
        with open(raw_transcript_path, "w", encoding="utf-8") as f:
            f.write(raw_transcript)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_transcriptions[user_id] = {
            'raw': raw_transcript,
            'formatted': formatted_transcript,
            'path': str(transcript_path),
            'raw_path': str(raw_transcript_path),
            'timestamp': asyncio.get_event_loop().time()
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –∏–ª–∏ .docx
        if len(formatted_transcript) > MAX_MESSAGE_LENGTH:
            if status_message:
                await status_message.edit_text(
                    "–ì–æ—Ç–æ–≤–æ! –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–∏–ª–∞—Å—å –¥–ª–∏–Ω–Ω–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º..."
                )
            from docx import Document
            docx_path = TRANSCRIPTIONS_DIR / f"transcript_video_{message_id}.docx"
            document = Document()
            for line in formatted_transcript.split('\n'):
                document.add_paragraph(line)
            document.save(docx_path)
            with open(docx_path, 'rb') as f:
                await context.bot.send_document(
                    chat_id=chat_id,
                    document=f,
                    filename=docx_path.name,
                    caption="üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞!"
                )
        else:
            clean_transcript = clean_html_entities(formatted_transcript)
            if status_message:
                await status_message.edit_text(
                    f"–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ:\n\n{clean_transcript}",
                    parse_mode=None
                )
            else:
                await update.message.reply_text(clean_transcript)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)} *–∏—Å–ø—É–≥–∞–Ω–Ω–æ –ø—Ä—è—á–µ—Ç—Å—è*"
        ) 