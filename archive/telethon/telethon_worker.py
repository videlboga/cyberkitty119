#!/usr/bin/env python3

import os
import sys
import asyncio
import logging
import re
from pathlib import Path
from dotenv import load_dotenv
from telethon import TelegramClient, events, errors
from telethon.tl.types import Message, MessageMediaDocument, DocumentAttributeVideo

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API
API_ID = int(os.getenv('TELEGRAM_API_ID', '0'))
API_HASH = os.getenv('TELEGRAM_API_HASH', '')
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '')
BOT_ID = os.getenv('BOT_ID', '')
SESSION_FILE = 'telethon_worker.session'

# –ü—É—Ç–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
BASE_DIR = Path(__file__).resolve().parent
VIDEOS_DIR = BASE_DIR / "videos"
AUDIO_DIR = BASE_DIR / "audio"
TRANSCRIPTIONS_DIR = BASE_DIR / "transcriptions"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
VIDEOS_DIR.mkdir(exist_ok=True)
AUDIO_DIR.mkdir(exist_ok=True)
TRANSCRIPTIONS_DIR.mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("telethon_worker.log")
    ]
)
logger = logging.getLogger(__name__)

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
VIDEO_DOWNLOAD_PATTERN = re.compile(r'#video_download_(\d+)_(\d+)')
FORWARD_DOWNLOAD_PATTERN = re.compile(r'#forward_download_(\d+)_(\d+)_(-?\d+)_(\d+)')

# –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telethon worker'–∞."""
    global last_command_chat_id, last_command_message_id, last_command_time
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã
    last_command_chat_id = None
    last_command_message_id = None
    last_command_time = 0
    
    logger.info("–ó–∞–ø—É—Å–∫ Telethon worker'–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
    session_file = Path(SESSION_FILE)
    if not session_file.exists():
        logger.error(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ {SESSION_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å–∫—Ä–∏–ø—Ç telethon_auth.py –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ–∞–π–ª–æ–º —Å–µ—Å—Å–∏–∏
    client = TelegramClient(SESSION_FILE, API_ID, API_HASH)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
        await client.connect()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not await client.is_user_authorized():
            logger.error("–§–∞–π–ª —Å–µ—Å—Å–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
            logger.error("–£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ telethon_auth.py –∑–∞–Ω–æ–≤–æ.")
            await client.disconnect()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        me = await client.get_me()
        logger.info(f"Telethon worker –∑–∞–ø—É—â–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ {me.first_name} {me.last_name} (@{me.username})")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        client.add_event_handler(handle_new_message, events.NewMessage())
        
        logger.info(f"–ñ–¥—É –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ —Å ID {BOT_ID}...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ –¥–µ—Ä–∂–∏–º –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º
        await client.run_until_disconnected()
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ–ª–µ—Ç–æ–Ω-–≤–æ—Ä–∫–µ—Ä–∞: {e}")
    
    finally:
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è, –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
        if client and client.is_connected():
            await client.disconnect()

async def download_and_save_video(client, message, target_file):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∏–¥–µ–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram."""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ —Ñ–∞–π–ª: {target_file}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        target_file.parent.mkdir(exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        await client.download_media(message.media, file=str(target_file))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        if target_file.exists() and target_file.stat().st_size > 0:
            logger.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {target_file} (—Ä–∞–∑–º–µ—Ä: {target_file.stat().st_size} –±–∞–π—Ç)")
            return True
        else:
            logger.error(f"–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: {target_file}")
            return False
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        return False

async def handle_new_message(event):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞."""
    message = event.message
    client = event.client
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sender = await message.get_sender()
        sender_id = sender.id if hasattr(sender, 'id') else "Unknown ID"
        sender_username = sender.username if hasattr(sender, 'username') else "No username"
        message_text = message.text or message.caption or "No text"
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ({message.id}) –æ—Ç {sender_username or sender_id}: {message_text[:50]}{'...' if len(message_text) > 50 else ''}")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏–∑ Telegram API
        try:
            bot_info = await client.get_entity(BOT_ID)
            bot_id = bot_info.id
            logger.info(f"ID –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ {BOT_ID}: {bot_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ: {e}")
            bot_id = None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø–æ username –∏–ª–∏ –ø–æ ID)
        is_from_our_bot = (hasattr(sender, 'username') and sender.username == BOT_ID) or (bot_id and sender_id == bot_id)
        
        if not is_from_our_bot:
            logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –±–æ—Ç–∞: {sender_username or sender_id}")
            return
            
        logger.info(f"üëâ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞: {message_text}")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã
        global last_command_chat_id, last_command_message_id, last_command_time
        current_time = asyncio.get_event_loop().time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = message.text or message.caption or ""
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ (–≤ —Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏)
        if message_text and VIDEO_DOWNLOAD_PATTERN.search(message_text):
            match = VIDEO_DOWNLOAD_PATTERN.search(message_text)
            chat_id, message_id = match.groups()
            logger.info(f"üëç –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: chat_id={chat_id}, message_id={message_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∏–¥–µ–æ
            last_command_chat_id = chat_id
            last_command_message_id = message_id
            last_command_time = current_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if message.media and (isinstance(message.media, MessageMediaDocument) and 
                            hasattr(message.media.document, 'attributes') and 
                            any(isinstance(attr, DocumentAttributeVideo) for attr in message.media.document.attributes)):
                
                # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
                video_path = VIDEOS_DIR / f"telegram_video_{message_id}.mp4"
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                logger.info(f"üé¨ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è message_id={message_id}")
                success = await download_and_save_video(client, message, video_path)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                if success:
                    logger.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {video_path}")
                    await client.send_message(BOT_ID, f"#video_downloaded_{chat_id}_{message_id}")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –¥–ª—è message_id={message_id}")
                    await client.send_message(BOT_ID, f"#video_download_failed_{chat_id}_{message_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –≤–∏–¥–µ–æ: {message_id}")
                
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∏–¥–µ–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ —Å –Ω–æ–≤—ã–º –ø–æ–¥—Ö–æ–¥–æ–º, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        elif message.media and (isinstance(message.media, MessageMediaDocument) and 
                hasattr(message.media.document, 'attributes') and 
                any(isinstance(attr, DocumentAttributeVideo) for attr in message.media.document.attributes)):
            
            logger.info(f"üìπ –ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –±–µ–∑ —è–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–º–∞–Ω–¥–∞ –≤ –ø–æ–¥–ø–∏—Å–∏
            caption = message.caption or ""
            if caption and VIDEO_DOWNLOAD_PATTERN.search(caption):
                match = VIDEO_DOWNLOAD_PATTERN.search(caption)
                chat_id, message_id = match.groups()
                logger.info(f"üìù –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤ –ø–æ–¥–ø–∏—Å–∏: chat_id={chat_id}, message_id={message_id}")
                
                # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
                video_path = VIDEOS_DIR / f"telegram_video_{message_id}.mp4"
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                logger.info(f"üé¨ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é –¥–ª—è message_id={message_id}")
                success = await download_and_save_video(client, message, video_path)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                if success:
                    logger.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {video_path}")
                    await client.send_message(BOT_ID, f"#video_downloaded_{chat_id}_{message_id}")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –¥–ª—è message_id={message_id}")
                    await client.send_message(BOT_ID, f"#video_download_failed_{chat_id}_{message_id}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            elif last_command_chat_id and last_command_message_id and (current_time - last_command_time < 5):
                logger.info(f"‚è±Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: chat_id={last_command_chat_id}, message_id={last_command_message_id}")
                
                # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
                video_path = VIDEOS_DIR / f"telegram_video_{last_command_message_id}.mp4"
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                success = await download_and_save_video(client, message, video_path)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                if success:
                    logger.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {video_path}")
                    await client.send_message(BOT_ID, f"#video_downloaded_{last_command_chat_id}_{last_command_message_id}")
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    last_command_chat_id = None
                    last_command_message_id = None
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –¥–ª—è message_id={last_command_message_id}")
                    await client.send_message(BOT_ID, f"#video_download_failed_{last_command_chat_id}_{last_command_message_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã –∏ –±–µ–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
                
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message_text:
            match = FORWARD_DOWNLOAD_PATTERN.search(message_text)
            
            if match:
                chat_id, message_id, source_chat_id, source_message_id = match.groups()
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞: "
                          f"chat_id={chat_id}, message_id={message_id}, "
                          f"source_chat_id={source_chat_id}, source_message_id={source_message_id}")
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
                    source_chat_id = int(source_chat_id)
                    source_message_id = int(source_message_id)
                    
                    # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
                    video_path = VIDEOS_DIR / f"telegram_video_{message_id}.mp4"
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞
                        source_message = await client.get_messages(source_chat_id, ids=source_message_id)
                        
                        if source_message and source_message.media:
                            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                            success = await download_and_save_video(client, source_message, video_path)
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                            if success:
                                await client.send_message(BOT_ID, f"#video_downloaded_{chat_id}_{message_id}")
                            else:
                                await client.send_message(BOT_ID, f"#video_download_failed_{chat_id}_{message_id}")
                        else:
                            logger.error(f"–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞: {source_chat_id}, {source_message_id}")
                            await client.send_message(BOT_ID, f"#video_download_failed_{chat_id}_{message_id}_no_media")
                    
                    except errors.FloodWaitError as e:
                        logger.error(f"Flood wait error: {e}")
                        await client.send_message(BOT_ID, f"#video_download_failed_{chat_id}_{message_id}_flood_wait_{e.seconds}")
                    
                    except errors.ChatAdminRequiredError:
                        logger.error(f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É: {source_chat_id}")
                        await client.send_message(BOT_ID, f"#video_download_failed_{chat_id}_{message_id}_no_access")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∫—É: {e}")
                    await client.send_message(BOT_ID, f"#video_download_failed_{chat_id}_{message_id}_error")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        import traceback
        logger.error(traceback.format_exc())

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 