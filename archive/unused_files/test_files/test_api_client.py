#!/usr/bin/env python3
import requests
import sys
from pathlib import Path

def test_api_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ API"""
    try:
        response = requests.get("http://localhost:8000/health")
        if response.status_code == 200:
            print("‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"–û—Ç–≤–µ—Ç: {response.json()}")
            return True
        else:
            print(f"‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def transcribe_video(video_path, format_with_llm=True):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é"""
    video_file = Path(video_path)
    
    if not video_file.exists():
        print(f"‚ùå –í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
        return None
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é: {video_file.name}")
    print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {video_file.stat().st_size / (1024*1024):.1f} –ú–ë")
    
    try:
        with open(video_file, 'rb') as f:
            files = {'file': (video_file.name, f, 'video/mp4')}
            data = {'format_with_llm': format_with_llm}
            
            print("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)")
            response = requests.post(
                "http://localhost:8000/transcribe",
                files=files,
                data=data,
                timeout=600  # 10 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"Task ID: {result['task_id']}")
            print(f"–†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ: {result['audio_size_mb']} –ú–ë")
            print(f"–î–ª–∏–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {result['transcript_length']} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ LLM: {result['formatted_with_llm']}")
            
            print("\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:")
            print("=" * 50)
            print(result['formatted_transcript'][:1000] + "..." if len(result['formatted_transcript']) > 1000 else result['formatted_transcript'])
            print("=" * 50)
            
            return result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def main():
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_api_client.py <–ø—É—Ç—å_–∫_–≤–∏–¥–µ–æ—Ñ–∞–π–ª—É>")
        print("–ü—Ä–∏–º–µ—Ä: python test_api_client.py /home/cyberkitty/Videos/video1254700787.mp4")
        sys.exit(1)
    
    video_path = sys.argv[1]
    
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ API —Å–µ—Ä–≤–µ—Ä–∞...")
    if not test_api_health():
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: ./run_api_server.sh")
        sys.exit(1)
    
    print("\nüé¨ –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –≤–∏–¥–µ–æ...")
    result = transcribe_video(video_path)
    
    if result:
        print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! Task ID: {result['task_id']}")
    else:
        print("\n‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        sys.exit(1)

if __name__ == "__main__":
    main() 