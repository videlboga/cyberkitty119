#!/usr/bin/env python3
import asyncio
import os
import tempfile
import uuid
import time
from pathlib import Path
from typing import Optional, List

from fastapi import FastAPI, File, UploadFile, HTTPException, Depends, Header, Query
from fastapi.responses import JSONResponse, HTMLResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn
import httpx

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
import sys
current_dir = Path(__file__).parent.resolve()
sys.path.append(str(current_dir))

try:
    from transkribator_modules.transcribe.transcriber_v4 import transcribe_audio, format_transcript_with_llm
    from transkribator_modules.audio.extractor import extract_audio_from_video
    from transkribator_modules.config import logger, BOT_TOKEN
    from transkribator_modules.db.database import (
        init_database, get_db, UserService, ApiKeyService, TranscriptionService,
        calculate_audio_duration, get_plans, SessionLocal
    )
    from transkribator_modules.db.models import User, ApiKey
    from transkribator_modules.google_api import GoogleCredentialService, parse_state
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

app = FastAPI(
    title="Transkribator API",
    description="API –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏",
    version="2.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_database()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –¥–ª—è –Æ–ö–∞—Å—Å—ã
from transkribator_modules.bot.yukassa_webhook import setup_yukassa_webhook
setup_yukassa_webhook(app)

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
TEMP_DIR = Path("/tmp/transkribator")
TEMP_DIR.mkdir(exist_ok=True)

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API
class PlanInfo(BaseModel):
    name: str
    display_name: str
    minutes_per_month: Optional[float]
    max_file_size_mb: float
    price_rub: float
    price_usd: float
    description: str
    features: List[str]

class UserInfo(BaseModel):
    telegram_id: int
    username: Optional[str]
    current_plan: str
    plan_display_name: str
    minutes_used_this_month: float
    minutes_limit: Optional[float]
    minutes_remaining: float
    usage_percentage: float
    total_minutes_transcribed: float

class ApiKeyInfo(BaseModel):
    name: str
    created_at: str
    last_used_at: Optional[str]
    minutes_limit: Optional[float]
    minutes_used: float
    is_active: bool

class TranscriptionResult(BaseModel):
    task_id: str
    filename: str
    file_size_mb: float
    audio_duration_minutes: float
    raw_transcript: str
    formatted_transcript: str
    transcript_length: int
    processing_time_seconds: float
    formatted_with_llm: bool

# Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞
async def verify_api_key(
    authorization: str = Header(None),
    x_api_key: str = Header(None),
    api_key: str = Query(None),
    db = Depends(get_db)
) -> tuple[User, Optional[ApiKey]]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    key = None
    if authorization and authorization.startswith("Bearer "):
        key = authorization[7:]
    elif x_api_key:
        key = x_api_key
    elif api_key:
        key = api_key

    if not key:
        raise HTTPException(
            status_code=401,
            detail="API –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization: Bearer <key> –∏–ª–∏ X-API-Key"
        )

    api_key_service = ApiKeyService(db)
    api_key_obj = api_key_service.verify_api_key(key)

    if not api_key_obj:
        raise HTTPException(
            status_code=401,
            detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á"
        )

    user_service = UserService(db)
    user = db.query(User).filter(User.id == api_key_obj.user_id).first()

    if not user or not user.is_active:
        raise HTTPException(
            status_code=401,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        )

    return user, api_key_obj

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "message": "Transkribator API v2.0",
        "version": "2.0.0",
        "features": ["–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≤–∏–¥–µ–æ", "–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏", "API –∫–ª—é—á–∏", "–õ–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
        "endpoints": {
            "/transcribe": "POST - –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ (—Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á)",
            "/plans": "GET - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤",
            "/user/info": "GET - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏",
            "/user/api-keys": "GET - –°–ø–∏—Å–æ–∫ API –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "/webhook/yukassa": "POST - Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –Æ–ö–∞—Å—Å—ã",
            "/health": "GET - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"
        }
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "healthy", "service": "transkribator-api", "version": "2.0.0"}


async def _notify_google_result(telegram_id: Optional[int], message: str) -> None:
    if not BOT_TOKEN or not telegram_id:
        return
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            await client.post(url, json={"chat_id": telegram_id, "text": message})
    except Exception as exc:  # noqa: BLE001
        logger.warning(
            "Failed to notify user about Google OAuth result",
            extra={"error": str(exc), "telegram_id": telegram_id},
        )


def _html_response(title: str, body: str, status_code: int = 200) -> HTMLResponse:
    content = f"""
    <html>
        <head>
            <meta charset='utf-8'/>
            <title>{title}</title>
            <style>body{{font-family:Arial,sans-serif;background:#0f172a;color:#e2e8f0;padding:40px;text-align:center}}a{{color:#38bdf8}}</style>
        </head>
        <body>
            <h1>{title}</h1>
            <p>{body}</p>
            <p>–ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Telegram ü§ñ</p>
        </body>
    </html>
    """
    return HTMLResponse(content=content, status_code=status_code)


@app.get("/google/callback", response_class=HTMLResponse)
async def google_oauth_callback(
    code: Optional[str] = Query(None),
    state: Optional[str] = Query(None),
    error: Optional[str] = Query(None),
):
    logger.info(
        "Google OAuth callback received",
        extra={"code_present": bool(code), "state": state, "error": error},
    )

    if error:
        return _html_response("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", f"Google –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {error}", status_code=400)

    if not code or not state:
        return _html_response("–û—à–∏–±–∫–∞", "–ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä code/state –≤ –æ—Ç–≤–µ—Ç–µ Google", status_code=400)

    try:
        user_id, _ = parse_state(state)
    except ValueError as exc:
        logger.warning("Invalid Google OAuth state", extra={"error": str(exc)})
        return _html_response("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π state. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.", status_code=400)

    db = SessionLocal()
    telegram_id: Optional[int] = None
    try:
        user = db.query(User).filter(User.id == user_id).one_or_none()
        if not user:
            logger.error("User not found for Google OAuth", extra={"user_id": user_id})
            return _html_response("–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", status_code=404)

        telegram_id = user.telegram_id

        google_service = GoogleCredentialService(db)
        flow = google_service.build_flow(state=state)
        flow.fetch_token(code=code)
        credentials = flow.credentials

        tokens = {
            "access_token": credentials.token,
            "refresh_token": credentials.refresh_token,
            "expiry": credentials.expiry.isoformat() if credentials.expiry else None,
        }

        google_service.store_tokens(user_id, tokens, list(credentials.scopes or []))

        await _notify_google_result(
            telegram_id,
            "‚úÖ Google Drive –ø–æ–¥–∫–ª—é—á—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ Telegram ‚Äî –∑–∞–º–µ—Ç–∫–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ Drive.",
        )

        return _html_response(
            "Google –ø–æ–¥–∫–ª—é—á—ë–Ω",
            "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º.",
        )
    except Exception as exc:  # noqa: BLE001
        logger.exception(
            "Google OAuth callback failed",
            extra={"user_id": user_id, "error": str(exc)},
        )
        await _notify_google_result(
            telegram_id,
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å Google. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.",
        )
        return _html_response(
            "–û—à–∏–±–∫–∞",
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
            status_code=500,
        )
    finally:
        db.close()

@app.get("/plans", response_model=List[PlanInfo])
async def get_plans_endpoint():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤"""
    plans = get_plans()
    result = []

    for plan in plans:
        features = []
        if plan.features:
            import json
            try:
                features = json.loads(plan.features)
            except:
                features = [plan.features]

        result.append(PlanInfo(
            name=plan.name,
            display_name=plan.display_name,
            minutes_per_month=plan.minutes_per_month,
            max_file_size_mb=plan.max_file_size_mb,
            price_rub=plan.price_rub,
            price_usd=plan.price_usd,
            description=plan.description or "",
            features=features
        ))

    return result

@app.get("/user/info", response_model=UserInfo)
async def get_user_info(user_and_key: tuple = Depends(verify_api_key)):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"""
    user, api_key = user_and_key
    db = next(get_db())

    user_service = UserService(db)
    usage_info = user_service.get_usage_info(user)

    return UserInfo(
        telegram_id=user.telegram_id,
        username=user.username,
        current_plan=usage_info["current_plan"],
        plan_display_name=usage_info["plan_display_name"],
        minutes_used_this_month=usage_info["minutes_used_this_month"],
        minutes_limit=usage_info["minutes_limit"],
        minutes_remaining=usage_info["minutes_remaining"],
        usage_percentage=usage_info["usage_percentage"],
        total_minutes_transcribed=usage_info["total_minutes_transcribed"]
    )

@app.post("/transcribe", response_model=TranscriptionResult)
async def transcribe_video(
    file: UploadFile = File(...),
    format_with_llm: bool = True,
    user_and_key: tuple = Depends(verify_api_key)
):
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤

    - **file**: –í–∏–¥–µ–æ—Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    - **format_with_llm**: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–º–æ—â—å—é LLM (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
    """
    user, api_key = user_and_key
    db = next(get_db())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –∏ content_type
    video_extensions = {'.mp4', '.avi', '.mov', '.mkv', '.webm', '.flv', '.wmv', '.m4v'}
    audio_extensions = {'.mp3', '.wav', '.flac', '.aac', '.ogg', '.m4a', '.wma'}

    file_extension = Path(file.filename).suffix.lower() if file.filename else ''
    is_valid_extension = file_extension in video_extensions or file_extension in audio_extensions
    is_valid_content_type = file.content_type and file.content_type.startswith(('video/', 'audio/'))

    if not (is_valid_extension or is_valid_content_type):
        raise HTTPException(
            status_code=400,
            detail="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã"
        )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    task_id = str(uuid.uuid4())
    start_time = time.time()
    logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ {file.filename}, task_id: {task_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}")

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    temp_video_path = TEMP_DIR / f"{task_id}_video"
    temp_audio_path = TEMP_DIR / f"{task_id}_audio.wav"

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        logger.info(f"–°–æ—Ö—Ä–∞–Ω—è—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file.filename}")
        with open(temp_video_path, "wb") as buffer:
            content = await file.read()
            buffer.write(content)

        file_size_mb = len(content) / (1024 * 1024)
        logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —Ä–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        user_service = UserService(db)
        plan = user_service.get_user_plan(user)

        if plan and file_size_mb > plan.max_file_size_mb:
            raise HTTPException(
                status_code=413,
                detail=f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤–∞—à–µ–≥–æ –ø–ª–∞–Ω–∞: {plan.max_file_size_mb} –ú–ë"
            )

        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
        estimated_duration = calculate_audio_duration(file_size_mb)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        can_use, limit_message = user_service.check_usage_limit(user, estimated_duration)
        if not can_use:
            raise HTTPException(
                status_code=429,
                detail=f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {limit_message}"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã API –∫–ª—é—á–∞
        if api_key:
            api_key_service = ApiKeyService(db)
            can_use_api, api_limit_message = api_key_service.check_api_key_limits(api_key, estimated_duration)
            if not can_use_api:
                raise HTTPException(
                    status_code=429,
                    detail=f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API –∫–ª—é—á–∞: {api_limit_message}"
                )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
        logger.info("–ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ...")
        success = await extract_audio_from_video(temp_video_path, temp_audio_path)

        if not success or not temp_audio_path.exists():
            raise HTTPException(
                status_code=500,
                detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞"
            )

        audio_size_mb = temp_audio_path.stat().st_size / (1024 * 1024)
        logger.info(f"–ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä: {audio_size_mb:.1f} –ú–ë")

        # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ
        actual_duration = calculate_audio_duration(audio_size_mb)

        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ (—Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤)
        logger.info("–ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —á–µ—Ä–µ–∑ DeepInfra API...")
        raw_transcript = await transcribe_audio(temp_audio_path)

        if not raw_transcript:
            raise HTTPException(
                status_code=500,
                detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –æ—Ç API"
            )

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—ã—Ä–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª–∏–Ω–æ–π {len(raw_transcript)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        formatted_transcript = raw_transcript
        formatting_service = None

        if format_with_llm:
            logger.info("–§–æ—Ä–º–∞—Ç–∏—Ä—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å –ø–æ–º–æ—â—å—é LLM...")
            try:
                formatted_result = await format_transcript_with_llm(raw_transcript)
                if formatted_result and formatted_result != raw_transcript:
                    formatted_transcript = formatted_result
                    formatting_service = "openrouter"
                    logger.info("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞")
                else:
                    logger.info("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—ã—Ä—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é")

        processing_time = time.time() - start_time

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        transcription_service = TranscriptionService(db)
        transcription_record = transcription_service.save_transcription(
            user=user,
            filename=file.filename,
            file_size_mb=file_size_mb,
            audio_duration_minutes=actual_duration,
            raw_transcript=raw_transcript,
            formatted_transcript=formatted_transcript,
            processing_time=processing_time,
            transcription_service="deepinfra",
            formatting_service=formatting_service or "none"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–º–∏–Ω—É—Ç—ã –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
        user_service.add_usage(user, actual_duration)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã –¥–ª—è API –∫–ª—é—á–∞
        if api_key:
            api_key_service.add_api_key_usage(api_key, actual_duration)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = TranscriptionResult(
            task_id=task_id,
            filename=file.filename,
            file_size_mb=round(file_size_mb, 2),
            audio_duration_minutes=round(actual_duration, 2),
            raw_transcript=raw_transcript,
            formatted_transcript=formatted_transcript,
            transcript_length=len(formatted_transcript),
            processing_time_seconds=round(processing_time, 2),
            formatted_with_llm=format_with_llm and (formatted_transcript != raw_transcript)
        )

        logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, task_id: {task_id}, –≤—Ä–µ–º—è: {processing_time:.1f}—Å")
        return result

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file.filename}: {e}")
        import traceback
        logger.error(traceback.format_exc())
        raise HTTPException(
            status_code=500,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )

    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            if temp_video_path.exists():
                temp_video_path.unlink()
            if temp_audio_path.exists():
                temp_audio_path.unlink()
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã –¥–ª—è task_id: {task_id}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    uvicorn.run(
        "api_server:app",
        host="0.0.0.0",
        port=8000,
        log_level="info"
    )
